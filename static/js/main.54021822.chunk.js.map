{"version":3,"sources":["services/getRequest.js","components/words-container/words.container.component.jsx","components/popup-search-bar/popup-search-bar.component.jsx","pages/ThesaurusPage/ThesaurusPage.jsx","pages/SearchPage/SearchPage.jsx","Routes/Routes.jsx","components/help/help.component.jsx","components/theme-button/theme-button.component.jsx","components/search-button/search-button.component.jsx","pages/NavBar/NavBar.jsx","containers/App.jsx","theme.js","index.jsx"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","WordTypeContainer","styled","div","ChakraWordTypeContainer","chakra","WordsContainer","props","children","ml","mr","marginTop","boxShadow","gradientbg","isLargerthan440","bgGradient","m","withRouter","history","HandleBackButtonClick","getWords","setWordsLoaded","location","isOpen2","match","onToggle2","onClose2","onOpen2","useState","Word","setWord","setPathName","focusBorderColorInput","useColorModeValue","bg","color","useEffect","pathname","HandleKeyDownOpenSearchBar","event","key","ctrlKey","shiftKey","preventDefault","document","addEventListener","removeEventListener","style","overflow","position","zIndex","background","opacity","height","width","display","alignItems","justifyContent","w","in","className","mt","pointerEvents","Search","placeholder","focusBorderColor","onKeyDown","push","rounded","onChange","target","value","h","onClick","ThesaurusHeader","tw","h1","ChakraThesaurusHeader","WordAndType","TheWord","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","Link","ReturnedWord","PartOfSpeech","ShortDef","ReactHtmlParser","WordExample","getPathName","WordsLoaded","Syns","Ants","HandleTabClick","AvailableWordType","LinkChak","HandleEnterKey","getInputValue","fontColorMain","fontColorHeaders","fontColorDarkWhiteSmallWords","fontColorSynAnt","hover","hoverSynAntItems","textDecoration","SkeletonStartColor","SkeletonEndColor","focusBorderColorGeneral","useMediaQuery","Tabshover","fallbackBackground","useDisclosure","isOpen","onOpen","setIsLoaded","NounTabButton","useRef","VerbTabButton","AdjectiveTabButton","onClickWords","textContent","turnWordInToList","MainObj","ReturnedObj","undefined","map","index","_hover","listStyleType","useLocation","HandleKeyDownBackButtonQctrl","HandleKeyDownTabsButton123","current","click","window","scrollTo","top","behavior","TheWholeThesaurus","TransitionFade","slice","mb","fontSize","fontFamily","fontStyle","startColor","endColor","length","left","_focus","to","CSS","supports","borderRadius","align","variant","noun","Object","keys","ref","_selected","outline","outlineColor","outlineStyle","verb","adjective","MainContainer","SearchPage","WordFindType","WordFind","HandleSearchButtonClick","isMoreThan420px","inputField","HandleFocusOnInputEnterCtrlShift","focus","alignContent","whiteSpace","placement","cursor","size","icon","Info","fontWeight","sm","md","onKeyPress","transition","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","xmlns","d","bgColor","Routes","ThesaurusPageComponent","exact","path","Help","KeyboardShortCutsColor","Question","ThemeButton","useColorMode","colorMode","toggleColorMode","ThemeButtonRef","HandleKeyDownThemeIcon","Moon","SearchButtonHeader","NavBar","PathName","App","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","Error","setError","onClose","onToggle","setWordFind","setWordFindType","setSyns","setAnts","WordArray","setWordArray","setAvailableWordType","isNounFound","setIsNounFound","useHistory","WordArrayFilter","wordObjects","type","filter","fl","WordArraySetState","wordArray","hw","hwi","shortdef","dt","def","sseq","syns","meta","ants","ExampleModified","t","replace","PassRequstedWords","MainLoop","element","error","console","log","InitialWord","forEach","arr","prevState","PartOfSpeechChecker","then","data","isSetword","Path","which","ThesaurusPageFunc","ThesaurusPageCondition","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.54021822.chunk.js","sourcesContent":["/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://wordsapiprojectserver.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  useColorModeValue,\n  useMediaQuery,\n  chakra,\n} from '@chakra-ui/react';\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 15px;\npadding-bottom: 20px;\nword-spacing: 0;\n`;\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer);\n\nconst WordsContainer = (props) => {\n  const {\n    children, ml, mr, marginTop, boxShadow, gradientbg, isLargerthan440,\n  } = props;\n\n  return (\n    <ChakraWordTypeContainer boxShadow={boxShadow} bgGradient={gradientbg} m={(isLargerthan440) && '5'} ml={ml} mr={mr} marginTop={marginTop}>\n      {children}\n    </ChakraWordTypeContainer>\n  );\n};\n\nexport default WordsContainer;\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Presets } from 'react-component-transition';\nimport {\n  chakra,\n  Box,\n  Input,\n  useDisclosure,\n  useColorModeValue,\n  Portal,\n  Fade,\n  ScaleFade,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst PopUpSearchBar = ({\n  history, HandleBackButtonClick, setWordsLoaded,\n  getWords, location, match, isOpen2, onToggle2, onClose2, onOpen2,\n}) => {\n  const [Word, setWord] = useState('');\n  const [PathName, setPathName] = useState('');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n\n  useEffect(() => {\n    setPathName(location.pathname);\n    return () => {\n      setPathName('');\n    };\n  }, []);\n\n  const HandleKeyDownOpenSearchBar = (event) => {\n    if (event.key === 'E' && event.ctrlKey && event.shiftKey) {\n      event.preventDefault();\n      onToggle2();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownOpenSearchBar);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownOpenSearchBar);\n    };\n  }, [isOpen2]);\n\n  useEffect(() => {\n    if (isOpen2) {\n      document.body.style.overflow = 'hidden';\n    }\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen2]);\n\n  const HandleEnterKeyPopUpSearchBar = (event) => {\n    if (event.key === 'Enter') {\n      //   setWordsLoaded(false);\n      HandleBackButtonClick(false);\n      getWords(Word);\n      history.push('/thesaurus');\n      onClose2();\n    }\n  };\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  return (\n    <>\n      {(isOpen2)\n        ? (\n          <>\n            <Box position=\"fixed\" zIndex=\"9999\" background=\"gray.800\" opacity=\"0.6\" style={{ height: '100vh', width: '100vw' }} />\n            <Box>\n              <Box position=\"fixed\" display=\"flex\" alignItems=\"flex-start\" justifyContent=\"center\" zIndex=\"9999\" w=\"full\" style={{ height: '100vh' }}>\n                <ScaleFade in={isOpen2}>\n                  <Box className=\"relative\">\n                    <InputGroup mt=\"32\">\n                      <InputLeftElement\n                        zIndex=\"9999999\"\n                        pointerEvents=\"none\"\n                        // eslint-disable-next-line react/no-children-prop\n                        children={<SearchIcon zIndex=\"9999999\" color={color} />}\n                      />\n                      <Input style={{ zIndex: 999999 }} placeholder=\"Search a word\" focusBorderColor={focusBorderColorInput} onKeyDown={HandleEnterKeyPopUpSearchBar} background={bg} color={color} w={['16rem', 'xs', null]} rounded=\"xl\" onChange={getInputValue} />\n                    </InputGroup>\n                  </Box>\n                </ScaleFade>\n                <Box position=\"absolute\" w=\"full\" h=\"full\" background=\"transparent\" onClick={onClose2} />\n              </Box>\n            </Box>\n          </>\n        )\n        : <></>}\n    </>\n  );\n};\n\nexport default withRouter(PopUpSearchBar);\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport {\n  useEffect, React, useState, useRef,\n} from 'react';\nimport { useLocation, withRouter } from 'react-router-dom';\nimport tw from 'tailwind-styled-components';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n  SkeletonText,\n  Heading,\n  ListItem,\n  UnorderedList,\n  useMediaQuery,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Skeleton,\n  Stack,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\nimport WordsContainer from '../../components/words-container/words.container.component';\nimport PopUpSearchBar from '../../components/popup-search-bar/popup-search-bar.component';\n\nconst ThesaurusHeader = tw.h1`\n    italic\n    font-serif\n    text-3xl\n    font-bold\n    inline-block\n`;\nconst ChakraThesaurusHeader = chakra(ThesaurusHeader);\n\nconst WordAndType = tw.div`\n    mt-1\n`;\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`;\n\nconst ChakraTheWord = chakra(TheWord);\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`;\n\nconst ChakraTheType = chakra(TheType);\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`;\n\nconst ChakraSynAntHeader = chakra(SynAntHeader);\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`;\n\nconst Example = tw.span`\n    text-xl\n    block\n`;\n\nconst ChakraExample = chakra(Example);\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`;\n\nconst ChakraText = chakra(Text);\n\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (props) => {\n  const {\n    Link,\n    HandleBackButtonClick,\n    ReturnedWord,\n    PartOfSpeech,\n    ShortDef,\n    ReactHtmlParser,\n    WordExample,\n    getPathName,\n    WordsLoaded,\n    Syns,\n    Ants,\n    HandleTabClick,\n    AvailableWordType,\n    // eslint-disable-next-line no-unused-vars\n    getWords,\n    history,\n    HandleEnterKey,\n    getInputValue,\n    setWordsLoaded,\n  } = props;\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7');\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300');\n  const hover = useColorModeValue({ background: 'gray.200' }, { background: 'gray.700' });\n  const hoverSynAntItems = useColorModeValue({ textDecoration: 'underline' }, { textDecoration: 'underline' });\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200');\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const isLargerthan440 = useMediaQuery('(max-width: 440px)');\n  const Tabshover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fallbackBackground = useColorModeValue('rgba(255, 255, 255, .9)', 'rgba(0, 0, 0, 0.26)');\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)');\n  const boxShadow = useColorModeValue('0px 0px 25px #a1a1a1, -10px -10px 0px #3B82F6', '0px 0px 11px #1c1c1c, -10px -10px 0px orange');\n  const { isOpen, onOpen } = useDisclosure();\n  // eslint-disable-next-line no-unused-vars\n  const [isLoaded, setIsLoaded] = useState(false);\n  const NounTabButton = useRef(null);\n  const VerbTabButton = useRef(null);\n  const AdjectiveTabButton = useRef(null);\n\n  const onClickWords = (event) => {\n    HandleBackButtonClick();\n    getWords(event.target.textContent);\n    history.push('/thesaurus');\n  };\n\n  const turnWordInToList = (MainObj) => {\n    let ReturnedObj = [];\n    if (MainObj !== undefined) {\n      ReturnedObj = MainObj.map((word, index) => {\n        if (MainObj[index + 1] === undefined) {\n          return <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={index}>{word}</ListItem>;\n        }\n        return (\n          <>\n            <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={word}>{word}</ListItem>\n            <span key={index}>{',\\u00A0'}</span>\n          </>\n        );\n      });\n    }\n    return ReturnedObj;\n  };\n\n  // Change synonyms and antonyms words to list items\n  const OrderSynonyms = () => turnWordInToList(Syns);\n  const OrderAntonyms = () => turnWordInToList(Ants);\n\n  const location = useLocation();\n  useEffect(() => {\n    getPathName(location.pathname);\n  });\n\n  const HandleKeyDownBackButtonQctrl = (event) => {\n    if (event.key === 'Q' && event.ctrlKey) {\n      HandleBackButtonClick();\n      history.push('/');\n    }\n  };\n\n  const HandleKeyDownTabsButton123 = (event) => {\n    switch (event.key) {\n      case '!':\n        event.preventDefault();\n        NounTabButton.current.click();\n        break;\n      case '@':\n        event.preventDefault();\n        VerbTabButton.current.click();\n        break;\n      case '#':\n        event.preventDefault();\n        AdjectiveTabButton.current.click();\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownTabsButton123);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownTabsButton123);\n      // setIsLoaded(false);\n    };\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownBackButtonQctrl);\n      setIsLoaded(false);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  const TheWholeThesaurus = () => (\n    <WordsContainer boxShadow={boxShadow} gradientbg={gradientbg} m={(isLargerthan440) && '5'} ml={['0', '9em', null]} mr={['0', '9em', null]} marginTop={['3', null, null]}>\n      <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n        Thesaurus\n      </ChakraThesaurusHeader>\n      {(WordsLoaded)\n        ? (\n          <Presets.TransitionFade>\n            <WordAndType>\n              <Presets.TransitionFade>\n                <ChakraTheWord color={fontColorMain}>\n                  {ReturnedWord}\n                </ChakraTheWord>\n              </Presets.TransitionFade>\n              <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n                {PartOfSpeech}\n              </ChakraTheType>\n            </WordAndType>\n            <ChakraSynAntHeader color={fontColorHeaders}>\n              Synonyms & Antonyms of\n              {' '}\n              <em>{ReturnedWord}</em>\n            </ChakraSynAntHeader>\n            <SynAntContainer>\n              <ChakraText color={fontColorMain}>\n                {ShortDef}\n              </ChakraText>\n              {(ShortDef.slice(0, 5) === WordExample.slice(0, 5))\n                ? <></>\n                : (\n                  <ChakraExample color={fontColorSynAnt}>\n                    {' '}\n                    <strong>//</strong>\n                    {' '}\n                    {ReactHtmlParser(WordExample)}\n                  </ChakraExample>\n                )}\n              <Heading mb=\"1\" mt=\"2\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                Synonyms for\n                {' '}\n                <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n              </Heading>\n              <Box w={['100%', '70%', null]}>\n                <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n              </Box>\n              {(Ants !== undefined)\n                ? (\n                  <div>\n                    <Heading mb=\"1\" mt=\"4\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                      Antonyms for\n                      {' '}\n                      <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n                    </Heading>\n                    <Box w={['100%', '70%', null]}>\n                      <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n                    </Box>\n                  </div>\n                )\n                : <></>}\n            </SynAntContainer>\n          </Presets.TransitionFade>\n        )\n        : (\n          <Presets.TransitionFade>\n            <Stack>\n              <Skeleton height=\"9px\" mt=\"4\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" w=\"80%\" mb=\"3\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n            </Stack>\n          </Presets.TransitionFade>\n        )}\n    </WordsContainer>\n  );\n\n  return (\n    <>\n      {ReturnedWord.length\n        ? (\n          <Box zIndex=\"9991\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={focusBorderColorGeneral} bg={bg} color={color} _hover={hover} onClick={HandleBackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      {(location.pathname === '/thesaurus')\n        ? ((isLargerthan440[0])\n          ? (\n            <Box\n              background={!(CSS.supports('backdrop-filter', 'blur(5px)'))\n                  && fallbackBackground}\n              className=\"backdrop-blur\"\n              zIndex=\"9990\"\n              position=\"fixed\"\n              top=\"0\"\n              h=\"70px\"\n              w=\"full\"\n              borderRadius=\"0 0 20px 20px\"\n            />\n          )\n          : <></>\n        )\n        : <></>}\n\n      <Tabs align=\"center\" variant=\"soft-rounded\">\n        {/* <Box className='backdrop-blur z-50' display='flex'\n         justifyContent='center' h='22' width='full'  position='fixed' bottom='0'> */}\n        <TabList marginTop={['4', 0, null]}>\n          {(AvailableWordType.noun) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n            : <Tab ref={NounTabButton} onClick={() => HandleTabClick('noun')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Noun</Tab>\n          )\n            : <></>}\n          {(AvailableWordType.verb) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n            : <Tab ref={VerbTabButton} onClick={() => HandleTabClick('verb')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Verb</Tab>\n          )\n            : <></>}\n          {(AvailableWordType.adjective) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n            : <Tab ref={AdjectiveTabButton} onClick={() => HandleTabClick('adjective')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adjective</Tab>\n          )\n            : <></>}\n        </TabList>\n        {/* </Box> */}\n        <TabPanels>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n};\n\nexport default withRouter(ThesaurusPage);\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, React, useRef } from 'react';\nimport {\n  Heading,\n  Input,\n  Box,\n  chakra,\n  Fade,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  useMediaQuery,\n} from '@chakra-ui/react';\nimport { InfoIcon } from '@chakra-ui/icons';\n\nconst MainContainer = tw.div`\n   text-center\n   mt-40\n   sm:mt-0\n   md2:mt-38\n   lg:mt-32\n`;\n\nconst LinkCSS = `\npy-1\npx-3\nrounded-xl\nshadow-2xl\ninline-block\nmd:py-1\nmd:h-8\nmd:mt-1\nmd:px-4\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-400\nhover:bg-gray-200\ntransition duration-200 ease-in-out\n`;\n\nconst SearchPage = ({\n  WordFindType, HandleEnterKey, WordFind, isOpen,\n  getInputValue, HandleSearchButtonClick, Link, getPathName,\n}) => {\n  const [isMoreThan420px] = useMediaQuery('(max-width: 420px)');\n  const location = useLocation();\n  const LinkChak = chakra(Link);\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const inputField = useRef(null);\n\n  const HandleFocusOnInputEnterCtrlShift = (event) => {\n    if (event.key === 'A' && event.ctrlKey) {\n      event.preventDefault();\n      inputField.current.focus();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    return () => {\n      document.removeEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    };\n  });\n\n  useEffect(() => {\n    getPathName(location.pathname);\n  });\n\n  return (\n    <MainContainer>\n      <Box display=\"flex\" alignContent=\"center\" justifyContent=\"center\" mt={['12', null, '15', '0', '32']} mb={['5', null, '12']}>\n        <Heading fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">\n          Words to be\n          {(isMoreThan420px) ? '\\u00A0' : ' thesaurused'}\n        </Heading>\n        <Popover placement=\"auto-end\" display=\"inline-block\">\n          <PopoverTrigger>\n            {(isMoreThan420px)\n              ? <Heading textDecoration={`underline wavy ${fontColorDarkWhiteSmallWords}`} _hover={[null, null, hover]} cursor=\"pointer\" fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">thesaurused</Heading>\n              : <IconButton variant=\"ghost\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} ml=\"2\" size=\"sm\" icon={<InfoIcon w=\"5\" h=\"5\" />} />}\n          </PopoverTrigger>\n          <PopoverContent outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Thesaurus</PopoverHeader>\n            <PopoverBody>\n              A thesaurus (plural thesauri or thesauruses) or synonym dictionary\n              is a reference work for finding synonyms and sometimes antonyms of words.\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      </Box>\n      <Box display={{ sm: 'flex', md: 'flex' }} justifyContent={[null, 'center', null]}>\n        <Box>\n          <Input ref={inputField} focusBorderColor={focusBorderColorInput} onKeyPress={HandleEnterKey} variant=\"filled\" w={['16rem', 'xs', null]} rounded=\"xl\" mr={[null, null, '2rem']} onChange={getInputValue} placeholder=\"Search for words\" />\n          {WordFind\n                && (\n                <Fade in={isOpen}>\n                  <Box mt=\"1\" display=\"flex\" justifyContent={['center', 'flex-start', null]} transition=\"ease\">\n                    <chakra.svg mt=\"1\" ml={[null, '4', null]} outline=\"none\" stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\" />\n                    </chakra.svg>\n                    <chakra.span ml=\"1\" mb={['-1', 0, 0]} color=\"red.400\">\n                      {(WordFindType === 'no response' ? 'Word not found! (Misspelled)' : ((WordFindType === 'no input') ? 'Input is empty, type a word!' : 'The word is not in the thesaurus!'))}\n                    </chakra.span>\n                  </Box>\n                </Fade>\n                )}\n        </Box>\n        <Box ml={[0, 5, 0]} mt={[5, 1, 0]}>\n          <LinkChak\n            _hover={{ background: 'gray.200' }}\n            _focus={focusBorderColorGeneral}\n            color={\n                  (isMoreThan420px)\n                    ? fontColorMain\n                    : 'gray.800'\n                }\n            bgColor={\n                  (isMoreThan420px)\n                    ? fontColorDarkWhiteSmallWords\n                    : 'gray.100'\n                  }\n            fontWeight=\"semibold\"\n            onClick={HandleSearchButtonClick}\n            className={LinkCSS}\n            to=\"/thesaurus\"\n          >\n            Search\n          </LinkChak>\n        </Box>\n      </Box>\n    </MainContainer>\n  );\n};\n\nexport default SearchPage;\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\nimport React from 'react';\nimport { Presets } from 'react-component-transition';\nimport SearchPage from '../pages/SearchPage/SearchPage';\n\nfunction Routes({ ThesaurusPageComponent, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <SearchPage {...props} />\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {ThesaurusPageComponent()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  Button,\n  chakra,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst Help = () => {\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const KeyboardShortCutsColor = useColorModeValue('gray.600', 'gray.400');\n\n  return (\n    <Popover placement=\"auto\">\n      <PopoverTrigger>\n        <Button\n          _focus={focusBorderColorInput}\n          focusBorderColor={focusBorderColorInput}\n          boxShadow=\"lg\"\n          outline=\"none\"\n          outlineColor=\"initial\"\n          style={{ outlineStyle: 'none' }}\n          m=\"4\"\n          mr={[null, '40', null]}\n          rounded=\"xl\"\n        >\n          <QuestionIcon />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent width=\"max-content\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Keyboard Shortcuts</PopoverHeader>\n        <PopoverBody className=\"whitespace-pre-wrap text-left\">\n          <strong>Global</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Switch theme:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + X</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Home Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Focus on input field:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + A</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Thesaurus Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Go to Home Page:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + Q</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Search bar:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + E</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Switch word type:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Shift + 1 or 2 or 3</chakra.span>\n          </chakra.span>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Help;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  chakra, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\n\nconst ThemeButton = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const ThemeButtonRef = useRef(null);\n  const HandleKeyDownThemeIcon = (event) => {\n    if (event.key === 'X' && event.ctrlKey) {\n      event.preventDefault();\n      ThemeButtonRef.current.click();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownThemeIcon);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownThemeIcon);\n    };\n  }, []);\n\n  return (\n    <Button ref={ThemeButtonRef} _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={toggleColorMode}>\n      {colorMode === 'light'\n        ? <MoonIcon />\n        : (\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n          </chakra.svg>\n        )}\n    </Button>\n  );\n};\n\nexport default ThemeButton;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  Button, useColorModeValue,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst SearchButtonHeader = ({ onOpen2 }) => {\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n    <Button _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={onOpen2}>\n      <SearchIcon />\n    </Button>\n  );\n};\n\nexport default SearchButtonHeader;\n","/* eslint-disable react/prop-types */\nimport { Box } from '@chakra-ui/react';\n// eslint-disable-next-line no-unused-vars\nimport { MoonIcon, QuestionIcon } from '@chakra-ui/icons';\nimport React from 'react';\nimport Help from '../../components/help/help.component';\nimport ThemeButton from '../../components/theme-button/theme-button.component';\nimport SearchButtonHeader from '../../components/search-button/search-button.component';\n\nconst NavBar = ({\n  isOpen2, onToggle2, onClose2, onOpen2, PathName,\n}) => (\n  <Box\n    zIndex=\"9991\"\n    position=\"sticky\"\n    top=\"0\"\n    h=\"70px\"\n    w=\"full\"\n    borderRadius=\"0 0 20px 20px\"\n    display=\"flex\"\n    justifyContent=\"flex-end\"\n  >\n    {(PathName === '/thesaurus')\n      ? (\n        <SearchButtonHeader\n          isOpen2={isOpen2}\n          onToggle2={onToggle2}\n          onClose2={onClose2}\n          onOpen2={onOpen2}\n        />\n      )\n      : <></>}\n    <ThemeButton />\n    <Help />\n  </Box>\n);\n\nexport default NavBar;\n","/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n  useHistory,\n} from 'react-router-dom';\nimport ReactHtmlParser from 'react-html-parser';\nimport {\n  useState,\n  useEffect,\n  React,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\nimport ThesaurusPage from '../pages/ThesaurusPage/ThesaurusPage';\nimport Routes from '../Routes/Routes';\nimport NavBar from '../pages/NavBar/NavBar';\nimport PopUpSearchBar from '../components/popup-search-bar/popup-search-bar.component';\n// import Help from '../components/help/help.component';\n\n// TODO understand wth is your state doing\n\nconst App = () => {\n  const [Word, setWord] = useState('');\n  const [ReturnedWord, setReturnedWord] = useState('');\n  const [ShortDef, setShortDef] = useState('');\n  const [PartOfSpeech, setPartOfSpeech] = useState('');\n  const [WordExample, setWordExample] = useState('');\n  const [Error, setError] = useState(false);\n  const [PathName, setPathName] = useState('');\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const {\n    isOpen: isOpen2,\n    onOpen: onOpen2,\n    onClose: onClose2,\n    onToggle: onToggle2,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [Syns, setSyns] = useState([]);\n  const [Ants, setAnts] = useState([]);\n  const [WordArray, setWordArray] = useState([]);\n  const [AvailableWordType, setAvailableWordType] = useState({});\n  const [isNounFound, setIsNounFound] = useState(false);\n  const history = useHistory();\n\n  // Used as a condition to render the values or skeleton in ThesaurusPage\n  useEffect(() => {\n    if (PathName === '/thesaurus' && !ShortDef.length) {\n      setWordsLoaded(false);\n    } else if (PathName === '/thesaurus' && ShortDef.length) {\n      setWordsLoaded(true);\n    }\n  });\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  const WordArrayFilter = (wordObjects, type) => {\n    const filteredArray = wordObjects.filter((word) => word.fl === type);\n    return filteredArray[0];\n  };\n\n  const WordArraySetState = (wordArray) => {\n    const {\n      fl,\n      hwi: {\n        hw,\n      },\n      shortdef,\n      def: [{\n        sseq: dt,\n      }],\n      meta: {\n        syns,\n      },\n      meta: {\n        ants,\n      },\n    } = wordArray;\n    const Example = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n    const ExampleModified = Example.replace('{it}', '<em>').replace('{/it}', '</em>');\n    setAnts(ants[0]);\n    setSyns(syns[0]);\n    setReturnedWord(hw);\n    setPartOfSpeech(fl);\n    setShortDef(shortdef[0]);\n    setWordExample(ExampleModified);\n  };\n\n  const PartOfSpeechChecker = (wordObjects) => {\n    try {\n      wordObjects.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType((prevState) => ({ ...prevState, noun: true }));\n            break;\n          case 'verb':\n            setAvailableWordType((prevState) => ({ ...prevState, verb: true }));\n            break;\n          case 'adjective':\n            setAvailableWordType((prevState) => ({ ...prevState, adjective: true }));\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const InitialWord = (wordObjects) => {\n    try {\n      MainLoop:\n      for (let index = 0; index < 4; index++) {\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'noun') {\n            WordArraySetState(WordArrayFilter(wordObjects, 'noun'));\n            setIsNounFound(true);\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'verb' && !isNounFound) {\n            WordArraySetState(WordArrayFilter(wordObjects, 'verb'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'adjective' && !isNounFound) {\n            WordArraySetState(WordArrayFilter(wordObjects, 'adjective'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl !== 'noun' && 'verb' && 'adjective' && !isNounFound) {\n            WordArraySetState(WordArrayFilter(wordObjects, element.fl));\n            break MainLoop;\n          }\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const PassRequstedWords = (wordObjects) => {\n    try {\n      if (wordObjects[0].hwi) {\n        setWordArray(wordObjects);\n        InitialWord(wordObjects);\n        PartOfSpeechChecker(wordObjects);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = (word = Word) => {\n    if (Word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(word)\n        .then((data) => PassRequstedWords(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const HandleSearchButtonClick = () => {\n    getWords();\n  };\n\n  const HandleBackButtonClick = (isSetword) => {\n    setWordsLoaded(false);\n    if (isSetword) {\n      setWord('');\n    }\n    setReturnedWord('');\n    setPartOfSpeech('');\n    setShortDef('');\n    setWordExample('');\n    setSyns([]);\n    setAnts([]);\n    setAvailableWordType({});\n  };\n\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType({});\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  const HandleTabClick = (type) => {\n    switch (type) {\n      case 'verb':\n        WordArraySetState(WordArrayFilter(WordArray, 'verb'));\n        break;\n      case 'noun':\n        WordArraySetState(WordArrayFilter(WordArray, 'noun'));\n        break;\n      case 'adjective':\n        WordArraySetState(WordArrayFilter(WordArray, 'adjective'));\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && isNounFound) {\n      setIsNounFound(false);\n    }\n  }, [PathName]);\n\n  const getPathName = (Path) => {\n    setPathName(Path);\n  };\n\n  const HandleEnterKey = (event) => {\n    if (event.which === 13) {\n      getWords();\n      history.push('/thesaurus');\n    }\n  };\n\n  const ThesaurusPageFunc = () => (\n    <ThesaurusPage\n      setWordsLoaded={setWordsLoaded}\n      HandleEnterKey={HandleEnterKey}\n      getInputValue={getInputValue}\n      getWords={getWords}\n      AvailableWordType={AvailableWordType}\n      HandleTabClick={HandleTabClick}\n      PathName={PathName}\n      Ants={Ants}\n      Syns={Syns}\n      WordsLoaded={WordsLoaded}\n      Word={Word}\n      Link={Link}\n      HandleBackButtonClick={HandleBackButtonClick}\n      ReturnedWord={ReturnedWord}\n      PartOfSpeech={PartOfSpeech}\n      ShortDef={ShortDef}\n      ReactHtmlParser={ReactHtmlParser}\n      WordExample={WordExample}\n      getPathName={getPathName}\n    />\n  );\n\n  const ThesaurusPageComponent = () => {\n    let ThesaurusPageCondition;\n    if (Word.length) {\n      if (ReturnedWord.length) {\n        ThesaurusPageCondition = (\n          <Presets.TransitionFade>\n            {ThesaurusPageFunc()}\n          </Presets.TransitionFade>\n        );\n      } else if (Error) {\n        ThesaurusPageCondition = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusPageCondition = (\n          <Presets.TransitionFade>\n            {ThesaurusPageFunc()}\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusPageCondition = <Redirect to=\"/\" />;\n    }\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusPageCondition;\n  };\n\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && ShortDef.length) {\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <>\n      {(PathName === '/thesaurus')\n        ? (\n          <PopUpSearchBar\n            isOpen2={isOpen2}\n            onOpen2={onOpen2}\n            onClose2={onClose2}\n            onToggle2={onToggle2}\n            HandleBackButtonClick={HandleBackButtonClick}\n            HandleEnterKey={HandleEnterKey}\n            getInputValue={getInputValue}\n            getWords={getWords}\n            setWordsLoaded={setWordsLoaded}\n          />\n        )\n        : <></>}\n      <NavBar\n        PathName={PathName}\n        isOpen2={isOpen2}\n        onOpen2={onOpen2}\n        onClose2={onClose2}\n        onToggle2={onToggle2}\n      />\n      <Routes\n        ThesaurusPageComponent={ThesaurusPageComponent}\n        WordFindType={WordFindType}\n        HandleEnterKey={HandleEnterKey}\n        WordFind={WordFind}\n        isOpen={isOpen}\n        getInputValue={getInputValue}\n        HandleSearchButtonClick={HandleSearchButtonClick}\n        Link={Link}\n        getPathName={getPathName}\n      />\n      {/* <Help /> */}\n    </>\n  );\n};\n\nexport default App;\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './containers/App';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Router basename=\"/wordsapiproject\">\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <App />\n      </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}