{"version":3,"sources":["components/RequestPage/Functions/getRequest/getRequest.js","components/RequestPage/SearchPage/SearchPage.js","components/ResponsePage/WordTypeContainer/WordTypeContainer.js","components/ResponsePage/ThesaurusHeader/ThesaurusHeader.js","components/ResponsePage/WordAndType/WordAndType.js","components/ResponsePage/SynAntHeader/SynAntHeader.js","components/ResponsePage/SynAntContainer/SynAntContainer.js","components/ResponsePage/Examples/Example.js","components/ResponsePage/Text/Text.js","components/ResponsePage/ThesaurusPage/ThesaurusPage.js","components/ResponsePage/Loading/Loading.js","components/NavBar/NavBar.js","App.js","index.js"],"names":["getRequest","word","a","fetch","Response","Data","json","MainContainer","tw","div","SearchPage","input","getInputValue","getButtonClick","Link","getPathName","location","useLocation","useEffect","pathname","fontFamily","fontStyle","fontSize","mt","mb","whiteSpace","display","md","justifyContent","variant","w","rounded","mr","onChange","placeholder","onClick","className","to","WordTypeContainer","styled","ThesaurusHeader","h1","WordAndType","TheWord","TheType","span","SynAntHeader","h2","SynAntContainer","Example","Text","ThesaurusPage","BackButtonClick","ReturnedWord","PartOfSpeech","ShortDef","ReactHtmlParser","WordExample","LoadingAndSvgContainer","Loading","NavBar","useColorMode","colorMode","toggleColorMode","m","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","height","width","xmlns","d","App","props","useState","Word","setWord","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","Error","setError","PathName","setPathName","sendRequstedWord","length","index","fl","hw","hwi","shortdef","WordExampleSlicedIt","def","sseq","dt","t","replace","RequestedThesaurus","setTimeout","alert","error","console","log","Path","basename","exact","path","event","target","value","then","response","theme","extendTheme","fonts","heading","body","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15ad63b7.chunk.js","sourcesContent":["export const getRequest = async (word) => {\n    const Response = await fetch(`https://dictionaryapi.com/api/v3/references/ithesaurus/json/${word}?key=c48ccf67-004d-4d61-bf2b-54e83578866c`)\n    const Data = Response.json()\n    return Data\n}","import tw from 'tailwind-styled-components';\nimport {useLocation} from 'react-router-dom';\nimport { useEffect } from 'react'\nimport { Heading, Input, useColorMode, Button, Box } from '@chakra-ui/react'\n\nexport const MainContainer = tw.div`\n   text-center\n   m-auto\n`\n\nexport const WordInput = tw.input`\n  rounded-full\n  px-10\n  text-center\n  outline-none\n  focus:ring-4 focus:ring-green-500\n  lg:mr-3\n`\nconst LinkCSS = `\nbg-gray-100\ntext-gray-800\npy-2\npx-4\nrounded-xl\nshadow-2xl\ninline-block\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-400\nhover:bg-gray-200\ntransition duration-200 ease-in-out\n`\nconst SearchPage = ({ getInputValue, getButtonClick, Link, getPathName }) => {\n  const location = useLocation()\n  useEffect(() => {\n    getPathName(location.pathname)\n  })\n\n    return (\n        <MainContainer>\n              <Heading fontFamily='Playfair Display' fontStyle='italic' fontSize={['2xl', '5xl', '6xl']} mt={['12', null, '32']} mb={['5', null, '12']} whiteSpace='nowrap' >Words to be thesaurused</Heading>\n              <Box display={{ md: \"flex\"}} justifyContent={[null, 'center', null]} >\n              <Box>\n                <Input variant='filled' w={['12rem', 'xs', null]} rounded='xl' mr={[null, null, '2rem']} onChange={getInputValue} placeholder=\"Type your word\"/>\n              </Box>\n              <Box mt={[5, 5, 0]} >\n                    <Link onClick={getButtonClick} className={LinkCSS}\n                        to='/thesaurus'>\n                      Search\n                    </Link>\n\n              </Box>\n              </Box>\n            </MainContainer>\n    )\n}\n\nexport default SearchPage;\n","import styled from 'styled-components'\n\nexport const WordTypeContainer = styled.div`\nborder-radius: 29px;\nbackground: linear-gradient(145deg, #ffffff, #e6e6e6);\nbox-shadow:  5px 5px 10px #ededed,\n             -5px -5px 10px #ffffff;\n \ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 5px;\nmargin: 3em;\nword-spacing: 0;\n`","import tw from 'tailwind-styled-components';\n\nexport const ThesaurusHeader = tw.h1`\n    text-blue-500   \n    italic\n    font-serif\n    text-3xl\n    font-bold\n    inline-block\n`\n","import tw from 'tailwind-styled-components';\n\nexport const WordAndType = tw.div`\n    mt-5\n`\n\nexport const TheWord = tw.h1`\n    text-5xl\n    text-gray-700\n    font-serif\n    font-bold\n    inline-block\n`\n\nexport const TheType = tw.span`\n    text-blue-500\n    text-xl\n    font-bold\n    font-serif\n`","import tw from 'tailwind-styled-components'\n\nexport const SynAntHeader = tw.h2`\n    text-blue-600\n    font-bold\n    text-2xl\n    mt-3\n`","import tw from 'tailwind-styled-components'\n\nexport const SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`","import tw from 'tailwind-styled-components'\n\nexport const Example = tw.span`\n    text-blue-500\n    text-xl\n    block\n`","import tw from 'tailwind-styled-components'\n\nexport const Text = tw.span`\n    text-gray-700\n    text-xl\n`","import { Fragment } from 'react';\nimport { WordTypeContainer } from '../WordTypeContainer/WordTypeContainer';\nimport { ThesaurusHeader } from '../ThesaurusHeader/ThesaurusHeader';\nimport { TheWord, WordAndType, TheType } from '../WordAndType/WordAndType';\nimport { SynAntHeader } from '../SynAntHeader/SynAntHeader';\nimport { SynAntContainer } from '../SynAntContainer/SynAntContainer';\nimport { Example } from '../Examples/Example';\nimport { Text } from '../Text/Text';\nimport {useLocation} from 'react-router-dom';\nimport { useEffect } from 'react'\n\nconst LinkCSS = `\nbg-gray-100\ntext-gray-800\npy-2\npx-4\nrounded-xl\nshadow-2xl\ninline-block\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-400\nhover:bg-gray-200\ntransition duration-200 ease-in-out\nm-4\n`\n\nexport const ThesaurusPage = (\n    {\n        Link,\n        BackButtonClick,\n        ReturnedWord,\n        PartOfSpeech,\n        ShortDef,\n        ReactHtmlParser,\n        WordExample,\n        getPathName\n}) => {\n  \n  const location = useLocation()\n  useEffect(() => {\n    getPathName(location.pathname)\n\n  })\n    return (\n            <Fragment>\n              <div className='absolute top-0' >\n              <Link onClick={BackButtonClick} className={LinkCSS} to='/'>\n                Back to search\n              </Link>\n              </div>\n            <WordTypeContainer>\n            <ThesaurusHeader>\n              Thesaurus\n            </ThesaurusHeader>\n            <WordAndType>\n              <TheWord>\n                {ReturnedWord}\n              </TheWord>\n              <TheType>\n                {PartOfSpeech}\n              </TheType>\n            </WordAndType>\n            <SynAntHeader>\n              Synonyms & Antonyms of <em>{ReturnedWord}</em>\n            </SynAntHeader>\n            <SynAntContainer>\n              <span className='font-bold text-gray-700 text-xl absolute left-0 top-0'>1</span>\n              <Text>{ShortDef}</Text>\n              <Example> <strong>//</strong> {ReactHtmlParser(WordExample)} </Example>\n            </SynAntContainer>\n            </WordTypeContainer>\n            </Fragment>\n    )\n}","import tw from 'tailwind-styled-components';\n\nexport const LoadingAndSvgContainer = tw.div`\n    flex\n    justify-center\n`\n\nexport const Loading  = tw.h1`\n    font-serif\n    font-bold\n    text-white\n    text-7xl\n    italic\n    inline\n    mt-14\n`\n","import { Box, Button, useColorMode } from '@chakra-ui/react';\n\nconst NavBar = () => {\n\n    const { colorMode, toggleColorMode } = useColorMode()\n    return (\n    <Box display='flex' justifyContent='flex-end' >\n    <Button m='4' rounded='full' onClick={toggleColorMode}>\n      {colorMode === \"light\" \n      ?\n      <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"m224.023438 448.03125c85.714843.902344 164.011718-48.488281 200.117187-126.230469-22.722656 9.914063-47.332031 14.769531-72.117187 14.230469-97.15625-.109375-175.890626-78.84375-176-176 .972656-65.71875 37.234374-125.832031 94.910156-157.351562-15.554688-1.980469-31.230469-2.867188-46.910156-2.648438-123.714844 0-224.0000005 100.289062-224.0000005 224 0 123.714844 100.2851565 224 224.0000005 224zm0 0\">\n      </path>\n      </svg> \n      :\n      <svg  stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M256,0C115.39,0,0,115.39,0,256s115.39,256,256,256s256-115.39,256-256S396.61,0,256,0z\">\n      </path>\n      </svg> \n      }\n    </Button>\n    </Box>\n    )\n}\n\nexport default NavBar;","import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link, \n  Redirect,\n} from 'react-router-dom'\nimport ReactHtmlParser from 'react-html-parser';\nimport { useState, useEffect } from 'react';\nimport { getRequest } from './components/RequestPage/Functions/getRequest/getRequest';\nimport SearchPage from './components/RequestPage/SearchPage/SearchPage';\nimport { ThesaurusPage } from './components/ResponsePage/ThesaurusPage/ThesaurusPage';\nimport { Loading, LoadingAndSvgContainer } from './components/ResponsePage/Loading/Loading';\nimport NavBar from './components/NavBar/NavBar';\n\nconst  App = (props) => {\n  const [ Word, setWord ] = useState('')\n  const [ ReturnedWord, setReturnedWord] = useState('')\n  const [ ShortDef, setShortDef ] = useState('')\n  const [ PartOfSpeech, setPartOfSpeech ] = useState('')\n  const [ WordExample, setWordExample ] = useState('')\n  const [ Error, setError ] = useState(false)\n  const [ PathName, setPathName ] = useState('')\n\n  const getInputValue = (event) => {\n    setWord(event.target.value)\n  }\n  \n  const getButtonClick = () => {\n    if (Word === '') {\n          alert('Type a word please')\n        } \n    getRequest(Word)\n    .then(response => sendRequstedWord(response))\n  }\n\n  const BackButtonClick = () => {\n    setWord('')\n    setReturnedWord('')\n    setPartOfSpeech('')\n    setShortDef('')\n    setWordExample('')\n  }\n\n  const RequestedThesaurus = (word, index) => {\n    const { fl, hwi: {hw},  shortdef , def: [{sseq: dt}] } = word[index]\n    const WordExample = dt[0][0][1].dt[1][1][0].t\n    const WordExampleSlicedIt = WordExample.replace('{it}', '<em>').replace('{/it}', '</em>')\n    setReturnedWord(hw)\n    setPartOfSpeech(fl)\n    setShortDef(shortdef[0])\n    setWordExample(WordExampleSlicedIt)\n  }\n\n  const sendRequstedWord = (word) => {\n    try {\n          if (word.length >= 1) {\n            RequestedThesaurus(word, 0)\n          } else if (!word[0]) {\n            setError(true)\n            setTimeout(() => {\n              alert('Word not found')\n            }, 500);\n          }\n    }\n    catch (error) {\n      console.log(error)\n    }\n  }\n\n  const HomeComponent = () => {\n    let HomeCondition;\n    if (Word.length) {\n        if (ReturnedWord.length) {\n            HomeCondition = <ThesaurusPage Word={Word} Link={Link} BackButtonClick={BackButtonClick} ReturnedWord={ReturnedWord} PartOfSpeech={PartOfSpeech} ShortDef={ShortDef}\n            ReactHtmlParser={ReactHtmlParser} WordExample={WordExample} getPathName={getPathName}/>\n        } else if (Error) {\n          HomeCondition = <Redirect to='/' />\n        } else {\n          HomeCondition = <LoadingAndSvgContainer>\n                            <Loading>Loading</Loading>\n                            <span className='text-9xl inline text-white font-serif' >.</span>\n                            <span className='text-9xl inline text-white font-serif' >.</span>\n                            <span className='text-9xl inline text-white font-serif' >.</span>\n                          </LoadingAndSvgContainer>\n        }\n  } else {\n    HomeCondition = <Redirect to='/' />\n  }\n    return HomeCondition\n  }\n\n  const getPathName = (Path) => {\n    setPathName(Path)\n  }\n\n  useEffect(() => {\n    if (PathName === '/' && ShortDef.length) {\n      BackButtonClick()\n    }\n  })\n\n\n  return (\n    <Router basename='/wordsapiproject' >\n    <NavBar/>\n      <Switch>\n          <Route exact path='/'>\n            <SearchPage getInputValue={getInputValue} getButtonClick={getButtonClick} Link={Link} getPathName={getPathName} />\n          </Route>\n          <Route exact path='/thesaurus'>\n          {HomeComponent()}\n          </Route>\n      </Switch>\n    </Router>\n)\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react'\n// import theme from './theme';\nimport {ColorModeScript} from '@chakra-ui/react'\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Playfair Display\",\n    body: \"Open Sans\",\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n    <ColorModeScript theme={theme} />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}