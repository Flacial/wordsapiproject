{"version":3,"sources":["components/search-input/search-input.component.jsx","pages/SearchPage/SearchPage.jsx"],"names":["connect","words","Word","AvailableWordType","dispatch","setWord","word","withRouter","getWords","history","focusBorderColorInput","useColorModeValue","useState","WordValueSP","setWordSP","inputField","useRef","HandleFocusOnInputEnterCtrlShift","event","key","ctrlKey","preventDefault","current","focus","useEffect","document","addEventListener","removeEventListener","ref","focusBorderColor","onKeyPress","which","push","variant","w","rounded","mr","value","onBlur","length","onChange","target","paddingY","placeholder","paddingLeft","MainContainer","tw","div","WordFindType","WordFind","isOpen","HandleSearchButtonClick","useMediaQuery","isMoreThan420px","fontColorDarkWhiteSmallWords","hover","color","fontColorMain","focusBorderColorGeneral","boxShadow","display","alignContent","justifyContent","mt","mb","fontFamily","fontSize","whiteSpace","placement","textDecoration","_hover","cursor","outline","outlineColor","style","outlineStyle","_focus","ml","size","icon","Info","h","background","fontWeight","sm","md","position","Search","left","top","in","transition","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","height","width","xmlns","d","span","bgColor","as","ReachLink","onClick","to","borderRadius"],"mappings":"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","file":"static/js/9.90043d3f.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport { Input, useColorModeValue } from '@chakra-ui/react';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setWord } from '../../redux/words/words.action';\n\nconst SearchInput = ({\n  // eslint-disable-next-line no-shadow\n  setWord, getWords, history,\n}) => {\n  const focusBorderColorInput = useColorModeValue('#3B82F6',\n    '#ffa500');\n  const [WordValueSP, setWordSP] = useState('');\n  const inputField = useRef(null);\n\n  const HandleFocusOnInputEnterCtrlShift = (event) => {\n    if (event.key === 'A' && event.ctrlKey) {\n      event.preventDefault();\n      inputField.current.focus();\n    }\n  };\n\n  const onBlur = () => {\n    if (WordValueSP.length) {\n      setWord(WordValueSP);\n    }\n  };\n\n  const HandleEnterKey = (event) => {\n    if (event.which === 13) {\n      setWord(WordValueSP);\n      getWords(WordValueSP);\n      history.push('/thesaurus');\n    }\n  };\n\n  const onInputChange = (event) => {\n    setWordSP(event.target.value);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    return () => {\n      document.removeEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    };\n  });\n\n  return (\n    <Input ref={inputField} focusBorderColor={focusBorderColorInput} onKeyPress={HandleEnterKey} variant=\"filled\" w={['18rem', 'xs', null]} rounded=\"xl\" mr={[null, null, '2rem']} value={WordValueSP} onBlur={onBlur} onChange={onInputChange} paddingY=\"5\" placeholder=\"Search for words\" paddingLeft=\"9\" />\n  );\n};\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  AvailableWordType: words.AvailableWordType,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setWord: (word) => dispatch(setWord(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SearchInput));\n","/* eslint-disable max-len */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport { withRouter, Link as ReachLink } from 'react-router-dom';\nimport React from 'react';\nimport {\n  Heading,\n  Box,\n  chakra,\n  Fade,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  useMediaQuery,\n  Button,\n} from '@chakra-ui/react';\nimport { InfoIcon, SearchIcon } from '@chakra-ui/icons';\nimport { connect } from 'react-redux';\nimport SearchInput from '../../components/search-input/search-input.component';\n\nconst MainContainer = tw.div`\n   text-center\n   mt-24\n   md2:mt-38\n   lg:mt-32\n`;\n\nconst SearchPage = ({\n  WordFindType, WordFind, isOpen, HandleSearchButtonClick, getWords,\n}) => {\n  const [isMoreThan420px] = useMediaQuery('(max-width: 420px)');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n    <MainContainer>\n      <Box display=\"flex\" alignContent=\"center\" justifyContent=\"center\" mt={['12', null, '15', '0', '32']} mb={['5', null, '12']}>\n        <Heading fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">\n          Words to be\n          {(isMoreThan420px) ? '\\u00A0' : ' thesaurused'}\n        </Heading>\n        <Popover placement=\"auto-end\" display=\"inline-block\">\n          <PopoverTrigger>\n            {(isMoreThan420px)\n              ? <Heading textDecoration={`underline wavy ${fontColorDarkWhiteSmallWords}`} _hover={[null, null, hover]} cursor=\"pointer\" fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">thesaurused</Heading>\n              : <IconButton variant=\"ghost\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} ml=\"2\" size=\"sm\" icon={<InfoIcon w=\"5\" h=\"5\" />} />}\n          </PopoverTrigger>\n          <PopoverContent outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Thesaurus</PopoverHeader>\n            <PopoverBody>\n              A thesaurus (plural thesauri or thesauruses) or synonym dictionary\n              is a reference work for finding synonyms and sometimes antonyms of words.\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      </Box>\n      <Box display={{ sm: 'flex', md: 'flex' }} justifyContent={[null, 'center', null]}>\n        <Box>\n          <Box justifyContent=\"center\" display=\"flex\" w={['100%', 'xs', null]}>\n            <Box w={['18rem', 'xs', null]} position=\"relative\">\n              <SearchInput getWords={getWords} />\n              <SearchIcon color=\"gray.300\" position=\"absolute\" left=\"3\" top=\"3.5\" />\n            </Box>\n          </Box>\n          {WordFind\n                && (\n                <Fade in={isOpen}>\n                  <Box mt=\"1\" display=\"flex\" justifyContent={['center', 'flex-start', null]} transition=\"ease\">\n                    <chakra.svg mt=\"1\" ml={[null, '4', null]} outline=\"none\" stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\" />\n                    </chakra.svg>\n                    <chakra.span ml=\"1\" mb={['-1', 0, 0]} color=\"red.400\">\n                      {(WordFindType === 'no response' ? 'Word not found! (Misspelled)' : ((WordFindType === 'no input') ? 'Input is empty, type a word!' : 'The word is not in the thesaurus!'))}\n                    </chakra.span>\n                  </Box>\n                </Fade>\n                )}\n        </Box>\n\n        {\n          !isMoreThan420px && (\n            <Box ml={[0, 6, null]} mt={[5, 1, 0]}>\n              <Button\n                _hover={{ background: 'gray.200' }}\n                _focus={focusBorderColorGeneral}\n                color=\"gray.800\"\n                bgColor=\"gray.100\"\n                as={ReachLink}\n                onClick={HandleSearchButtonClick}\n                to=\"/thesaurus\"\n                borderRadius=\"xl\"\n              >\n                Search\n              </Button>\n            </Box>\n          )\n        }\n      </Box>\n    </MainContainer>\n  );\n};\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(SearchPage));\n"],"sourceRoot":""}