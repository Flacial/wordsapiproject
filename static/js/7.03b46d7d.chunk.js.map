{"version":3,"sources":["pages/ThesaurusPage/ThesaurusPage.jsx"],"names":["WordsTabs","lazy","withRouter","props","Link","HandleBackButtonClick","WordsLoaded","AvailableWordType","getWords","history","location","LinkChak","chakra","bg","useColorModeValue","color","hover","background","focusBorderColorGeneral","boxShadow","fallbackBackground","HandleKeyDownBackButtonQctrl","event","key","ctrlKey","push","useEffect","document","addEventListener","removeEventListener","window","scrollTo","top","behavior","zIndex","className","left","_focus","_hover","onClick","to","pathname","CSS","supports","position","h","w","borderRadius","TransitionFade","fallback"],"mappings":"gGAAA,mEAeMA,EAAYC,gBAAK,kBAAM,uDA4FdC,uBA9EO,SAACC,GAAW,IAE9BC,EAOED,EAPFC,KACAC,EAMEF,EANFE,sBACAC,EAKEH,EALFG,YACAC,EAIEJ,EAJFI,kBACAC,EAGEL,EAHFK,SACAC,EAEEN,EAFFM,QACAC,EACEP,EADFO,SAEIC,EAAWC,YAAOR,GAClBS,EAAKC,YAAkB,UAAW,6BAClCC,EAAQD,YAAkB,UAAW,WACrCE,EAAQF,YAAkB,CAAEG,WAAY,YAAc,CAAEA,WAAY,aACpEC,EAA0BJ,YAAkB,CAAEK,UAAW,qBAAuB,CAAEA,UAAW,qBAC7FC,EAAqBN,YAAkB,0BAA2B,uBAElEO,EAA+B,SAACC,GAClB,MAAdA,EAAMC,KAAeD,EAAME,UAC7BnB,IACAI,EAAQgB,KAAK,OAkBjB,OAdAC,qBAAU,WAER,OADAC,SAASC,iBAAiB,UAAWP,GAC9B,WACLM,SAASE,oBAAoB,UAAWR,MAEzC,IAEHK,qBAAU,WACRI,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,aAEX,IAGD,qCACG3B,EAEG,cAAC,IAAD,CAAK4B,OAAO,OAAOC,UAAU,cAAcC,KAAM,CAAC,KAAM,KAAM,MAA9D,SACE,cAACzB,EAAD,CAAU0B,OAAQnB,EAAyBL,GAAIA,EAAIE,MAAOA,EAAOuB,OAAQtB,EAAOuB,QAASlC,EAAuB8B,UAxD/G,wLAwDmIK,GAAG,IAAvI,8BAKF,6BACoB,eAAtB9B,EAAS+B,SAEP,cAAC,IAAD,CACExB,YAAcyB,IAAIC,SAAS,kBAAmB,cAAiBvB,EAC/De,UAAU,gBACVD,OAAO,OACPU,SAAS,QACTZ,IAAI,IACJa,EAAE,OACFC,EAAE,OACFC,aAAa,kBAGf,KAEJ,cAAC,IAAQC,eAAT,UACE,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAACjD,EAAD,CACEO,kBAAmBA,EACnBD,YAAaA,EACbE,SAAUA,EACVH,sBAAuBA","file":"static/js/7.03b46d7d.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport {\n  useEffect, React, lazy, Suspense,\n} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\n// import WordsTabs from '../../components/tabs/tabs.component';\nconst WordsTabs = lazy(() => import('../../components/tabs/tabs.component'));\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (props) => {\n  const {\n    Link,\n    HandleBackButtonClick,\n    WordsLoaded,\n    AvailableWordType,\n    getWords,\n    history,\n    location,\n  } = props;\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const hover = useColorModeValue({ background: 'gray.200' }, { background: 'gray.700' });\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const fallbackBackground = useColorModeValue('rgba(255, 255, 255, .9)', 'rgba(0, 0, 0, 0.26)');\n\n  const HandleKeyDownBackButtonQctrl = (event) => {\n    if (event.key === 'Q' && event.ctrlKey) {\n      HandleBackButtonClick();\n      history.push('/');\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  return (\n    <>\n      {WordsLoaded\n        ? (\n          <Box zIndex=\"9991\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={focusBorderColorGeneral} bg={bg} color={color} _hover={hover} onClick={HandleBackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      {(location.pathname === '/thesaurus')\n        ? (\n          <Box\n            background={!(CSS.supports('backdrop-filter', 'blur(5px)')) && fallbackBackground}\n            className=\"backdrop-blur\"\n            zIndex=\"9990\"\n            position=\"fixed\"\n            top=\"0\"\n            h=\"70px\"\n            w=\"full\"\n            borderRadius=\"0 0 20px 20px\"\n          />\n        )\n        : null}\n\n      <Presets.TransitionFade>\n        <Suspense fallback={null}>\n          <WordsTabs\n            AvailableWordType={AvailableWordType}\n            WordsLoaded={WordsLoaded}\n            getWords={getWords}\n            HandleBackButtonClick={HandleBackButtonClick}\n          />\n        </Suspense>\n      </Presets.TransitionFade>\n    </>\n  );\n};\n\nexport default withRouter(ThesaurusPage);\n"],"sourceRoot":""}