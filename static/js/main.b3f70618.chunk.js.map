{"version":3,"sources":["services/getRequest.js","components/ResponsePage/ThesaurusPage/ThesaurusPage.jsx","components/RequestPage/SearchPage/SearchPage.jsx","Routes/Routes.jsx","containers/App.jsx","components/NavBar/NavBar.jsx","theme.js","index.jsx"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","ThesaurusHeader","tw","h1","ChakraThesaurusHeader","chakra","WordTypeContainer","styled","div","ChakraWordTypeContainer","WordAndType","TheWord","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","ThesaurusPage","Link","BackButtonClick","ReturnedWord","PartOfSpeech","ShortDef","ReactHtmlParser","WordExample","getPathName","WordsLoaded","Syns","Ants","onTabClick","AvailableWordType","turnWordInToList","MainObj","ReturnedObj","undefined","map","index","listStyleType","display","location","useLocation","useEffect","pathname","LinkChak","bg","useColorModeValue","color","fontColorMain","fontColorHeaders","fontColorDarkWhiteSmallWords","fontColorSynAnt","hover","background","gradientbg","boxShadow","SkeletonStartColor","SkeletonEndColor","focusBorderColorGeneral","isLargerthan440","useMediaQuery","Tabshover","TheWholeThesaurus","bgGradient","m","ml","mr","marginTop","TransitionFade","slice","mb","mt","fontSize","fontFamily","fontStyle","w","noOfLines","spacing","startColor","endColor","length","zIndex","className","left","_focus","_hover","onClick","to","align","variant","noun","Object","keys","_selected","outline","outlineColor","style","outlineStyle","verb","adjective","MainContainer","SearchPage","WordFindType","onEnterKeyPress","WordFind","isOpen","getInputValue","getButtonClick","isMoreThan420px","focusBorderColorInput","alignContent","justifyContent","whiteSpace","placement","textDecoration","cursor","size","icon","Question","h","fontWeight","sm","md","focusBorderColor","onKeyPress","rounded","onChange","placeholder","in","transition","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","height","width","xmlns","d","bgColor","Routes","ThesaurusPageComponent","props","exact","path","key","App","useState","Word","setWord","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","Error","setError","PathName","setPathName","useDisclosure","onOpen","setWordFind","setWordFindType","setWordsLoaded","setSyns","setAnts","WordArray","setWordArray","setAvailableWordType","isNounFound","setIsNounFound","history","useHistory","WordArrayFilter","type","filter","arr","fl","WordArraySetState","wordArray","hw","hwi","shortdef","dt","def","sseq","syns","meta","ants","WordExampleSlicedIt","t","replace","sendRequstedWord","forEach","prevState","MainLoop","element","error","RequestedThesaurus","getWords","then","data","Path","ThesaurusPageCondition","event","which","push","target","value","NavBar","useColorMode","colorMode","toggleColorMode","position","top","borderRadius","Moon","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.b3f70618.chunk.js","sourcesContent":["/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://wordsapiprojectserver.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport { Fragment, useEffect, React } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport tw from 'tailwind-styled-components';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n  SkeletonText,\n  Heading,\n  ListItem,\n  UnorderedList,\n  useMediaQuery,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n} from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\n\nconst ThesaurusHeader = tw.h1`\n    italic\n    font-serif\n    text-3xl\n    font-bold\n    inline-block\n`;\nconst ChakraThesaurusHeader = chakra(ThesaurusHeader);\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 15px;\npadding-bottom: 20px;\nword-spacing: 0;\n`;\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer);\n\nconst WordAndType = tw.div`\n    mt-1\n`;\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`;\n\nconst ChakraTheWord = chakra(TheWord);\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`;\n\nconst ChakraTheType = chakra(TheType);\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`;\n\nconst ChakraSynAntHeader = chakra(SynAntHeader);\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`;\n\nconst Example = tw.span`\n    text-xl\n    block\n`;\n\nconst ChakraExample = chakra(Example);\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`;\n\nconst ChakraText = chakra(Text);\n\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (\n  {\n    Link,\n    BackButtonClick,\n    ReturnedWord,\n    PartOfSpeech,\n    ShortDef,\n    ReactHtmlParser,\n    WordExample,\n    getPathName,\n    WordsLoaded,\n    Syns,\n    Ants,\n    onTabClick,\n    AvailableWordType,\n  },\n) => {\n  const turnWordInToList = (MainObj) => {\n    let ReturnedObj = [];\n    if (MainObj !== undefined) {\n      ReturnedObj = MainObj.map((word, index) => {\n        if (MainObj[index + 1] === undefined) {\n          return <ListItem listStyleType=\"none\" display=\"inline-block\" key={word}>{`${word}`}</ListItem>;\n        }\n        return <ListItem listStyleType=\"none\" display=\"inline-block\" key={word}>{`${word},\\u00A0`}</ListItem>;\n      });\n    }\n    return ReturnedObj;\n  };\n\n  // Change synonyms and antonyms words to list items\n  const OrderSynonyms = () => turnWordInToList(Syns);\n  const OrderAntonyms = () => turnWordInToList(Ants);\n\n  const location = useLocation();\n  useEffect(() => {\n    getPathName(location.pathname);\n  });\n\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7');\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300');\n  const hover = useColorModeValue({ background: 'gray.200' }, { background: 'gray.700' });\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)');\n  const boxShadow = useColorModeValue('0px 0px 25px #a1a1a1, -10px -10px 0px #3B82F6', '0px 0px 11px #1c1c1c, -10px -10px 0px orange');\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200');\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const isLargerthan440 = useMediaQuery('(max-width: 440px)');\n  const Tabshover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n\n  const TheWholeThesaurus = () => (\n    <ChakraWordTypeContainer boxShadow={boxShadow} bgGradient={gradientbg} m={(isLargerthan440) && '5'} ml={['0', '9em', null]} mr={['0', '9em', null]} marginTop={['3', null, null]}>\n      <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n        Thesaurus\n      </ChakraThesaurusHeader>\n      {(WordsLoaded)\n        ? (\n          <Presets.TransitionFade>\n            <WordAndType>\n              <Presets.TransitionFade>\n                <ChakraTheWord color={fontColorMain}>\n                  {ReturnedWord}\n                </ChakraTheWord>\n              </Presets.TransitionFade>\n              <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n                {PartOfSpeech}\n              </ChakraTheType>\n            </WordAndType>\n            <ChakraSynAntHeader color={fontColorHeaders}>\n              Synonyms & Antonyms of\n              {' '}\n              <em>{ReturnedWord}</em>\n            </ChakraSynAntHeader>\n            <SynAntContainer>\n              <ChakraText color={fontColorMain}>\n                {ShortDef}\n              </ChakraText>\n              {(ShortDef.slice(0, 5) === WordExample.slice(0, 5))\n                ? <></>\n                : (\n                  <ChakraExample color={fontColorSynAnt}>\n                    {' '}\n                    <strong>//</strong>\n                    {' '}\n                    {ReactHtmlParser(WordExample)}\n                  </ChakraExample>\n                )}\n              <Heading mb=\"1\" mt=\"2\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                Synonyms for\n                <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n              </Heading>\n              <Box w={['100%', '70%', null]}>\n                <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n              </Box>\n              {(Ants !== undefined)\n                ? (\n                  <div>\n                    <Heading mb=\"1\" mt=\"4\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                      Antonyms for\n                      <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n                    </Heading>\n                    <Box w={['100%', '70%', null]}>\n                      <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n                    </Box>\n                  </div>\n                )\n                : <></>}\n            </SynAntContainer>\n          </Presets.TransitionFade>\n        )\n        : (\n          <Presets.TransitionFade>\n            <SkeletonText mt=\"4\" mb=\"3\" noOfLines={11} spacing=\"4\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n          </Presets.TransitionFade>\n        )}\n    </ChakraWordTypeContainer>\n  );\n\n  return (\n    <>\n      {ReturnedWord.length\n        ? (\n          <Box zIndex=\"sticky\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={focusBorderColorGeneral} bg={bg} color={color} _hover={hover} onClick={BackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      <Tabs align=\"center\" variant=\"soft-rounded\">\n        {/* <Box className='backdrop-blur z-50' display='flex'\n         justifyContent='center' h='22' width='full'  position='fixed' bottom='0'> */}\n        <TabList marginTop=\"1\">\n          {(AvailableWordType.noun) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n            : <Tab onClick={() => onTabClick('noun')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Noun</Tab>\n          )\n            : <></>}\n          {(AvailableWordType.verb) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n            : <Tab onClick={() => onTabClick('verb')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Verb</Tab>\n          )\n            : <></>}\n          {(AvailableWordType.adjective) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n            : <Tab onClick={() => onTabClick('adjective')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adjective</Tab>\n          )\n            : <></>}\n        </TabList>\n        {/* </Box> */}\n        <TabPanels>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n};\n\nexport default ThesaurusPage;\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, React } from 'react';\nimport {\n  Heading,\n  Input,\n  Box,\n  chakra,\n  Fade,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  useMediaQuery,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst MainContainer = tw.div`\n   text-center\n   mt-40\n   sm:mt-0\n   md2:mt-38\n   lg:mt-32\n`;\n\nconst LinkCSS = `\npy-1\npx-3\nrounded-xl\nshadow-2xl\ninline-block\nmd:py-1\nmd:h-8\nmd:mt-1\nmd:px-4\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-400\nhover:bg-gray-200\ntransition duration-200 ease-in-out\n`;\n\nconst SearchPage = ({\n  WordFindType, onEnterKeyPress, WordFind, isOpen,\n  getInputValue, getButtonClick, Link, getPathName,\n}) => {\n  const [isMoreThan420px] = useMediaQuery('(max-width: 420px)');\n  const location = useLocation();\n  const LinkChak = chakra(Link);\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  useEffect(() => {\n    getPathName(location.pathname);\n  });\n\n  return (\n    <MainContainer>\n      <Box display=\"flex\" alignContent=\"center\" justifyContent=\"center\" mt={['12', null, '15', '0', '32']} mb={['5', null, '12']}>\n        <Heading fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">\n          Words to be\n          {(isMoreThan420px) ? '\\u00A0' : ' thesaurused'}\n        </Heading>\n        <Popover placement=\"auto-end\" display=\"inline-block\">\n          <PopoverTrigger>\n            {(isMoreThan420px)\n              ? <Heading textDecoration={`underline wavy ${fontColorDarkWhiteSmallWords}`} _hover={[null, null, hover]} cursor=\"pointer\" fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">thesaurused</Heading>\n              : <IconButton variant=\"ghost\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} ml=\"2\" size=\"sm\" icon={<QuestionIcon w=\"5\" h=\"5\" />} />}\n          </PopoverTrigger>\n          <PopoverContent outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Thesaurus</PopoverHeader>\n            <PopoverBody>\n              A thesaurus (plural thesauri or thesauruses) or synonym dictionary\n              is a reference work for finding synonyms and sometimes antonyms of words.\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      </Box>\n      <Box display={{ sm: 'flex', md: 'flex' }} justifyContent={[null, 'center', null]}>\n        <Box>\n          <Input focusBorderColor={focusBorderColorInput} onKeyPress={onEnterKeyPress} variant=\"filled\" w={['16rem', 'xs', null]} rounded=\"xl\" mr={[null, null, '2rem']} onChange={getInputValue} placeholder=\"Type your word\" />\n          {WordFind\n                && (\n                <Fade in={isOpen}>\n                  <Box mt=\"1\" display=\"flex\" justifyContent={['center', 'flex-start', null]} transition=\"ease\">\n                    <chakra.svg mt=\"1\" ml={[null, '4', null]} outline=\"none\" stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\" />\n                    </chakra.svg>\n                    <chakra.span ml=\"1\" mb={['-1', 0, 0]} color=\"red.400\">\n                      {(WordFindType === 'no response' ? 'Word not found! (Misspelled)' : ((WordFindType === 'no input') ? 'Input is empty, type a word!' : 'The word is not in the thesaurus!'))}\n                    </chakra.span>\n                  </Box>\n                </Fade>\n                )}\n        </Box>\n        <Box ml={[0, 5, 0]} mt={[5, 1, 0]}>\n          <LinkChak\n            _hover={{ background: 'gray.200' }}\n            _focus={focusBorderColorGeneral}\n            color={\n                  (isMoreThan420px)\n                    ? fontColorMain\n                    : 'gray.800'\n                }\n            bgColor={\n                  (isMoreThan420px)\n                    ? fontColorDarkWhiteSmallWords\n                    : 'gray.100'\n                  }\n            fontWeight=\"semibold\"\n            onClick={getButtonClick}\n            className={LinkCSS}\n            to=\"/thesaurus\"\n          >\n            Search\n          </LinkChak>\n        </Box>\n      </Box>\n    </MainContainer>\n  );\n};\n\nexport default SearchPage;\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\nimport React from 'react';\nimport { Presets } from 'react-component-transition';\nimport SearchPage from '../components/RequestPage/SearchPage/SearchPage';\n\nfunction Routes({ ThesaurusPageComponent, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <SearchPage {...props} />\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {ThesaurusPageComponent()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n  useHistory,\n} from 'react-router-dom';\nimport ReactHtmlParser from 'react-html-parser';\nimport {\n  useState,\n  useEffect,\n  React,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\nimport ThesaurusPage from '../components/ResponsePage/ThesaurusPage/ThesaurusPage';\nimport Routes from '../Routes/Routes';\n\nconst App = () => {\n  const [Word, setWord] = useState('');\n  const [ReturnedWord, setReturnedWord] = useState('');\n  const [ShortDef, setShortDef] = useState('');\n  const [PartOfSpeech, setPartOfSpeech] = useState('');\n  const [WordExample, setWordExample] = useState('');\n  const [Error, setError] = useState(false);\n  const [PathName, setPathName] = useState('');\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [Syns, setSyns] = useState([]);\n  const [Ants, setAnts] = useState([]);\n  const [WordArray, setWordArray] = useState([]);\n  const [AvailableWordType, setAvailableWordType] = useState({});\n  const [isNounFound, setIsNounFound] = useState(false);\n\n  // Used as a condition to render the values or skeleton in ThesaurusPage\n  useEffect(() => {\n    if (PathName === '/thesaurus' && !ShortDef.length) {\n      setWordsLoaded(false);\n    } else if (PathName === '/thesaurus' && ShortDef.length) {\n      setWordsLoaded(true);\n    }\n  });\n  const history = useHistory();\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  const WordArrayFilter = (word, type) => {\n    const filteredArray = word.filter((arr) => arr.fl === type);\n    return filteredArray[0];\n  };\n\n  const WordArraySetState = (wordArray) => {\n    const {\n      fl,\n      hwi: {\n        hw,\n      },\n      shortdef,\n      def: [{\n        sseq: dt,\n      }],\n      meta: {\n        syns,\n      },\n      meta: {\n        ants,\n      },\n    } = wordArray;\n    const WordExampleForState = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n    const WordExampleSlicedIt = WordExampleForState.replace('{it}', '<em>').replace('{/it}', '</em>');\n    setAnts(ants[0]);\n    setSyns(syns[0]);\n    setReturnedWord(hw);\n    setPartOfSpeech(fl);\n    setShortDef(shortdef[0]);\n    setWordExample(WordExampleSlicedIt);\n  };\n\n  const RequestedThesaurus = (word) => {\n    try {\n      setWordArray(word);\n      word.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType((prevState) => ({ ...prevState, noun: true }));\n            break;\n          case 'verb':\n            setAvailableWordType((prevState) => ({ ...prevState, verb: true }));\n            break;\n          case 'adjective':\n            setAvailableWordType((prevState) => ({ ...prevState, adjective: true }));\n            break;\n          default:\n            break;\n        }\n      });\n      MainLoop:\n      for (let index = 0; index < 4; index++) {\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < word.length; index++) {\n          const element = word[index];\n          if (element.fl === 'noun') {\n            WordArraySetState(WordArrayFilter(word, 'noun'));\n            setIsNounFound(true);\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < word.length; index++) {\n          const element = word[index];\n          if (element.fl === 'verb' && !isNounFound) {\n            WordArraySetState(WordArrayFilter(word, 'verb'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < word.length; index++) {\n          const element = word[index];\n          if (element.fl === 'adjective' && !isNounFound) {\n            WordArraySetState(WordArrayFilter(word, 'adjective'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < word.length; index++) {\n          const element = word[index];\n          if (element.fl !== 'noun' && 'verb' && 'adjective' && !isNounFound) {\n            WordArraySetState(WordArrayFilter(word, element.fl));\n            break MainLoop;\n          }\n        }\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  };\n\n  const sendRequstedWord = (word) => {\n    try {\n      if (word[0].hwi) {\n        RequestedThesaurus(word);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = () => {\n    if (Word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(Word)\n        .then((data) => sendRequstedWord(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const getButtonClick = () => {\n    getWords();\n  };\n\n  const BackButtonClick = () => {\n    setWord('');\n    setReturnedWord('');\n    setPartOfSpeech('');\n    setShortDef('');\n    setWordExample('');\n    setSyns([]);\n    setAnts([]);\n    setWordsLoaded(false);\n  };\n\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType({});\n      BackButtonClick();\n    }\n  }, [PathName]);\n\n  const onTabClick = (type) => {\n    switch (type) {\n      case 'verb':\n        WordArraySetState(WordArrayFilter(WordArray, 'verb'));\n        break;\n      case 'noun':\n        WordArraySetState(WordArrayFilter(WordArray, 'noun'));\n        break;\n      case 'adjective':\n        WordArraySetState(WordArrayFilter(WordArray, 'adjective'));\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && isNounFound) {\n      setIsNounFound(false);\n    }\n  }, [PathName]);\n\n  const getPathName = (Path) => {\n    setPathName(Path);\n  };\n\n  const ThesaurusPageComponent = () => {\n    let ThesaurusPageCondition;\n    if (Word.length) {\n      if (ReturnedWord.length) {\n        ThesaurusPageCondition = (\n          <Presets.TransitionFade>\n            <ThesaurusPage\n              AvailableWordType={AvailableWordType}\n              onTabClick={onTabClick}\n              PathName={PathName}\n              Ants={Ants}\n              Syns={Syns}\n              WordsLoaded={WordsLoaded}\n              Word={Word}\n              Link={Link}\n              BackButtonClick={BackButtonClick}\n              ReturnedWord={ReturnedWord}\n              PartOfSpeech={PartOfSpeech}\n              ShortDef={ShortDef}\n              ReactHtmlParser={ReactHtmlParser}\n              WordExample={WordExample}\n              getPathName={getPathName}\n            />\n          </Presets.TransitionFade>\n        );\n      } else if (Error) {\n        ThesaurusPageCondition = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusPageCondition = (\n          <Presets.TransitionFade>\n            <ThesaurusPage\n              AvailableWordType={AvailableWordType}\n              onTabClick={onTabClick}\n              PathName={PathName}\n              Ants={Ants}\n              Syns={Syns}\n              WordsLoaded={WordsLoaded}\n              Word={Word}\n              Link={Link}\n              BackButtonClick={BackButtonClick}\n              ReturnedWord={ReturnedWord}\n              PartOfSpeech={PartOfSpeech}\n              ShortDef={ShortDef}\n              ReactHtmlParser={ReactHtmlParser}\n              WordExample={WordExample}\n              getPathName={getPathName}\n            />\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusPageCondition = <Redirect to=\"/\" />;\n    }\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusPageCondition;\n  };\n\n  const onEnterKeyPress = (event) => {\n    if (event.which === 13) {\n      getWords();\n      history.push('/thesaurus');\n    }\n  };\n\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && ShortDef.length) {\n      BackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <Routes\n      ThesaurusPageComponent={ThesaurusPageComponent}\n      WordFindType={WordFindType}\n      onEnterKeyPress={onEnterKeyPress}\n      WordFind={WordFind}\n      isOpen={isOpen}\n      getInputValue={getInputValue}\n      getButtonClick={getButtonClick}\n      Link={Link}\n      getPathName={getPathName}\n    />\n  );\n};\n\nexport default App;\n","import {\n  chakra, Box, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\nimport React from 'react';\n\nconst NavBar = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n\n    <Box className=\"backdrop-blur\" zIndex=\"sticky\" display=\"flex\" position=\"sticky\" top=\"0\" justifyContent=\"flex-end\" h=\"70px\" w=\"full\" borderRadius=\"0 0 20px 20px\">\n      <Button _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr={[null, '40', null]} rounded=\"xl\" onClick={toggleColorMode}>\n        {colorMode === 'light'\n          ? <MoonIcon />\n          : (\n            <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n            </chakra.svg>\n          )}\n      </Button>\n    </Box>\n  );\n};\n\nexport default NavBar;\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './containers/App';\nimport NavBar from './components/NavBar/NavBar';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Router basename=\"/wordsapiproject\">\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <NavBar />\n        <App />\n      </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}