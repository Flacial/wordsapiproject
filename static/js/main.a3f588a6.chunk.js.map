{"version":3,"sources":["services/getRequest.js","components/loading-skeleton/loading-skeleton.component.jsx","components/words-container/words.container.component.jsx","components/words-container-content/words-container-content.jsx","components/error-boundary/error-boundary.component.jsx","components/tabs/tabs.component.jsx","pages/ThesaurusPage/ThesaurusPage.jsx","routes/routes.jsx","components/help-button/help-button.component.jsx","components/theme-button/theme-button.component.jsx","components/header/header.component.jsx","containers/App.jsx","redux/words/words.reducer.js","redux/root-reducer.js","redux/store.js","theme.js","index.jsx","redux/words/words.action.js","redux/words/words.types.js"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","LoadingSkeleton","SkeletonStartColor","useColorModeValue","SkeletonEndColor","TransitionFade","height","mt","mb","startColor","endColor","w","WordTypeContainer","styled","div","ChakraWordTypeContainer","chakra","WordsContainer","props","children","ml","mr","marginTop","boxShadow","gradientbg","isLargerthan440","bgGradient","WordAndType","tw","TheWord","h1","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","connect","words","Word","ReturnedWord","ShortDef","PartOfSpeech","WordExample","Syns","Ants","WordArray","withRouter","getWords","HandleBackButtonClick","history","WordsArray","fl","hw","hwi","shortdef","dt","def","sseq","syns","meta","ants","ExampleModified","t","replace","fontColorMain","fontColorHeaders","fontColorSynAnt","fontColorDarkWhiteSmallWords","hoverSynAntItems","textDecoration","onClickWords","event","target","textContent","push","turnWordInToList","MainObj","ReturnedObj","undefined","map","index","_hover","className","onClick","listStyleType","display","ThesaurusHeader","ChakraThesaurusHeader","color","slice","ReactHtmlParser","fontSize","fontFamily","fontStyle","ErrorBoundary","state","hasError","error","info","console","log","this","style","fontWeight","href","React","Component","WordsTabs","AvailableWordType","WordsLoaded","NounArray","VerbArray","AdjArray","PhraseArray","AdverbArray","Tabshover","bg","focusBorderColorGeneral","NounTabButton","useRef","VerbTabButton","AdjectiveTabButton","PhraseTabButton","AdverbTabButton","TabListElement","InitialWordArray","Object","keys","length","TheWholeThesaurus","defaultIndex","align","variant","ref","flexWrap","noun","_selected","_focus","outline","outlineColor","outlineStyle","verb","adjective","phrase","adverb","dispatch","setAvailableWordType","memo","Link","location","LinkChak","hover","background","fallbackBackground","HandleKeyDownBackButtonQctrl","key","ctrlKey","useEffect","document","addEventListener","removeEventListener","window","scrollTo","top","behavior","zIndex","left","to","pathname","CSS","supports","position","h","borderRadius","SearchPage","lazy","Routes","Thesaurus","useLocation","exact","path","fallback","Help","focusBorderColorInput","KeyboardShortCutsColor","placement","focusBorderColor","m","rounded","Question","width","ThemeButton","useColorMode","colorMode","toggleColorMode","ThemeButtonRef","HandleKeyDownThemeIcon","preventDefault","current","click","Moon","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","xmlns","d","SearchButtonHeader","InputFiledSearchBarPopUp","justifyContent","PopUpSearchBar","setWord","setWordArray","setNounArray","setVerbArray","setAdjArray","setPhraseArray","setAdverbArray","resetAvailableWordType","useState","Error","setError","PathName","useDisclosure","isOpen","onOpen","WordFind","setWordFind","WordFindType","setWordFindType","setWordsLoaded","IsInitialDone","setInitialDone","wordObjects","filteredArray","filter","setFilterArray","PassRequstedWords","forEach","arr","type","value","PartOfSpeechChecker","then","data","isSetword","ThesaurusComponent","HandleSearchButtonClick","INITIAL_STATE","isOpenSearchBar","isCloseSearchBar","wordsReducer","action","wordsTypes","ON_OPEN_SEARCHBAR","ON_CLOSE_SEARCHBAR","ON_TOGGLE_SEARCHBAR","SET_NOUN_ARRAY","payload","SET_AVAILABLE_WORD_TYPES","values","RESET_AVAILABLE_WORD_TYPES","SET_ADVERB_ARRAY","SET_PHRASE_ARRAY","SET_VERB_ARRAY","SET_ADJ_ARRAY","SET_WORD","SET_RETURNED_WORD","SET_SHORTDEF","SET_PART_OF_SPEECH","SET_WORD_EXAMPLE","SET_SYNS","SET_ANTS","SET_WORD_ARRAY","combineReducers","configureStore","reducer","rootReducer","devTools","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","store","StrictMode","basename","getElementById","onOpenSearchBar","onToggleSearchBar","onCloseSearchBar"],"mappings":"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","file":"static/js/main.a3f588a6.chunk.js","sourcesContent":["/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://flary-server.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","import React from 'react';\nimport { Stack, Skeleton, useColorModeValue } from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\n\nconst LoadingSkeleton = () => {\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200');\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500');\n  return (\n    <Presets.TransitionFade>\n      <Stack>\n        <Skeleton height=\"9px\" mt=\"4\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" w=\"80%\" mb=\"3\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n      </Stack>\n    </Presets.TransitionFade>\n  );\n};\n\nexport default LoadingSkeleton;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  useColorModeValue,\n  useMediaQuery,\n  chakra,\n} from '@chakra-ui/react';\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 15px;\npadding-bottom: 20px;\nword-spacing: 0;\n`;\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer);\n\nconst WordsContainer = (props) => {\n  const {\n    children, ml, mr, marginTop, boxShadow, gradientbg, isLargerthan440,\n  } = props;\n\n  return (\n    <ChakraWordTypeContainer\n      boxShadow={boxShadow}\n      bgGradient={gradientbg}\n      ml={ml}\n      mr={mr}\n      marginTop={marginTop}\n    >\n      {children}\n    </ChakraWordTypeContainer>\n  );\n};\n\nexport default WordsContainer;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\nimport React, { useEffect } from 'react';\nimport { Presets } from 'react-component-transition';\nimport tw from 'tailwind-styled-components';\nimport ReactHtmlParser from 'react-html-parser';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  chakra,\n  Heading,\n  UnorderedList,\n  useColorModeValue,\n  Box,\n  ListItem,\n} from '@chakra-ui/react';\n\nconst WordAndType = tw.div`\n    mt-1\n`;\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`;\n\nconst ChakraTheWord = chakra(TheWord);\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`;\n\nconst ChakraTheType = chakra(TheType);\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`;\n\nconst ChakraSynAntHeader = chakra(SynAntHeader);\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`;\n\nconst Example = tw.span`\n    text-xl\n    block\n`;\n\nconst ChakraExample = chakra(Example);\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`;\n\nconst ChakraText = chakra(Text);\n\nconst WordsContainerContent = (\n  props,\n) => {\n  const {\n    getWords,\n    HandleBackButtonClick,\n    history,\n    WordsArray,\n  } = props;\n\n  const {\n    fl,\n    hwi: {\n      hw,\n    },\n    shortdef,\n    def: [{\n      sseq: dt,\n    }],\n    meta: {\n      syns,\n    },\n    meta: {\n      ants,\n    },\n  } = WordsArray;\n  const ExampleSentence = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n  const ExampleModified = ExampleSentence.replace('{it}', '<em>').replace('{/it}', '</em>');\n  const Ants = ants[0];\n  const Syns = syns[0];\n  const ReturnedWord = hw;\n  const PartOfSpeech = fl;\n  const ShortDef = shortdef[0];\n  const WordExample = ExampleModified;\n\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7');\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02');\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hoverSynAntItems = useColorModeValue({ textDecoration: 'underline' }, { textDecoration: 'underline' });\n\n  // TODO fix changetitle\n  // const changeTitle = (ComponentState) => {\n  //   const initialTitle = 'Thesaurus By Flary';\n  //   if (ComponentState === 'mount') {\n  //     document.title = ReturnedWord.length ? `${ReturnedWord[0].toUpperCase()\n  //  + ReturnedWord.slice(1)} Synonyms, ${ReturnedWord} Antonyms | Flary Thesaurus` : initialTitle;\n  //   } else {\n  //     document.title = initialTitle;\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   changeTitle('mount');\n  //   return () => {\n  //     changeTitle();\n  //   };\n  // }, [ReturnedWord]);\n\n  const onClickWords = (event) => {\n    HandleBackButtonClick();\n    getWords(event.target.textContent);\n    history.push('/thesaurus');\n  };\n  // Change synonyms and antonyms words to list items\n  const turnWordInToList = (MainObj) => {\n    let ReturnedObj = [];\n    if (MainObj !== undefined) {\n      ReturnedObj = MainObj.map((word, index) => {\n        if (MainObj[index + 1] === undefined) {\n          return <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={index}>{word}</ListItem>;\n        }\n        return (\n          <>\n            <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={word}>{word}</ListItem>\n            <span key={index}>{',\\u00A0'}</span>\n          </>\n        );\n      });\n    }\n    return ReturnedObj;\n  };\n  const OrderSynonyms = () => turnWordInToList(Syns);\n  const OrderAntonyms = () => turnWordInToList(Ants);\n\n  const ThesaurusHeader = tw.h1`\nitalic\nfont-serif\ntext-3xl\nfont-bold\ninline-block\n`;\n\n  const ChakraThesaurusHeader = chakra(ThesaurusHeader);\n\n  return (\n    <>\n      <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n        Thesaurus\n      </ChakraThesaurusHeader>\n      <WordAndType>\n        <Presets.TransitionFade>\n          <ChakraTheWord color={fontColorMain}>\n            {ReturnedWord}\n          </ChakraTheWord>\n        </Presets.TransitionFade>\n        <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n          {PartOfSpeech}\n        </ChakraTheType>\n      </WordAndType>\n      <ChakraSynAntHeader color={fontColorHeaders}>\n        Synonyms & Antonyms of\n        {' '}\n        <em>{ReturnedWord}</em>\n      </ChakraSynAntHeader>\n      <SynAntContainer>\n        <ChakraText color={fontColorMain}>\n          {ShortDef}\n        </ChakraText>\n        {(ShortDef.slice(0, 5) === WordExample.slice(0, 5))\n          ? <></>\n          : (\n            <ChakraExample color={fontColorSynAnt}>\n              {' '}\n              <strong>//</strong>\n              {' '}\n              {ReactHtmlParser(WordExample)}\n            </ChakraExample>\n          )}\n        <Heading mb=\"1\" mt=\"2\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n          Synonyms for\n          {' '}\n          <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n        </Heading>\n        <Box w={['100%', '70%', null]}>\n          <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n        </Box>\n        {(Ants !== undefined)\n          ? (\n            <div>\n              <Heading mb=\"1\" mt=\"4\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                Antonyms for\n                {' '}\n                <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n              </Heading>\n              <Box w={['100%', '70%', null]}>\n                <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n              </Box>\n            </div>\n          )\n          : <></>}\n      </SynAntContainer>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  ReturnedWord: words.ReturnedWord,\n  ShortDef: words.ShortDef,\n  PartOfSpeech: words.PartOfSpeech,\n  WordExample: words.WordExample,\n  Syns: words.Syns,\n  Ants: words.Ants,\n  WordArray: words.WordArray,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(WordsContainerContent));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  componentDidCatch(error, info) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n    if (hasError) {\n      return (\n        <div style={{ color: 'red', fontWeight: 'bold' }}>\n          ERROR: Something went wrong. Please sumbit an issue here\n          {' '}\n          <a href=\"https://github.com/flacial/flary/issues/new/choose\">Link</a>\n          {' '}\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","/* eslint-disable max-len */\n/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable no-unused-vars */\n\nimport {\n  TabList, Tab, Tabs, TabPanels, TabPanel, useColorModeValue,\n} from '@chakra-ui/react';\n// eslint-disable-next-line no-unused-vars\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Presets } from 'react-component-transition';\nimport { connect } from 'react-redux';\nimport LoadingSkeleton from '../loading-skeleton/loading-skeleton.component';\nimport WordsContainer from '../words-container/words.container.component';\nimport WordsContainerContent from '../words-container-content/words-container-content';\nimport ErrorBoundary from '../error-boundary/error-boundary.component';\nimport { setAvailableWordType } from '../../redux/words/words.action';\n\nconst WordsTabs = ({\n  AvailableWordType,\n  WordsLoaded,\n  getWords,\n  HandleBackButtonClick,\n  NounArray,\n  VerbArray,\n  AdjArray,\n  PhraseArray,\n  AdverbArray,\n  // WordArray,\n}) => {\n  const boxShadow = useColorModeValue('0px 0px 25px #a1a1a1, -10px -10px 0px #3B82F6', '0px 0px 11px #1c1c1c, -10px -10px 0px orange');\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)');\n  const Tabshover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  const NounTabButton = useRef(null);\n  const VerbTabButton = useRef(null);\n  const AdjectiveTabButton = useRef(null);\n  const PhraseTabButton = useRef(null);\n  const AdverbTabButton = useRef(null);\n  const TabListElement = useRef(null);\n\n  // eslint-disable-next-line consistent-return\n  const InitialWordArray = () => {\n    if (Object?.keys(NounArray)?.length) {\n      return NounArray;\n    }\n    if (Object.keys(VerbArray).length) {\n      return VerbArray;\n    }\n    if (Object.keys(AdjArray).length) {\n      return AdjArray;\n    }\n    if (Object.keys(PhraseArray).length) {\n      return PhraseArray;\n    }\n    if (Object.keys(AdverbArray).length) {\n      return AdverbArray;\n    }\n  };\n\n  // eslint-disable-next-line consistent-return\n  // const HandleKeyDownTabsButtonSwitch = (event, AvailableWordType) => {\n  //   switch (event.key) {\n  //     case '!': // Noun 1\n  //       if (TabListElement?.current?.childElementCount >= 2) {\n  //         event.preventDefault();\n  //         return (!AvailableWordType.noun && AdjectiveTabButton?.current?.click()) || NounTabButton?.current?.click();\n  //       }\n  //       break;\n  //     case '@': // Verb 2\n  //       event.preventDefault();\n  //       return VerbTabButton?.current?.click();\n  //     case '#': // Adjective 3\n  //       if (AvailableWordType?.noun && AvailableWordType?.verb) {\n  //         event.preventDefault();\n  //         return AdverbTabButton?.current?.click() || PhraseTabButton?.current?.click() || AdjectiveTabButton?.current?.click();\n  //       }\n  //       break;\n  //     case '$': // Phrase 4\n  //       event.preventDefault();\n  //       return AdverbTabButton?.current?.click() || PhraseTabButton?.current?.click();\n  //     case '%': // Adverb 5\n  //       if (AvailableWordType?.phrase) {\n  //         event.preventDefault();\n  //         AdverbTabButton?.current?.click();\n  //       }\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   document.addEventListener('keydown', (e) => HandleKeyDownTabsButtonSwitch(e, AvailableWordType));\n  //   return () => {\n  //     document.removeEventListener('keydown', (e) => HandleKeyDownTabsButtonSwitch(e, AvailableWordType));\n  //   };\n  // }, [AvailableWordType]);\n\n  const TheWholeThesaurus = (WordsArray) => (\n    <WordsContainer boxShadow={boxShadow} gradientbg={gradientbg} ml={['0', '9em', null]} mr={['0', '9em', null]} marginTop={['3', null, null]}>\n      <Presets.TransitionFade>\n        {(WordsLoaded)\n          ? (\n            <ErrorBoundary>\n              <WordsContainerContent\n                getWords={getWords}\n                HandleBackButtonClick={HandleBackButtonClick}\n                WordsArray={WordsArray}\n              />\n            </ErrorBoundary>\n          )\n          : (\n            <LoadingSkeleton />\n          )}\n      </Presets.TransitionFade>\n    </WordsContainer>\n  );\n\n  return (\n    <>\n      <Tabs defaultIndex={0} align=\"center\" variant=\"soft-rounded\">\n        {/* <Box className='backdrop-blur z-50' display='flex'\n         justifyContent='center' h='22' width='full'  position='fixed' bottom='0'> */}\n        <Presets.TransitionFade>\n          <TabList ref={TabListElement} flexWrap=\"wrap\" marginTop={['4', '2', null]}>\n            {(AvailableWordType.noun) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={NounTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Noun</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.verb) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={VerbTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Verb</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.adjective) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={AdjectiveTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adjective</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.phrase) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={PhraseTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Phrase</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.adverb) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={AdverbTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adverb</Tab>\n              : null\n            )\n              : null}\n          </TabList>\n        </Presets.TransitionFade>\n        {/* </Box> */}\n        <TabPanels>\n          <TabPanel>\n            {TheWholeThesaurus(InitialWordArray())}\n          </TabPanel>\n          {/* )\n              : null\n          } */}\n          {\n            Object.keys(VerbArray).length && InitialWordArray().fl !== 'verb'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(VerbArray)}\n                </TabPanel>\n              )\n              : null\n          }\n          {\n            Object.keys(AdjArray).length && InitialWordArray().fl !== 'adjective'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(AdjArray)}\n                </TabPanel>\n              )\n              : null\n          }\n          {\n            Object.keys(PhraseArray).length && InitialWordArray().fl !== 'phrase'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(PhraseArray)}\n                </TabPanel>\n              )\n              : null\n          }\n          {\n            Object.keys(AdverbArray).length && InitialWordArray().fl !== 'adverb'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(AdverbArray)}\n                </TabPanel>\n              )\n              : null\n          }\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  WordArray: words.WordArray,\n  NounArray: words.NounArray,\n  VerbArray: words.VerbArray,\n  AdjArray: words.AdjArray,\n  PhraseArray: words.PhraseArray,\n  AdverbArray: words.AdverbArray,\n  AvailableWordType: words.AvailableWordType,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAvailableWordType: (word) => dispatch(setAvailableWordType(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(WordsTabs));\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport {\n  useEffect, React,\n} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\nimport WordsTabs from '../../components/tabs/tabs.component';\n\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (props) => {\n  const {\n    Link,\n    HandleBackButtonClick,\n    WordsLoaded,\n    AvailableWordType,\n    getWords,\n    history,\n    location,\n  } = props;\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const hover = useColorModeValue({ background: 'gray.200' }, { background: 'gray.700' });\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const fallbackBackground = useColorModeValue('rgba(255, 255, 255, .9)', 'rgba(0, 0, 0, 0.26)');\n\n  const HandleKeyDownBackButtonQctrl = (event) => {\n    if (event.key === 'Q' && event.ctrlKey) {\n      HandleBackButtonClick();\n      history.push('/');\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  return (\n    <>\n      {WordsLoaded\n        ? (\n          <Box zIndex=\"9991\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={focusBorderColorGeneral} bg={bg} color={color} _hover={hover} onClick={HandleBackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      {(location.pathname === '/thesaurus')\n        ? (\n          <Box\n            background={!(CSS.supports('backdrop-filter', 'blur(5px)'))\n                  && fallbackBackground}\n            className=\"backdrop-blur\"\n            zIndex=\"9990\"\n            position=\"fixed\"\n            top=\"0\"\n            h=\"70px\"\n            w=\"full\"\n            borderRadius=\"0 0 20px 20px\"\n          />\n        )\n        // TODO Break tabs into its own compoonent\n        : <></>}\n      <Presets.TransitionFade>\n        <WordsTabs\n          AvailableWordType={AvailableWordType}\n          WordsLoaded={WordsLoaded}\n          getWords={getWords}\n          HandleBackButtonClick={HandleBackButtonClick}\n        />\n      </Presets.TransitionFade>\n    </>\n  );\n};\n\nexport default withRouter(ThesaurusPage);\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\n// eslint-disable-next-line no-unused-vars\nimport React, { lazy, Suspense } from 'react';\nimport { Presets } from 'react-component-transition';\n\nconst SearchPage = lazy(() => import('../pages/SearchPage/SearchPage'));\n\nfunction Routes({ Thesaurus, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <Suspense fallback={null}>\n          <SearchPage {...props} />\n        </Suspense>\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {Thesaurus()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  Button,\n  chakra,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst Help = () => {\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const KeyboardShortCutsColor = useColorModeValue('gray.600', 'gray.400');\n\n  return (\n    <Popover placement=\"auto\">\n      <PopoverTrigger>\n        <Button\n          _focus={focusBorderColorInput}\n          focusBorderColor={focusBorderColorInput}\n          boxShadow=\"lg\"\n          outline=\"none\"\n          outlineColor=\"initial\"\n          style={{ outlineStyle: 'none' }}\n          m=\"4\"\n          mr={[null, '40', null]}\n          rounded=\"xl\"\n        >\n          <QuestionIcon />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent width=\"max-content\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Keyboard Shortcuts</PopoverHeader>\n        <PopoverBody className=\"whitespace-pre-wrap text-left\">\n          <strong>Global</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Switch theme:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + X</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Home Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Focus on input field:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + A</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Thesaurus Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Go to Home Page:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + Q</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Search bar:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + E</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          {/* <chakra.span>\n            Switch word type:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Shift + 1 or 2 or 3</chakra.span>\n          </chakra.span> */}\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Help;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  chakra, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\n\nconst ThemeButton = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const ThemeButtonRef = useRef(null);\n  const HandleKeyDownThemeIcon = (event) => {\n    if (event.key === 'X' && event.ctrlKey) {\n      event.preventDefault();\n      ThemeButtonRef.current.click();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownThemeIcon);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownThemeIcon);\n    };\n  }, []);\n\n  return (\n    <Button ref={ThemeButtonRef} _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={toggleColorMode}>\n      {colorMode === 'light'\n        ? <MoonIcon />\n        : (\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n          </chakra.svg>\n        )}\n    </Button>\n  );\n};\n\nexport default ThemeButton;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Box } from '@chakra-ui/react';\nimport React, { Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Presets } from 'react-component-transition';\nimport Help from '../help-button/help-button.component';\nimport ThemeButton from '../theme-button/theme-button.component';\n// const PopUpSearchBar = lazy(() => import('../popup-search-bar/popup-search-bar.component'));\n// import SearchButtonHeader from '../search-button/search-button.component';\n// import ErrorBoundary from '../error-boundary/error-boundary.component';\nconst SearchButtonHeader = lazy(() => import('../search-button/search-button.component'));\n\nconst Header = ({\n  InputFiledSearchBarPopUp,\n  location,\n  WordsLoaded,\n}) => (\n  <Box\n    zIndex=\"9991\"\n    position=\"sticky\"\n    top=\"0\"\n    h=\"70px\"\n    display=\"flex\"\n    justifyContent=\"flex-end\"\n  >\n    {(location.pathname === '/thesaurus' && WordsLoaded)\n      ? (\n        <>\n          <Presets.TransitionFade>\n            <Suspense fallback={null}>\n              <SearchButtonHeader\n                WordsLoaded={WordsLoaded}\n                InputFiledSearchBarPopUp={InputFiledSearchBarPopUp}\n              />\n            </Suspense>\n          </Presets.TransitionFade>\n        </>\n      )\n      : <></>}\n    <ThemeButton />\n    <Help />\n  </Box>\n);\n\nexport default withRouter(Header);\n","/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\n\n// TODO add react-swipeable\n\nimport { connect } from 'react-redux';\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport {\n  useState,\n  useEffect,\n  React,\n  lazy,\n  Suspense,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\nimport ThesaurusPage from '../pages/ThesaurusPage/ThesaurusPage';\nimport Routes from '../routes/routes';\nimport Header from '../components/header/header.component';\nimport {\n  setWord,\n  setWordArray,\n  setNounArray,\n  setAdjArray,\n  setVerbArray,\n  setPhraseArray,\n  setAdverbArray,\n  setAvailableWordType,\n  resetAvailableWordType,\n} from '../redux/words/words.action';\nimport ErrorBoundary from '../components/error-boundary/error-boundary.component';\n\nconst PopUpSearchBar = lazy(() => import('../components/popup-search-bar/popup-search-bar.component'));\n\nconst App = (props) => {\n  const {\n    location,\n    Word,\n    setWord,\n    setWordArray,\n    setNounArray,\n    WordArray,\n    setVerbArray,\n    setAdjArray,\n    setPhraseArray,\n    setAdverbArray,\n    AvailableWordType,\n    setAvailableWordType,\n    resetAvailableWordType,\n  } = props;\n  const [Error, setError] = useState(false);\n  const PathName = location.pathname;\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [IsInitialDone, setInitialDone] = useState(false);\n\n  const setFilterArray = (wordObjects) => {\n    if (AvailableWordType.noun) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'noun');\n      setNounArray(filteredArray[0]);\n    }\n    if (AvailableWordType.verb) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'verb');\n      setVerbArray(filteredArray[0]);\n    }\n    if (AvailableWordType.adjective) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'adjective');\n      setAdjArray(filteredArray[0]);\n    }\n    if (AvailableWordType.phrase) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'phrase');\n      setPhraseArray(filteredArray[0]);\n    }\n    if (AvailableWordType.adverb) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'adverb');\n      setAdverbArray(filteredArray[0]);\n    }\n  };\n\n  useEffect(() => {\n    if (IsInitialDone) {\n      setFilterArray(WordArray);\n    }\n  }, [Object.keys(AvailableWordType)]);\n\n  const PartOfSpeechChecker = (wordObjects) => {\n    try {\n      wordObjects.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType({ type: 'noun', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'verb':\n            setAvailableWordType({ type: 'verb', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'adjective':\n            setAvailableWordType({ type: 'adjective', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'phrase':\n            setAvailableWordType({ type: 'phrase', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'adverb':\n            setAvailableWordType({ type: 'adverb', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const PassRequstedWords = (wordObjects) => {\n    try {\n      if (wordObjects[0].hwi) {\n        setWordArray(wordObjects);\n        // InitialWord(wordObjects);\n        PartOfSpeechChecker(wordObjects);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      console.log(error);\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = (word = Word) => {\n    if (word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(word)\n        .then((data) => PassRequstedWords(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const HandleSearchButtonClick = () => {\n    getWords();\n  };\n\n  const HandleBackButtonClick = (isSetword) => {\n    if (isSetword) {\n      setWord('');\n    }\n    setWordsLoaded(false);\n    resetAvailableWordType();\n    setNounArray([]);\n    setVerbArray([]);\n    setAdjArray([]);\n    setPhraseArray([]);\n    setAdverbArray([]);\n    setWordArray([]);\n  };\n\n  // Sets AvailableWordType to an empty object\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType([]);\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  const ThesaurusStore = () => (\n    <ThesaurusPage\n      getWords={getWords}\n      AvailableWordType={AvailableWordType}\n      WordsLoaded={WordsLoaded}\n      Link={Link}\n      HandleBackButtonClick={HandleBackButtonClick}\n    />\n  );\n\n  const Thesaurus = () => {\n    let ThesaurusComponent;\n    if (Word.length) {\n      if (Error) {\n        ThesaurusComponent = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusComponent = <Redirect to=\"/\" />;\n    }\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusComponent;\n  };\n\n  // Clear all stored states if the pathName is not thesaurus\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && WordArray?.[0]?.fl?.length) {\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <>\n      {(PathName === '/thesaurus' && WordsLoaded)\n        ? (\n          <ErrorBoundary>\n            <Suspense fallback={null}>\n              <PopUpSearchBar\n                HandleBackButtonClick={HandleBackButtonClick}\n                getWords={getWords}\n                setWordsLoaded={setWordsLoaded}\n              />\n            </Suspense>\n          </ErrorBoundary>\n        )\n        : <></>}\n      <Header\n        PathName={PathName}\n        WordsLoaded={WordsLoaded}\n      />\n      <Routes\n        getWords={getWords}\n        Thesaurus={Thesaurus}\n        WordFindType={WordFindType}\n        WordFind={WordFind}\n        isOpen={isOpen}\n        HandleSearchButtonClick={HandleSearchButtonClick}\n        Link={Link}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  WordArray: words.WordArray,\n  NounArray: words.NounArray,\n  VerbArray: words.VerbArray,\n  AdjArray: words.AdjArray,\n  PhraseArray: words.PhraseArray,\n  AdverbArray: words.AdverbArray,\n  AvailableWordType: words.AvailableWordType,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setWord: (word) => dispatch(setWord(word)),\n  setWordArray: (word) => dispatch(setWordArray(word)),\n  setNounArray: (word) => dispatch(setNounArray(word)),\n  setVerbArray: (word) => dispatch(setVerbArray(word)),\n  setAdjArray: (word) => dispatch(setAdjArray(word)),\n  setPhraseArray: (word) => dispatch(setPhraseArray(word)),\n  setAdverbArray: (word) => dispatch(setAdverbArray(word)),\n  setAvailableWordType: (word) => dispatch(setAvailableWordType(word)),\n  resetAvailableWordType: () => dispatch(resetAvailableWordType()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n","import { wordsTypes } from './words.types';\n\n// const [Error, setError] = useState(false);\n// const PathName = location.pathname;\n// const {\n//   isOpen,\n//   onOpen,\n// } = useDisclosure();\n// const {\n//   isOpen: isOpen2,\n//   onOpen: onOpen2,\n//   onClose: onClose2,\n//   onToggle: onToggle2,\n// } = useDisclosure();\n// const [WordFind, setWordFind] = useState(false);\n// const [WordFindType, setWordFindType] = useState('');\n// const [WordsLoaded, setWordsLoaded] = useState(false);\n// const [WordArray, setWordArray] = useState([]);\n// const [AvailableWordType, setAvailableWordType] = useState({});\n\nconst INITIAL_STATE = {\n  Word: '',\n  ReturnedWord: '',\n  ShortDef: '',\n  PartOfSpeech: '',\n  WordExample: '',\n  Syns: [],\n  Ants: [],\n  WordArray: [],\n  NounArray: [],\n  VerbArray: [],\n  AdjArray: [],\n  PhraseArray: [],\n  AdverbArray: [],\n  AvailableWordType: [],\n  isOpenSearchBar: false,\n  isCloseSearchBar: true,\n};\n\nconst wordsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case wordsTypes.ON_OPEN_SEARCHBAR:\n      return {\n        ...state,\n        isOpenSearchBar: true,\n        isCloseSearchBar: false,\n      };\n\n    case wordsTypes.ON_CLOSE_SEARCHBAR:\n      return {\n        ...state,\n        isOpenSearchBar: false,\n        isCloseSearchBar: true,\n      };\n\n    case wordsTypes.ON_TOGGLE_SEARCHBAR:\n      return {\n        ...state,\n        isOpenSearchBar: !state.isOpenSearchBar,\n        isCloseSearchBar: !state.isCloseSearchBar,\n      };\n\n    case wordsTypes.SET_NOUN_ARRAY:\n      return {\n        ...state,\n        NounArray: action.payload,\n      };\n    case wordsTypes.SET_AVAILABLE_WORD_TYPES:\n      return {\n        ...state,\n        AvailableWordType: {\n          ...state.AvailableWordType,\n          [Object.keys(action.payload)[0]]: [Object.values(action.payload)[0]],\n        },\n      };\n    case wordsTypes.RESET_AVAILABLE_WORD_TYPES:\n      return {\n        ...state,\n        AvailableWordType: [],\n      };\n    case wordsTypes.SET_ADVERB_ARRAY:\n      return {\n        ...state,\n        AdverbArray: action.payload,\n      };\n    case wordsTypes.SET_PHRASE_ARRAY:\n      return {\n        ...state,\n        PhraseArray: action.payload,\n      };\n    case wordsTypes.SET_VERB_ARRAY:\n      return {\n        ...state,\n        VerbArray: action.payload,\n      };\n    case wordsTypes.SET_ADJ_ARRAY:\n      return {\n        ...state,\n        AdjArray: action.payload,\n      };\n    case wordsTypes.SET_WORD:\n      return {\n        ...state,\n        Word: action.payload,\n      };\n    case wordsTypes.SET_RETURNED_WORD:\n      return {\n        ...state,\n        ReturnedWord: action.payload,\n      };\n    case wordsTypes.SET_SHORTDEF:\n      return {\n        ...state,\n        ShortDef: action.payload,\n      };\n    case wordsTypes.SET_PART_OF_SPEECH:\n      return {\n        ...state,\n        PartOfSpeech: action.payload,\n      };\n    case wordsTypes.SET_WORD_EXAMPLE:\n      return {\n        ...state,\n        WordExample: action.payload,\n      };\n    case wordsTypes.SET_SYNS:\n      return {\n        ...state,\n        Syns: action.payload,\n      };\n    case wordsTypes.SET_ANTS:\n      return {\n        ...state,\n        Ants: action.payload,\n      };\n    case wordsTypes.SET_WORD_ARRAY:\n      return {\n        ...state,\n        WordArray: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default wordsReducer;\n","import { combineReducers } from 'redux';\nimport wordsReducer from './words/words.reducer';\n\nexport default combineReducers({\n  words: wordsReducer,\n});\n","/* eslint-disable no-unused-vars */\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\n\nexport default configureStore({\n  reducer: rootReducer,\n  devTools: false,\n});\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport store from './redux/store';\nimport theme from './theme';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ChakraProvider>\n        <Router basename=\"/flary\">\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <App />\n        </Router>\n      </ChakraProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n","/* eslint-disable import/prefer-default-export */\nimport { wordsTypes } from './words.types';\n\nexport const setAvailableWordType = (word) => ({\n  type: wordsTypes.SET_AVAILABLE_WORD_TYPES,\n  // eslint-disable-next-line object-shorthand\n  payload: {\n    [word.type]: word.value,\n  },\n});\n\nexport const resetAvailableWordType = () => ({\n  type: wordsTypes.RESET_AVAILABLE_WORD_TYPES,\n});\n\nexport const onOpenSearchBar = () => ({\n  type: wordsTypes.ON_OPEN_SEARCHBAR,\n});\n\nexport const onToggleSearchBar = () => ({\n  type: wordsTypes.ON_TOGGLE_SEARCHBAR,\n});\n\nexport const onCloseSearchBar = () => ({\n  type: wordsTypes.ON_CLOSE_SEARCHBAR,\n});\n\nexport const setPhraseArray = (word) => ({\n  type: wordsTypes.SET_PHRASE_ARRAY,\n  payload: word,\n});\n\nexport const setAdverbArray = (word) => ({\n  type: wordsTypes.SET_ADVERB_ARRAY,\n  payload: word,\n});\n\nexport const setNounArray = (word) => ({\n  type: wordsTypes.SET_NOUN_ARRAY,\n  payload: word,\n});\n\nexport const setVerbArray = (word) => ({\n  type: wordsTypes.SET_VERB_ARRAY,\n  payload: word,\n});\n\nexport const setAdjArray = (word) => ({\n  type: wordsTypes.SET_ADJ_ARRAY,\n  payload: word,\n});\n\nexport const setWord = (word) => ({\n  type: wordsTypes.SET_WORD,\n  payload: word,\n});\n\nexport const setReturnedWord = (word) => ({\n  type: wordsTypes.SET_RETURNED_WORD,\n  payload: word,\n});\n\nexport const setShortDef = (word) => ({\n  type: wordsTypes.SET_SHORTDEF,\n  payload: word,\n});\n\nexport const setPartOfSpeech = (word) => ({\n  type: wordsTypes.SET_PART_OF_SPEECH,\n  payload: word,\n});\n\nexport const setWordExample = (word) => ({\n  type: wordsTypes.SET_WORD_EXAMPLE,\n  payload: word,\n});\n\nexport const setAnts = (word) => ({\n  type: wordsTypes.SET_ANTS,\n  payload: word,\n});\n\nexport const setSyns = (word) => ({\n  type: wordsTypes.SET_SYNS,\n  payload: word,\n});\n\nexport const setWordArray = (word) => ({\n  type: wordsTypes.SET_WORD_ARRAY,\n  payload: word,\n});\n","/* eslint-disable import/prefer-default-export */\nexport const wordsTypes = {\n  SET_PHRASE_ARRAY: 'SET_PHRASE_ARRAY',\n  SET_ADVERB_ARRAY: 'SET_ADVERB_ARRAY',\n  SET_WORD: 'SET_WORD',\n  SET_RETURNED_WORD: 'SET_RETURNED_WORD',\n  SET_SHORTDEF: 'SET_SHORTDEF',\n  SET_PART_OF_SPEECH: 'SET_PART_OF_SPEECH',\n  SET_WORD_EXAMPLE: 'SET_WORD_EXAMPLE',\n  SET_SYNS: 'SET_SYNS',\n  SET_ANTS: 'SET_ANTS',\n  SET_WORD_ARRAY: 'SET_WORD_ARRAY',\n  SET_NOUN_ARRAY: 'SET_NOUN_ARRAY',\n  SET_VERB_ARRAY: 'SET_VERB_ARRAY',\n  SET_ADJ_ARRAY: 'SET_ADJ_ARRAY',\n  SET_AVAILABLE_WORD_TYPES: 'SET_AVAILABLE_WORD_TYPES',\n  RESET_AVAILABLE_WORD_TYPES: 'RESET_AVAILABLE_WORD_TYPES',\n  ON_OPEN_SEARCHBAR: 'ON_OPEN_SEARCHBAR',\n  ON_TOGGLE_SEARCHBAR: 'ON_TOGGLE_SEARCHBAR',\n  ON_CLOSE_SEARCHBAR: 'ON_CLOSE_SEARCHBAR',\n};\n"],"sourceRoot":""}