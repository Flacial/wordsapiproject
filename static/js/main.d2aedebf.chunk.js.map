{"version":3,"sources":["redux/words/words.types.js","services/getRequest.js","components/loading-skeleton/loading-skeleton.component.jsx","components/words-container/words.container.component.jsx","components/words-container-content/words-container-content.jsx","components/error-boundary/error-boundary.component.jsx","components/tabs/tabs.component.jsx","pages/ThesaurusPage/ThesaurusPage.jsx","routes/routes.jsx","components/help-button/help-button.component.jsx","components/theme-button/theme-button.component.jsx","components/NavBar/NavBar.jsx","containers/App.jsx","redux/words/words.reducer.js","redux/root-reducer.js","redux/store.js","theme.js","index.jsx","redux/words/words.action.js"],"names":["wordsTypes","SET_PHRASE_ARRAY","SET_ADVERB_ARRAY","SET_WORD","SET_RETURNED_WORD","SET_SHORTDEF","SET_PART_OF_SPEECH","SET_WORD_EXAMPLE","SET_SYNS","SET_ANTS","SET_WORD_ARRAY","SET_NOUN_ARRAY","SET_VERB_ARRAY","SET_ADJ_ARRAY","getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","LoadingSkeleton","SkeletonStartColor","useColorModeValue","SkeletonEndColor","TransitionFade","height","mt","mb","startColor","endColor","w","WordTypeContainer","styled","div","ChakraWordTypeContainer","chakra","WordsContainer","props","children","ml","mr","marginTop","boxShadow","gradientbg","isLargerthan440","bgGradient","WordAndType","tw","TheWord","h1","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","connect","words","Word","ReturnedWord","ShortDef","PartOfSpeech","WordExample","Syns","Ants","WordArray","withRouter","getWords","HandleBackButtonClick","history","WordsArray","fl","hw","hwi","shortdef","dt","def","sseq","syns","meta","ants","ExampleModified","t","replace","fontColorMain","fontColorHeaders","fontColorSynAnt","fontColorDarkWhiteSmallWords","hoverSynAntItems","textDecoration","onClickWords","event","target","textContent","push","turnWordInToList","MainObj","ReturnedObj","undefined","map","index","_hover","className","onClick","listStyleType","display","ThesaurusHeader","ChakraThesaurusHeader","color","slice","ReactHtmlParser","fontSize","fontFamily","fontStyle","ErrorBoundary","state","hasError","error","info","console","log","this","React","Component","WordsTabs","AvailableWordType","WordsLoaded","NounArray","VerbArray","AdjArray","PhraseArray","AdverbArray","Tabshover","bg","focusBorderColorGeneral","NounTabButton","useRef","VerbTabButton","AdjectiveTabButton","InitialWordArray","Object","keys","length","HandleKeyDownTabsButton123","key","preventDefault","current","click","useEffect","document","addEventListener","removeEventListener","TheWholeThesaurus","align","variant","flexWrap","noun","ref","_selected","_focus","outline","outlineColor","style","outlineStyle","verb","adjective","phrase","adverb","memo","Link","location","LinkChak","hover","background","fallbackBackground","changeTitle","ComponentState","initialTitle","title","toUpperCase","HandleKeyDownBackButtonQctrl","ctrlKey","window","scrollTo","top","behavior","zIndex","left","to","pathname","CSS","supports","position","h","borderRadius","SearchPage","lazy","Routes","Thesaurus","useLocation","exact","path","fallback","Help","focusBorderColorInput","KeyboardShortCutsColor","placement","focusBorderColor","m","rounded","Question","width","fontWeight","ThemeButton","useColorMode","colorMode","toggleColorMode","ThemeButtonRef","HandleKeyDownThemeIcon","Moon","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","xmlns","d","SearchButtonHeader","onOpen2","InputFiledSearchBarPopUp","justifyContent","PopUpSearchBar","dispatch","setWord","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","setAnts","setSyns","setWordArray","setNounArray","setVerbArray","setAdjArray","setPhraseArray","setAdverbArray","useState","Error","setError","PathName","useDisclosure","isOpen","onOpen","isOpen2","onClose2","onClose","onToggle2","onToggle","WordFind","setWordFind","WordFindType","setWordFindType","setWordsLoaded","setAvailableWordType","IsInitialDone","setInitialDone","searchPop","getInputValue","wordObjects","filteredArray","filter","setFilterArray","PassRequstedWords","forEach","arr","prevState","PartOfSpeechChecker","then","data","isSetword","ThesaurusComponent","HandleSearchButtonClick","INITIAL_STATE","wordsReducer","action","type","payload","combineReducers","store","logger","createStore","rootReducer","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.d2aedebf.chunk.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\nexport const wordsTypes = {\n  SET_PHRASE_ARRAY: 'SET_PHRASE_ARRAY',\n  SET_ADVERB_ARRAY: 'SET_ADVERB_ARRAY',\n  SET_WORD: 'SET_WORD',\n  SET_RETURNED_WORD: 'SET_RETURNED_WORD',\n  SET_SHORTDEF: 'SET_SHORTDEF',\n  SET_PART_OF_SPEECH: 'SET_PART_OF_SPEECH',\n  SET_WORD_EXAMPLE: 'SET_WORD_EXAMPLE',\n  SET_SYNS: 'SET_SYNS',\n  SET_ANTS: 'SET_ANTS',\n  SET_WORD_ARRAY: 'SET_WORD_ARRAY',\n  SET_NOUN_ARRAY: 'SET_NOUN_ARRAY',\n  SET_VERB_ARRAY: 'SET_VERB_ARRAY',\n  SET_ADJ_ARRAY: 'SET_ADJ_ARRAY',\n};\n","/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://flary-server.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","import React from 'react';\nimport { Stack, Skeleton, useColorModeValue } from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\n\nconst LoadingSkeleton = () => {\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200');\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500');\n  return (\n    <Presets.TransitionFade>\n      <Stack>\n        <Skeleton height=\"9px\" mt=\"4\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" w=\"80%\" mb=\"3\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n      </Stack>\n    </Presets.TransitionFade>\n  );\n};\n\nexport default LoadingSkeleton;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  useColorModeValue,\n  useMediaQuery,\n  chakra,\n} from '@chakra-ui/react';\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 15px;\npadding-bottom: 20px;\nword-spacing: 0;\n`;\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer);\n\nconst WordsContainer = (props) => {\n  const {\n    children, ml, mr, marginTop, boxShadow, gradientbg, isLargerthan440,\n  } = props;\n\n  return (\n    <ChakraWordTypeContainer\n      boxShadow={boxShadow}\n      bgGradient={gradientbg}\n      ml={ml}\n      mr={mr}\n      marginTop={marginTop}\n    >\n      {children}\n    </ChakraWordTypeContainer>\n  );\n};\n\nexport default WordsContainer;\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-undef */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport { Presets } from 'react-component-transition';\nimport tw from 'tailwind-styled-components';\nimport ReactHtmlParser from 'react-html-parser';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  chakra,\n  Heading,\n  UnorderedList,\n  useColorModeValue,\n  Box,\n  ListItem,\n} from '@chakra-ui/react';\n\nconst WordAndType = tw.div`\n    mt-1\n`;\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`;\n\nconst ChakraTheWord = chakra(TheWord);\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`;\n\nconst ChakraTheType = chakra(TheType);\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`;\n\nconst ChakraSynAntHeader = chakra(SynAntHeader);\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`;\n\nconst Example = tw.span`\n    text-xl\n    block\n`;\n\nconst ChakraExample = chakra(Example);\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`;\n\nconst ChakraText = chakra(Text);\n\nconst WordsContainerContent = (\n  props,\n) => {\n  const {\n    getWords,\n    HandleBackButtonClick,\n    history,\n    WordsArray,\n  } = props;\n\n  const {\n    fl,\n    hwi: {\n      hw,\n    },\n    shortdef,\n    def: [{\n      sseq: dt,\n    }],\n    meta: {\n      syns,\n    },\n    meta: {\n      ants,\n    },\n  } = WordsArray;\n  const ExampleSentence = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n  const ExampleModified = ExampleSentence.replace('{it}', '<em>').replace('{/it}', '</em>');\n  const Ants = ants[0];\n  const Syns = syns[0];\n  const ReturnedWord = hw;\n  const PartOfSpeech = fl;\n  const ShortDef = shortdef[0];\n  const WordExample = ExampleModified;\n\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7');\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02');\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hoverSynAntItems = useColorModeValue({ textDecoration: 'underline' }, { textDecoration: 'underline' });\n\n  const onClickWords = (event) => {\n    HandleBackButtonClick();\n    getWords(event.target.textContent);\n    history.push('/thesaurus');\n  };\n  // Change synonyms and antonyms words to list items\n  const turnWordInToList = (MainObj) => {\n    let ReturnedObj = [];\n    if (MainObj !== undefined) {\n      ReturnedObj = MainObj.map((word, index) => {\n        if (MainObj[index + 1] === undefined) {\n          return <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={index}>{word}</ListItem>;\n        }\n        return (\n          <>\n            <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={word}>{word}</ListItem>\n            <span key={index}>{',\\u00A0'}</span>\n          </>\n        );\n      });\n    }\n    return ReturnedObj;\n  };\n  const OrderSynonyms = () => turnWordInToList(Syns);\n  const OrderAntonyms = () => turnWordInToList(Ants);\n\n  const ThesaurusHeader = tw.h1`\nitalic\nfont-serif\ntext-3xl\nfont-bold\ninline-block\n`;\n\n  const ChakraThesaurusHeader = chakra(ThesaurusHeader);\n\n  return (\n    <>\n      <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n        Thesaurus\n      </ChakraThesaurusHeader>\n      <WordAndType>\n        <Presets.TransitionFade>\n          <ChakraTheWord color={fontColorMain}>\n            {ReturnedWord}\n          </ChakraTheWord>\n        </Presets.TransitionFade>\n        <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n          {PartOfSpeech}\n        </ChakraTheType>\n      </WordAndType>\n      <ChakraSynAntHeader color={fontColorHeaders}>\n        Synonyms & Antonyms of\n        {' '}\n        <em>{ReturnedWord}</em>\n      </ChakraSynAntHeader>\n      <SynAntContainer>\n        <ChakraText color={fontColorMain}>\n          {ShortDef}\n        </ChakraText>\n        {(ShortDef.slice(0, 5) === WordExample.slice(0, 5))\n          ? <></>\n          : (\n            <ChakraExample color={fontColorSynAnt}>\n              {' '}\n              <strong>//</strong>\n              {' '}\n              {ReactHtmlParser(WordExample)}\n            </ChakraExample>\n          )}\n        <Heading mb=\"1\" mt=\"2\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n          Synonyms for\n          {' '}\n          <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n        </Heading>\n        <Box w={['100%', '70%', null]}>\n          <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n        </Box>\n        {(Ants !== undefined)\n          ? (\n            <div>\n              <Heading mb=\"1\" mt=\"4\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                Antonyms for\n                {' '}\n                <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n              </Heading>\n              <Box w={['100%', '70%', null]}>\n                <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n              </Box>\n            </div>\n          )\n          : <></>}\n      </SynAntContainer>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  ReturnedWord: words.ReturnedWord,\n  ShortDef: words.ShortDef,\n  PartOfSpeech: words.PartOfSpeech,\n  WordExample: words.WordExample,\n  Syns: words.Syns,\n  Ants: words.Ants,\n  WordArray: words.WordArray,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(WordsContainerContent));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  componentDidCatch(error, info) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n    if (hasError) {\n      return <div>Something went wrong</div>;\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-shadow */\n/* eslint-disable max-len */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport {\n  TabList, Tab, Tabs, TabPanels, TabPanel, useColorModeValue,\n} from '@chakra-ui/react';\nimport React, { useRef, useEffect } from 'react';\nimport { Presets } from 'react-component-transition';\nimport { connect } from 'react-redux';\nimport LoadingSkeleton from '../loading-skeleton/loading-skeleton.component';\nimport WordsContainer from '../words-container/words.container.component';\nimport WordsContainerContent from '../words-container-content/words-container-content';\nimport ErrorBoundary from '../error-boundary/error-boundary.component';\n\nconst WordsTabs = ({\n  AvailableWordType,\n  WordsLoaded,\n  getWords,\n  HandleBackButtonClick,\n  NounArray,\n  VerbArray,\n  AdjArray,\n  PhraseArray,\n  AdverbArray,\n  // WordArray,\n}) => {\n  const boxShadow = useColorModeValue('0px 0px 25px #a1a1a1, -10px -10px 0px #3B82F6', '0px 0px 11px #1c1c1c, -10px -10px 0px orange');\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)');\n  const Tabshover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  const NounTabButton = useRef(null);\n  const VerbTabButton = useRef(null);\n  const AdjectiveTabButton = useRef(null);\n\n  // eslint-disable-next-line consistent-return\n  const InitialWordArray = () => {\n    if (Object.keys(NounArray).length) {\n      return NounArray;\n    }\n    if (Object.keys(VerbArray).length) {\n      return VerbArray;\n    }\n    if (Object.keys(AdjArray).length) {\n      return AdjArray;\n    }\n    if (Object.keys(PhraseArray).length) {\n      return PhraseArray;\n    }\n    if (Object.keys(AdverbArray).length) {\n      return AdverbArray;\n    }\n  };\n\n  const HandleKeyDownTabsButton123 = (event) => {\n    switch (event.key) {\n      case '!':\n        event.preventDefault();\n        NounTabButton?.current?.click();\n        break;\n      case '@':\n        event.preventDefault();\n        VerbTabButton?.current?.click();\n        break;\n      case '#':\n        event.preventDefault();\n        AdjectiveTabButton?.current?.click();\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownTabsButton123);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownTabsButton123);\n    };\n  }, []);\n\n  const TheWholeThesaurus = (WordsArray) => (\n    <WordsContainer boxShadow={boxShadow} gradientbg={gradientbg} ml={['0', '9em', null]} mr={['0', '9em', null]} marginTop={['3', null, null]}>\n      <Presets.TransitionFade>\n        {(WordsLoaded)\n          ? (\n            <ErrorBoundary>\n              <WordsContainerContent\n                getWords={getWords}\n                HandleBackButtonClick={HandleBackButtonClick}\n                WordsArray={WordsArray}\n              />\n            </ErrorBoundary>\n          )\n          : (\n            <LoadingSkeleton />\n          )}\n      </Presets.TransitionFade>\n    </WordsContainer>\n  );\n\n  return (\n    <>\n      <Tabs align=\"center\" variant=\"soft-rounded\">\n        {/* <Box className='backdrop-blur z-50' display='flex'\n         justifyContent='center' h='22' width='full'  position='fixed' bottom='0'> */}\n        <Presets.TransitionFade>\n          <TabList flexWrap=\"wrap\" marginTop={['4', '2', null]}>\n            {(AvailableWordType.noun) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={NounTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Noun</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.verb) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={VerbTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Verb</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.adjective) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={AdjectiveTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adjective</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.phrase) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={AdjectiveTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Phrase</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.adverb) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={AdjectiveTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adverb</Tab>\n              : null\n            )\n              : null}\n          </TabList>\n        </Presets.TransitionFade>\n        {/* </Box> */}\n        <TabPanels>\n          <TabPanel>\n            {TheWholeThesaurus(InitialWordArray())}\n          </TabPanel>\n          {/* )\n              : null\n          } */}\n          {\n            Object.keys(VerbArray).length && InitialWordArray().fl !== 'verb'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(VerbArray)}\n                </TabPanel>\n              )\n              : null\n          }\n          {\n            Object.keys(AdjArray).length && InitialWordArray().fl !== 'adjective'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(AdjArray)}\n                </TabPanel>\n              )\n              : null\n          }\n          {\n            Object.keys(PhraseArray).length && InitialWordArray().fl !== 'phrase'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(PhraseArray)}\n                </TabPanel>\n              )\n              : null\n          }\n          {\n            Object.keys(AdverbArray).length && InitialWordArray().fl !== 'adverb'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(AdverbArray)}\n                </TabPanel>\n              )\n              : null\n          }\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  WordArray: words.WordArray,\n  NounArray: words.NounArray,\n  VerbArray: words.VerbArray,\n  AdjArray: words.AdjArray,\n  PhraseArray: words.PhraseArray,\n  AdverbArray: words.AdverbArray,\n});\n\nexport default connect(mapStateToProps, null)(React.memo(WordsTabs));\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport {\n  useEffect, React,\n} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { connect } from 'react-redux';\nimport { Presets } from 'react-component-transition';\nimport WordsTabs from '../../components/tabs/tabs.component';\n\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (props) => {\n  const {\n    Link,\n    HandleBackButtonClick,\n    ReturnedWord,\n    WordsLoaded,\n    AvailableWordType,\n    getWords,\n    history,\n    location,\n  } = props;\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const hover = useColorModeValue({ background: 'gray.200' }, { background: 'gray.700' });\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const fallbackBackground = useColorModeValue('rgba(255, 255, 255, .9)', 'rgba(0, 0, 0, 0.26)');\n\n  // TODO move this to words-content\n  const changeTitle = (ComponentState) => {\n    const initialTitle = 'Thesaurus By Flary';\n    if (ComponentState === 'mount') {\n      document.title = ReturnedWord.length ? `${ReturnedWord[0].toUpperCase() + ReturnedWord.slice(1)} Synonyms, ${ReturnedWord} Antonyms | Flary Thesaurus` : initialTitle;\n    } else {\n      document.title = initialTitle;\n    }\n  };\n\n  useEffect(() => {\n    changeTitle('mount');\n    return () => {\n      changeTitle();\n    };\n  }, [WordsLoaded]);\n\n  const HandleKeyDownBackButtonQctrl = (event) => {\n    if (event.key === 'Q' && event.ctrlKey) {\n      HandleBackButtonClick();\n      history.push('/');\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  return (\n    <>\n      {WordsLoaded\n        ? (\n          <Box zIndex=\"9991\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={focusBorderColorGeneral} bg={bg} color={color} _hover={hover} onClick={HandleBackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      {(location.pathname === '/thesaurus')\n        ? (\n          <Box\n            background={!(CSS.supports('backdrop-filter', 'blur(5px)'))\n                  && fallbackBackground}\n            className=\"backdrop-blur\"\n            zIndex=\"9990\"\n            position=\"fixed\"\n            top=\"0\"\n            h=\"70px\"\n            w=\"full\"\n            borderRadius=\"0 0 20px 20px\"\n          />\n        )\n        // TODO Break tabs into its own compoonent\n        : <></>}\n      <Presets.TransitionFade>\n        <WordsTabs\n          AvailableWordType={AvailableWordType}\n          WordsLoaded={WordsLoaded}\n          getWords={getWords}\n          HandleBackButtonClick={HandleBackButtonClick}\n        />\n      </Presets.TransitionFade>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  ReturnedWord: words.ReturnedWord,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(ThesaurusPage));\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\n// eslint-disable-next-line no-unused-vars\nimport React, { lazy, Suspense } from 'react';\nimport { Presets } from 'react-component-transition';\n\nconst SearchPage = lazy(() => import('../pages/SearchPage/SearchPage'));\n\nfunction Routes({ Thesaurus, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <Suspense fallback={null}>\n          <SearchPage {...props} />\n        </Suspense>\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {Thesaurus()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  Button,\n  chakra,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst Help = () => {\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const KeyboardShortCutsColor = useColorModeValue('gray.600', 'gray.400');\n\n  return (\n    <Popover placement=\"auto\">\n      <PopoverTrigger>\n        <Button\n          _focus={focusBorderColorInput}\n          focusBorderColor={focusBorderColorInput}\n          boxShadow=\"lg\"\n          outline=\"none\"\n          outlineColor=\"initial\"\n          style={{ outlineStyle: 'none' }}\n          m=\"4\"\n          mr={[null, '40', null]}\n          rounded=\"xl\"\n        >\n          <QuestionIcon />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent width=\"max-content\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Keyboard Shortcuts</PopoverHeader>\n        <PopoverBody className=\"whitespace-pre-wrap text-left\">\n          <strong>Global</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Switch theme:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + X</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Home Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Focus on input field:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + A</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Thesaurus Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Go to Home Page:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + Q</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Search bar:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + E</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Switch word type:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Shift + 1 or 2 or 3</chakra.span>\n          </chakra.span>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Help;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  chakra, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\n\nconst ThemeButton = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const ThemeButtonRef = useRef(null);\n  const HandleKeyDownThemeIcon = (event) => {\n    if (event.key === 'X' && event.ctrlKey) {\n      event.preventDefault();\n      ThemeButtonRef.current.click();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownThemeIcon);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownThemeIcon);\n    };\n  }, []);\n\n  return (\n    <Button ref={ThemeButtonRef} _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={toggleColorMode}>\n      {colorMode === 'light'\n        ? <MoonIcon />\n        : (\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n          </chakra.svg>\n        )}\n    </Button>\n  );\n};\n\nexport default ThemeButton;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Box } from '@chakra-ui/react';\nimport React, { Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Presets } from 'react-component-transition';\nimport Help from '../help-button/help-button.component';\nimport ThemeButton from '../theme-button/theme-button.component';\n// const PopUpSearchBar = lazy(() => import('../popup-search-bar/popup-search-bar.component'));\n// import SearchButtonHeader from '../search-button/search-button.component';\n// import ErrorBoundary from '../error-boundary/error-boundary.component';\nconst SearchButtonHeader = lazy(() => import('../search-button/search-button.component'));\n\nconst NavBar = ({\n  onOpen2,\n  InputFiledSearchBarPopUp,\n  location,\n  WordsLoaded,\n}) => (\n  <Box\n    zIndex=\"9991\"\n    position=\"sticky\"\n    top=\"0\"\n    h=\"70px\"\n    display=\"flex\"\n    justifyContent=\"flex-end\"\n  >\n    {(location.pathname === '/thesaurus' && WordsLoaded)\n      ? (\n        <>\n          {/* <ErrorBoundary>\n            <Suspense fallback={null}>\n              <PopUpSearchBar\n                isOpen2={isOpen2}\n                onOpen2={onOpen2}\n                onClose2={onClose2}\n                onToggle2={onToggle2}\n                HandleBackButtonClick={HandleBackButtonClick}\n                getWords={getWords}\n                setWordsLoaded={setWordsLoaded}\n              />\n            </Suspense>\n          </ErrorBoundary> */}\n          <Presets.TransitionFade>\n\n            <Suspense fallback={null}>\n              <SearchButtonHeader\n                onOpen2={onOpen2}\n                WordsLoaded={WordsLoaded}\n                InputFiledSearchBarPopUp={InputFiledSearchBarPopUp}\n              />\n            </Suspense>\n          </Presets.TransitionFade>\n        </>\n      )\n      : <></>}\n    <ThemeButton />\n    <Help />\n  </Box>\n);\n\nexport default withRouter(NavBar);\n","/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\nimport { connect } from 'react-redux';\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport {\n  useState,\n  useEffect,\n  React,\n  lazy,\n  Suspense,\n  useRef,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\nimport ThesaurusPage from '../pages/ThesaurusPage/ThesaurusPage';\nimport Routes from '../routes/routes';\nimport NavBar from '../components/NavBar/NavBar';\nimport {\n  setWord,\n  setReturnedWord,\n  setShortDef,\n  setPartOfSpeech,\n  setWordExample,\n  setAnts,\n  setSyns,\n  setWordArray,\n  setNounArray,\n  setAdjArray,\n  setVerbArray,\n  setPhraseArray,\n  setAdverbArray,\n} from '../redux/words/words.action';\nimport ErrorBoundary from '../components/error-boundary/error-boundary.component';\n\nconst PopUpSearchBar = lazy(() => import('../components/popup-search-bar/popup-search-bar.component'));\n\nconst App = (props) => {\n  const {\n    location,\n    Word,\n    setWord,\n    setWordArray,\n    setNounArray,\n    WordArray,\n    setVerbArray,\n    setAdjArray,\n    setPhraseArray,\n    setAdverbArray,\n  } = props;\n  const [Error, setError] = useState(false);\n  const PathName = location.pathname;\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const {\n    isOpen: isOpen2,\n    onOpen: onOpen2,\n    onClose: onClose2,\n    onToggle: onToggle2,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [AvailableWordType, setAvailableWordType] = useState({});\n  const [IsInitialDone, setInitialDone] = useState(false);\n  const searchPop = useRef(null);\n\n  const getInputValue = (event) => {\n    setWord(event);\n  };\n\n  const setFilterArray = (wordObjects) => {\n    if (AvailableWordType.noun) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'noun');\n      setNounArray(filteredArray[0]);\n    }\n    if (AvailableWordType.verb) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'verb');\n      setVerbArray(filteredArray[0]);\n    }\n    if (AvailableWordType.adjective) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'adjective');\n      setAdjArray(filteredArray[0]);\n    }\n    if (AvailableWordType.phrase) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'phrase');\n      setPhraseArray(filteredArray[0]);\n    }\n    if (AvailableWordType.adverb) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'adverb');\n      setAdverbArray(filteredArray[0]);\n    }\n  };\n\n  useEffect(() => {\n    if (IsInitialDone) {\n      setFilterArray(WordArray);\n    }\n  }, [AvailableWordType]);\n\n  const PartOfSpeechChecker = (wordObjects) => {\n    try {\n      wordObjects.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType((prevState) => ({ ...prevState, noun: true }));\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'verb':\n            setAvailableWordType((prevState) => ({ ...prevState, verb: true }));\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'adjective':\n            setAvailableWordType((prevState) => ({ ...prevState, adjective: true }));\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'phrase':\n            setAvailableWordType((prevState) => ({ ...prevState, phrase: true }));\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'adverb':\n            setAvailableWordType((prevState) => ({ ...prevState, adverb: true }));\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const PassRequstedWords = (wordObjects) => {\n    try {\n      if (wordObjects[0].hwi) {\n        setWordArray(wordObjects);\n        // InitialWord(wordObjects);\n        PartOfSpeechChecker(wordObjects);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      console.log(error);\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = (word = Word) => {\n    if (word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(word)\n        .then((data) => PassRequstedWords(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const HandleSearchButtonClick = () => {\n    getWords();\n  };\n\n  const HandleBackButtonClick = (isSetword) => {\n    setWordsLoaded(false);\n    if (isSetword) {\n      setWord('');\n    }\n    setAvailableWordType({});\n    setNounArray([]);\n    setVerbArray([]);\n    setAdjArray([]);\n    setPhraseArray([]);\n    setAdverbArray([]);\n    setWordArray([]);\n  };\n\n  // Sets AvailableWordType to an empty object\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType({});\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  const ThesaurusStore = () => (\n    <ThesaurusPage\n      getWords={getWords}\n      AvailableWordType={AvailableWordType}\n      WordsLoaded={WordsLoaded}\n      Link={Link}\n      HandleBackButtonClick={HandleBackButtonClick}\n    />\n  );\n\n  const Thesaurus = () => {\n    let ThesaurusComponent;\n    if (Word.length) {\n      if (Error) {\n        ThesaurusComponent = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusComponent = <Redirect to=\"/\" />;\n    }\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusComponent;\n  };\n\n  // Clear all stored states if the pathName is not thesaurus\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && WordArray?.[0]?.fl?.length) {\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <>\n      {(PathName === '/thesaurus' && WordsLoaded)\n        ? (\n          <ErrorBoundary>\n            <Suspense fallback={null}>\n              <PopUpSearchBar\n                isOpen2={isOpen2}\n                onOpen2={onOpen2}\n                onClose2={onClose2}\n                onToggle2={onToggle2}\n                HandleBackButtonClick={HandleBackButtonClick}\n                getInputValue={getInputValue}\n                getWords={getWords}\n                setWordsLoaded={setWordsLoaded}\n                searchPop={searchPop}\n              />\n            </Suspense>\n          </ErrorBoundary>\n        )\n        : <></>}\n      <NavBar\n        PathName={PathName}\n        onOpen2={onOpen2}\n        WordsLoaded={WordsLoaded}\n        searchPop={searchPop}\n      />\n      <Routes\n        getWords={getWords}\n        Thesaurus={Thesaurus}\n        WordFindType={WordFindType}\n        WordFind={WordFind}\n        isOpen={isOpen}\n        getInputValue={getInputValue}\n        HandleSearchButtonClick={HandleSearchButtonClick}\n        Link={Link}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  ReturnedWord: words.ReturnedWord,\n  ShortDef: words.ShortDef,\n  PartOfSpeech: words.PartOfSpeech,\n  WordExample: words.WordExample,\n  Syns: words.Syns,\n  Ants: words.Ants,\n  WordArray: words.WordArray,\n  NounArray: words.NounArray,\n  VerbArray: words.VerbArray,\n  AdjArray: words.AdjArray,\n  PhraseArray: words.PhraseArray,\n  AdverbArray: words.AdverbArray,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // eslint-disable-next-line no-undef\n  setWord: (word) => dispatch(setWord(word)),\n  setReturnedWord: (word) => dispatch(setReturnedWord(word)),\n  setShortDef: (word) => dispatch(setShortDef(word)),\n  setPartOfSpeech: (word) => dispatch(setPartOfSpeech(word)),\n  setWordExample: (word) => dispatch(setWordExample(word)),\n  setAnts: (word) => dispatch(setAnts(word)),\n  setSyns: (word) => dispatch(setSyns(word)),\n  setWordArray: (word) => dispatch(setWordArray(word)),\n  setNounArray: (word) => dispatch(setNounArray(word)),\n  setVerbArray: (word) => dispatch(setVerbArray(word)),\n  setAdjArray: (word) => dispatch(setAdjArray(word)),\n  setPhraseArray: (word) => dispatch(setPhraseArray(word)),\n  setAdverbArray: (word) => dispatch(setAdverbArray(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n","import { wordsTypes } from './words.types';\n\n// const [Error, setError] = useState(false);\n// const PathName = location.pathname;\n// const {\n//   isOpen,\n//   onOpen,\n// } = useDisclosure();\n// const {\n//   isOpen: isOpen2,\n//   onOpen: onOpen2,\n//   onClose: onClose2,\n//   onToggle: onToggle2,\n// } = useDisclosure();\n// const [WordFind, setWordFind] = useState(false);\n// const [WordFindType, setWordFindType] = useState('');\n// const [WordsLoaded, setWordsLoaded] = useState(false);\n// const [WordArray, setWordArray] = useState([]);\n// const [AvailableWordType, setAvailableWordType] = useState({});\n\nconst INITIAL_STATE = {\n  Word: '',\n  ReturnedWord: '',\n  ShortDef: '',\n  PartOfSpeech: '',\n  WordExample: '',\n  Syns: [],\n  Ants: [],\n  WordArray: [],\n  NounArray: [],\n  VerbArray: [],\n  AdjArray: [],\n  PhraseArray: [],\n  AdverbArray: [],\n};\n\nconst wordsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case wordsTypes.SET_NOUN_ARRAY:\n      return {\n        ...state,\n        NounArray: action.payload,\n      };\n    case wordsTypes.SET_ADVERB_ARRAY:\n      return {\n        ...state,\n        AdverbArray: action.payload,\n      };\n    case wordsTypes.SET_PHRASE_ARRAY:\n      return {\n        ...state,\n        PhraseArray: action.payload,\n      };\n    case wordsTypes.SET_VERB_ARRAY:\n      return {\n        ...state,\n        VerbArray: action.payload,\n      };\n    case wordsTypes.SET_ADJ_ARRAY:\n      return {\n        ...state,\n        AdjArray: action.payload,\n      };\n    case wordsTypes.SET_WORD:\n      return {\n        ...state,\n        Word: action.payload,\n      };\n    case wordsTypes.SET_RETURNED_WORD:\n      return {\n        ...state,\n        ReturnedWord: action.payload,\n      };\n    case wordsTypes.SET_SHORTDEF:\n      return {\n        ...state,\n        ShortDef: action.payload,\n      };\n    case wordsTypes.SET_PART_OF_SPEECH:\n      return {\n        ...state,\n        PartOfSpeech: action.payload,\n      };\n    case wordsTypes.SET_WORD_EXAMPLE:\n      return {\n        ...state,\n        WordExample: action.payload,\n      };\n    case wordsTypes.SET_SYNS:\n      return {\n        ...state,\n        Syns: action.payload,\n      };\n    case wordsTypes.SET_ANTS:\n      return {\n        ...state,\n        Ants: action.payload,\n      };\n    case wordsTypes.SET_WORD_ARRAY:\n      return {\n        ...state,\n        WordArray: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default wordsReducer;\n","import { combineReducers } from 'redux';\nimport wordsReducer from './words/words.reducer';\n\nexport default combineReducers({\n  words: wordsReducer,\n});\n","/* eslint-disable no-unused-vars */\nimport { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\n\nconst middleWare = [logger];\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport store from './redux/store';\nimport theme from './theme';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ChakraProvider>\n        <Router basename=\"/flary\">\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <App />\n        </Router>\n      </ChakraProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n","/* eslint-disable import/prefer-default-export */\nimport { wordsTypes } from './words.types';\n\nexport const setPhraseArray = (word) => ({\n  type: wordsTypes.SET_PHRASE_ARRAY,\n  payload: word,\n});\n\nexport const setAdverbArray = (word) => ({\n  type: wordsTypes.SET_ADVERB_ARRAY,\n  payload: word,\n});\n\nexport const setNounArray = (word) => ({\n  type: wordsTypes.SET_NOUN_ARRAY,\n  payload: word,\n});\n\nexport const setVerbArray = (word) => ({\n  type: wordsTypes.SET_VERB_ARRAY,\n  payload: word,\n});\n\nexport const setAdjArray = (word) => ({\n  type: wordsTypes.SET_ADJ_ARRAY,\n  payload: word,\n});\n\nexport const setWord = (word) => ({\n  type: wordsTypes.SET_WORD,\n  payload: word,\n});\n\nexport const setReturnedWord = (word) => ({\n  type: wordsTypes.SET_RETURNED_WORD,\n  payload: word,\n});\n\nexport const setShortDef = (word) => ({\n  type: wordsTypes.SET_SHORTDEF,\n  payload: word,\n});\n\nexport const setPartOfSpeech = (word) => ({\n  type: wordsTypes.SET_PART_OF_SPEECH,\n  payload: word,\n});\n\nexport const setWordExample = (word) => ({\n  type: wordsTypes.SET_WORD_EXAMPLE,\n  payload: word,\n});\n\nexport const setAnts = (word) => ({\n  type: wordsTypes.SET_ANTS,\n  payload: word,\n});\n\nexport const setSyns = (word) => ({\n  type: wordsTypes.SET_SYNS,\n  payload: word,\n});\n\nexport const setWordArray = (word) => ({\n  type: wordsTypes.SET_WORD_ARRAY,\n  payload: word,\n});\n"],"sourceRoot":""}