{"version":3,"sources":["../../../src/__utils.ts","../../../src/form-control.tsx","../../../src/input.tsx","../../../src/use-form-control.ts","../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js","../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js","../node_modules/framer-motion/dist/es/utils/use-force-update.js","../../../src/use-media-query.ts","../../../src/icon-button.tsx","../../../src/fade.tsx","../../../src/Info.tsx","components/search-input/search-input.component.jsx","pages/SearchPage/SearchPage.jsx"],"names":["EASINGS","ease","easeIn","easeOut","easeInOut","createContext","strict","name","FormControl","forwardRef","styles","useMultiStyleConfig","props","id","isReadOnly","uuid","useId","idProp","labelId","feedbackId","helpTextId","useBoolean","isRequired","isInvalid","isDisabled","isFocused","onFocus","setFocus","onBlur","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","htmlProps","useFormControlProvider","omitThemingProps","_className","cx","value","context","role","ref","className","__css","width","position","FormHelperText","field","useFormControlContext","useStyles","useSafeLayoutEffect","helperText","Input","input","describedBy","ariaDescribedBy","omit","disabled","readOnly","required","ariaAttr","callAllHandlers","useFormControl","presenceId","getPresenceId","PresenceChild","_a","children","initial","isPresent","onExitComplete","custom","presenceAffectsLayout","presenceChildren","useConstant","newChildrenMap","useMemo","childId","set","allComplete","forEach","isComplete","register","delete","undefined","_","key","useEffect","size","createElement","PresenceContext","Provider","Map","getChildKey","child","AnimatePresence","_b","exitBeforeEnter","_c","forceRender","unloadingRef","useRef","__read","useState","forcedRenderCount","setForcedRenderCount","useUnmountEffect","current","useCallback","useForceUpdate","layoutContext","useContext","SharedLayoutContext","isSharedLayout","forceUpdate","isInitialRender","filteredChildren","filtered","Children","isValidElement","push","onlyElements","presentChildren","allChildren","exiting","Set","updateChildLookup","Fragment","map","childrenToRender","__spread","presentKeys","targetKeys","numPresent","length","i","indexOf","add","get","insertionIndex","splice","removeIndex","findIndex","presentChild","has","cloneElement","isBrowser","React","IconButton","ariaLabel","element","icon","_children","focusable","padding","borderRadius","isRound","aria-label","fadeConfig","animate","exit","variants","opacity","transition","duration","enter","Fade","in","shouldExpand","unmountOnExit","isOpen","motion","InfoIcon","createIcon","d","connect","Word","words","dispatch","setWord","word","withRouter","getWords","history","focusBorderColorInput","useColorModeValue","WordValueSP","setWordSP","inputField","HandleFocusOnInputEnterCtrlShift","event","ctrlKey","preventDefault","focus","document","addEventListener","removeEventListener","focusBorderColor","onKeyPress","which","variant","w","rounded","mr","onChange","target","paddingY","placeholder","paddingLeft","MainContainer","tw","div","WordFindType","WordFind","getInputValue","HandleSearchButtonClick","query","queries","Array","isSupported","window","mediaQueryList","listenerList","listener","setMatches","prev","index","mediaQuery","useMediaQuery","isMoreThan420px","fontColorDarkWhiteSmallWords","hover","color","fontColorMain","focusBorderColorGeneral","boxShadow","display","alignContent","justifyContent","mt","mb","fontFamily","fontSize","whiteSpace","placement","textDecoration","_hover","cursor","outline","outlineColor","style","outlineStyle","_focus","ml","h","background","fontWeight","sm","md","Search","left","top","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","height","xmlns","span","bgColor","as","ReachLink","onClick","to"],"mappings":"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","file":"static/js/4.2c24e134.chunk.js","sourcesContent":["import { Variant } from \"framer-motion\"\n\nexport type MotionVariants<T extends string> = Record<T, Variant>\n\nexport const EASINGS = {\n  ease: [0.25, 0.1, 0.25, 1],\n  easeIn: [0.4, 0, 1, 1],\n  easeOut: [0, 0, 0.2, 1],\n  easeInOut: [0.4, 0, 0.2, 1],\n}\n","import { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype ControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<ControlContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useBoolean()\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useBoolean()\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  }\n\n  return context\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useFormControlProvider(ownProps)\n\n  const _className = cx(\"chakra-form-control\", props.className)\n\n  return (\n    <FormControlProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          role=\"group\"\n          ref={ref}\n          {...htmlProps}\n          className={_className}\n          __css={{\n            width: \"100%\",\n            position: \"relative\",\n          }}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n\n  /**\n   * Notify the field context when the help text is rendered on screen,\n   * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n   */\n  useSafeLayoutEffect(() => {\n    field?.setHasHelpText.on()\n    return () => field?.setHasHelpText.off()\n  }, [])\n\n  const _className = cx(\"chakra-form__helper-text\", props.className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      __css={styles.helperText}\n      {...props}\n      className={_className}\n      id={props.id ?? field?.helpTextId}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   *  please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nexport const Input = forwardRef<InputProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const ownProps = omitThemingProps(props)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nif (__DEV__) {\n  Input.displayName = \"Input\"\n}\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import { ariaAttr, callAllHandlers, omit } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n  const describedBy: string[] = []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field.feedbackId)\n  if (field?.hasHelpText) describedBy.push(field.helpTextId)\n  const ariaDescribedBy = describedBy.join(\" \")\n\n  const cleanProps = omit(props, [\n    \"isInvalid\",\n    \"isDisabled\",\n    \"isReadOnly\",\n    \"isRequired\",\n  ])\n\n  return {\n    ...cleanProps,\n    id: props.id ?? field?.id,\n    disabled: props.disabled || props.isDisabled || field?.isDisabled,\n    readOnly: props.readOnly || props.isReadOnly || field?.isReadOnly,\n    required: props.required || props.isRequired || field?.isRequired,\n    \"aria-invalid\": ariaAttr(props.isInvalid || field?.isInvalid),\n    \"aria-required\": ariaAttr(props.isRequired || field?.isRequired),\n    \"aria-readonly\": ariaAttr(props.isReadOnly || field?.isReadOnly),\n    \"aria-describedby\": ariaDescribedBy || undefined,\n    onFocus: callAllHandlers(field?.onFocus, props.onFocus),\n    onBlur: callAllHandlers(field?.onBlur, props.onBlur),\n  }\n}\n","import { useMemo, useEffect, createElement } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\nvar presenceId = 0;\nfunction getPresenceId() {\n    var id = presenceId;\n    presenceId++;\n    return id;\n}\nvar PresenceChild = function (_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useConstant(getPresenceId);\n    var context = useMemo(function () { return ({\n        id: id,\n        initial: initial,\n        isPresent: isPresent,\n        custom: custom,\n        onExitComplete: function (childId) {\n            presenceChildren.set(childId, true);\n            var allComplete = true;\n            presenceChildren.forEach(function (isComplete) {\n                if (!isComplete)\n                    allComplete = false;\n            });\n            allComplete && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n        },\n        register: function (childId) {\n            presenceChildren.set(childId, false);\n            return function () { return presenceChildren.delete(childId); };\n        },\n    }); }, \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(function () {\n        presenceChildren.forEach(function (_, key) { return presenceChildren.set(key, false); });\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    useEffect(function () {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [isPresent]);\n    return (createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useContext, useRef, createElement, Fragment, cloneElement, Children, isValidElement } from 'react';\nimport { __spread } from 'tslib';\nimport { SharedLayoutContext, isSharedLayout } from '../../context/SharedLayoutContext.js';\nimport { useForceUpdate } from '../../utils/use-force-update.js';\nimport { PresenceChild } from './PresenceChild.js';\n\nfunction getChildKey(child) {\n    return child.key || \"\";\n}\nfunction updateChildLookup(children, allChildren) {\n    var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n            if (seenChildren.has(key)) {\n                console.warn(\"Children of AnimatePresence require unique keys. \\\"\" + key + \"\\\" is a duplicate.\");\n            }\n            seenChildren.add(key);\n        }\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * @library\n *\n * Any `Frame` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * // As items are added and removed from `items`\n * export function Items({ items }) {\n *   return (\n *     <AnimatePresence>\n *       {items.map(item => (\n *         <Frame\n *           key={item.id}\n *           initial={{ opacity: 0 }}\n *           animate={{ opacity: 1 }}\n *           exit={{ opacity: 0 }}\n *         />\n *       ))}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * @motion\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var forceRender = useForceUpdate();\n    var layoutContext = useContext(SharedLayoutContext);\n    if (isSharedLayout(layoutContext)) {\n        forceRender = layoutContext.forceUpdate;\n    }\n    var isInitialRender = useRef(true);\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(filteredChildren);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map())\n        .current;\n    // A living record of all currently exiting components.\n    var exiting = useRef(new Set()).current;\n    updateChildLookup(filteredChildren, allChildren);\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    if (isInitialRender.current) {\n        isInitialRender.current = false;\n        return (createElement(Fragment, null, filteredChildren.map(function (child) { return (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    var childrenToRender = __spread(filteredChildren);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n        else {\n            // In case this key has re-entered, remove from the exiting list\n            exiting.delete(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    presentChildren.current = childrenToRender;\n    if (process.env.NODE_ENV !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (createElement(Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n","import { useCallback, useRef, useState } from 'react';\nimport { __read } from 'tslib';\nimport { useUnmountEffect } from './use-unmount-effect.js';\n\nfunction useForceUpdate() {\n    var unloadingRef = useRef(false);\n    var _a = __read(useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    useUnmountEffect(function () { return (unloadingRef.current = true); });\n    return useCallback(function () {\n        !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n}\n\nexport { useForceUpdate };\n","import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\n\nconst useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\nexport function useMediaQuery(query: string | string[]): boolean[] {\n  const queries = Array.isArray(query) ? query : [query]\n  const isSupported = isBrowser && \"matchMedia\" in window\n\n  const [matches, setMatches] = React.useState(\n    queries.map((query) =>\n      isSupported ? !!window.matchMedia(query).matches : false,\n    ),\n  )\n\n  useSafeLayoutEffect(() => {\n    if (!isSupported) return undefined\n\n    const mediaQueryList = queries.map((query) => window.matchMedia(query))\n\n    const listenerList = mediaQueryList.map((mediaQuery, index) => {\n      const listener = () =>\n        setMatches((prev) =>\n          prev.map((prevValue, idx) =>\n            index === idx ? !!mediaQuery.matches : prevValue,\n          ),\n        )\n\n      mediaQuery.addListener(listener)\n\n      return listener\n    })\n\n    return () => {\n      mediaQueryList.forEach((mediaQuery, index) => {\n        mediaQuery.removeListener(listenerList[index])\n      })\n    }\n  }, [query])\n\n  return matches\n}\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype Omitted =\n  | \"leftIcon\"\n  | \"isFullWidth\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, Omitted> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = React.isValidElement(element)\n      ? React.cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : \"md\"}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nif (__DEV__) {\n  IconButton.displayName = \"IconButton\"\n}\n","import { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype FadeMotionVariant = MotionVariants<\"enter\" | \"exit\">\n\nconst variants: FadeMotionVariant = {\n  exit: {\n    opacity: 0,\n    transition: {\n      duration: 0.1,\n      ease: EASINGS.easeOut,\n    },\n  },\n  enter: {\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n      ease: EASINGS.easeIn,\n    },\n  },\n}\n\nexport const fadeConfig: Omit<HTMLMotionProps<any>, \"transition\"> = {\n  initial: \"exit\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants,\n}\n\nexport interface FadeProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in?: boolean\n}\n\nexport const Fade = React.forwardRef<HTMLDivElement, FadeProps>(\n  (props, ref) => {\n    const { unmountOnExit, in: isOpen, className, ...rest } = props\n    const shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true\n\n    return (\n      <AnimatePresence>\n        {shouldExpand && (\n          <motion.div\n            ref={ref}\n            className={cx(\"chakra-fade\", className)}\n            {...fadeConfig}\n            animate={isOpen || unmountOnExit ? \"enter\" : \"exit\"}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  Fade.displayName = \"Fade\"\n}\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const InfoIcon = createIcon({\n  d:\n    \"M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z\",\n})\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Input, useColorModeValue } from '@chakra-ui/react';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setWord } from '../../redux/words/words.action';\n\nconst SearchInput = ({\n  // eslint-disable-next-line no-shadow\n  setWord, getWords, history, Word,\n}) => {\n  const focusBorderColorInput = useColorModeValue('#3B82F6',\n    '#ffa500');\n  const [WordValueSP, setWordSP] = useState('');\n  const inputField = useRef(null);\n\n  const HandleFocusOnInputEnterCtrlShift = (event) => {\n    if (event.key === 'A' && event.ctrlKey) {\n      event.preventDefault();\n      inputField.current.focus();\n    }\n  };\n\n  const onBlur = () => {\n    if (WordValueSP.length) {\n      setWord(WordValueSP);\n    }\n  };\n\n  const HandleEnterKey = (event) => {\n    if (event.which === 13) {\n      setWord(WordValueSP);\n      getWords(WordValueSP);\n      history.push('/thesaurus');\n    }\n  };\n\n  const onInputChange = (event) => {\n    setWordSP(event.target.value);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    return () => {\n      document.removeEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    };\n  });\n\n  return (\n    <Input ref={inputField} focusBorderColor={focusBorderColorInput} onKeyPress={HandleEnterKey} variant=\"filled\" w={['18rem', 'xs', null]} rounded=\"xl\" mr={[null, null, '2rem']} value={WordValueSP} onBlur={onBlur} onChange={onInputChange} paddingY=\"5\" placeholder=\"Search for words\" paddingLeft=\"9\" />\n  );\n};\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setWord: (word) => dispatch(setWord(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SearchInput));\n","/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport { withRouter, Link as ReachLink } from 'react-router-dom';\nimport React, {\n  useEffect,\n} from 'react';\nimport {\n  Heading,\n  Box,\n  chakra,\n  Fade,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  useMediaQuery,\n  Button,\n} from '@chakra-ui/react';\nimport { InfoIcon, SearchIcon } from '@chakra-ui/icons';\nimport { connect } from 'react-redux';\nimport SearchInput from '../../components/search-input/search-input.component';\n\nconst MainContainer = tw.div`\n   text-center\n   mt-40\n   sm:mt-0\n   md2:mt-38\n   lg:mt-32\n`;\n\nconst SearchPage = ({\n  WordFindType, WordFind, isOpen,\n  getInputValue, HandleSearchButtonClick, getWords, Word,\n}) => {\n  const [isMoreThan420px] = useMediaQuery('(max-width: 420px)');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n    <MainContainer>\n      <Box display=\"flex\" alignContent=\"center\" justifyContent=\"center\" mt={['12', null, '15', '0', '32']} mb={['5', null, '12']}>\n        <Heading fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">\n          Words to be\n          {(isMoreThan420px) ? '\\u00A0' : ' thesaurused'}\n        </Heading>\n        <Popover placement=\"auto-end\" display=\"inline-block\">\n          <PopoverTrigger>\n            {(isMoreThan420px)\n              ? <Heading textDecoration={`underline wavy ${fontColorDarkWhiteSmallWords}`} _hover={[null, null, hover]} cursor=\"pointer\" fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">thesaurused</Heading>\n              : <IconButton variant=\"ghost\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} ml=\"2\" size=\"sm\" icon={<InfoIcon w=\"5\" h=\"5\" />} />}\n          </PopoverTrigger>\n          <PopoverContent outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Thesaurus</PopoverHeader>\n            <PopoverBody>\n              A thesaurus (plural thesauri or thesauruses) or synonym dictionary\n              is a reference work for finding synonyms and sometimes antonyms of words.\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      </Box>\n      <Box display={{ sm: 'flex', md: 'flex' }} justifyContent={[null, 'center', null]}>\n        <Box>\n          <Box justifyContent=\"center\" display=\"flex\" w={['100%', 'xs', null]}>\n            <Box w={['18rem', 'xs', null]} position=\"relative\">\n              <SearchInput getInputValue={getInputValue} getWords={getWords} />\n              <SearchIcon color=\"gray.300\" position=\"absolute\" left=\"3\" top=\"3.5\" />\n            </Box>\n          </Box>\n          {WordFind\n                && (\n                <Fade in={isOpen}>\n                  <Box mt=\"1\" display=\"flex\" justifyContent={['center', 'flex-start', null]} transition=\"ease\">\n                    <chakra.svg mt=\"1\" ml={[null, '4', null]} outline=\"none\" stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\" />\n                    </chakra.svg>\n                    <chakra.span ml=\"1\" mb={['-1', 0, 0]} color=\"red.400\">\n                      {(WordFindType === 'no response' ? 'Word not found! (Misspelled)' : ((WordFindType === 'no input') ? 'Input is empty, type a word!' : 'The word is not in the thesaurus!'))}\n                    </chakra.span>\n                  </Box>\n                </Fade>\n                )}\n        </Box>\n\n        {\n          !isMoreThan420px && (\n            <Box ml={[0, 6, null]} mt={[5, 1, 0]}>\n              <Button\n                _hover={{ background: 'gray.200' }}\n                _focus={focusBorderColorGeneral}\n                color=\"gray.800\"\n                bgColor=\"gray.100\"\n                as={ReachLink}\n                onClick={HandleSearchButtonClick}\n                to=\"/thesaurus\"\n                borderRadius=\"xl\"\n              >\n                Search\n              </Button>\n            </Box>\n          )\n        }\n      </Box>\n    </MainContainer>\n  );\n};\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(SearchPage));\n"],"sourceRoot":""}