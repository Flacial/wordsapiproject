{"version":3,"sources":["components/RequestPage/Functions/getRequest/getRequest.js","components/RequestPage/SearchPage/SearchPage.js","components/ResponsePage/ThesaurusPage/ThesaurusPage.js","components/ResponsePage/Loading/Loading.js","components/NavBar/NavBar.js","App.js","index.js"],"names":["getRequest","word","a","fetch","Response","Data","json","MainContainer","tw","div","SearchPage","input","getInputValue","getButtonClick","Link","getPathName","location","useLocation","useEffect","pathname","fontFamily","fontStyle","fontSize","mt","mb","whiteSpace","display","md","justifyContent","variant","w","rounded","mr","onChange","placeholder","onClick","className","to","ThesaurusHeader","h1","WordTypeContainer","styled","WordAndType","TheWord","TheType","span","SynAntHeader","h2","SynAntContainer","Example","Text","ThesaurusPage","BackButtonClick","ReturnedWord","PartOfSpeech","ShortDef","ReactHtmlParser","WordExample","LoadingPage","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","height","width","xmlns","d","NavBar","useColorMode","colorMode","toggleColorMode","boxShadow","m","App","props","useState","Word","setWord","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","Error","setError","PathName","setPathName","sendRequstedWord","length","index","fl","hw","hwi","shortdef","WordExampleSlicedIt","def","sseq","dt","t","replace","RequestedThesaurus","setTimeout","alert","error","console","log","Path","basename","exact","path","event","target","value","then","response","theme","extendTheme","fonts","heading","body","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c05a098.chunk.js","sourcesContent":["export const getRequest = async (word) => {\n    const Response = await fetch(`https://dictionaryapi.com/api/v3/references/ithesaurus/json/${word}?key=c48ccf67-004d-4d61-bf2b-54e83578866c`)\n    const Data = Response.json()\n    return Data\n}","import tw from 'tailwind-styled-components';\nimport {useLocation} from 'react-router-dom';\nimport { useEffect } from 'react'\nimport { Heading, Input, useColorMode, Button, Box } from '@chakra-ui/react'\nexport const MainContainer = tw.div`\n   text-center\n   m-auto\n`\n\nexport const WordInput = tw.input`\n  rounded-full\n  px-10\n  text-center\n  outline-none\n  focus:ring-4 focus:ring-green-500\n  lg:mr-3\n`\nconst LinkCSS = `\nbg-gray-100\ntext-gray-800\npy-1\npx-3\nrounded-xl\nshadow-2xl\ninline-block\nmd:py-1\nmd:h-8\nmd:mt-1\nmd:px-4\n\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-400\nhover:bg-gray-200\ntransition duration-200 ease-in-out\n`\nconst SearchPage = ({ getInputValue, getButtonClick, Link, getPathName }) => {\n  const location = useLocation()\n  useEffect(() => {\n    getPathName(location.pathname)\n  })\n\n    return (\n        <MainContainer>\n              <Heading fontFamily='Playfair Display' fontStyle='italic' fontSize={['3xl', '5xl', '6xl']} mt={['12', null, '32']} mb={['5', null, '12']} whiteSpace='nowrap' >Words to be thesaurused</Heading>\n              <Box display={{ md: \"flex\"}} justifyContent={[null, 'center', null]} >\n              <Box>\n                <Input variant='filled' w={['16rem', 'xs', null]} rounded='xl' mr={[null, null, '2rem']} onChange={getInputValue} placeholder=\"Type your word\"/>\n              </Box>\n              <Box mt={[5, 5, 0]} >\n                    <Link onClick={getButtonClick} className={LinkCSS}\n                        to='/thesaurus'>\n                      Search\n                    </Link>\n\n              </Box>\n              </Box>\n            </MainContainer>\n    )\n}\n\nexport default SearchPage;\n","import { Fragment, useEffect } from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled from 'styled-components'\nimport tw from 'tailwind-styled-components';\nimport { useColorModeValue } from '@chakra-ui/react';\n\nconst ThesaurusHeader = tw.h1`\n    text-blue-500   \n    italic\n    font-serif\n    text-3xl\n    font-bold\n    inline-block\n`\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\nbackground: linear-gradient(145deg, #ffffff, #e6e6e6);\nbox-shadow:  5px 5px 10px #ededed,\n             -5px -5px 10px #ffffff;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 5px;\nmargin: 3em;\nword-spacing: 0;\n`\n\nconst WordAndType = tw.div`\n    mt-5\n`\n\nconst TheWord = tw.h1`\n    text-5xl\n    text-gray-700\n    font-serif\n    font-bold\n    inline-block\n`\n\nconst TheType = tw.span`\n    text-blue-500\n    text-xl\n    font-bold\n    font-serif\n`\nconst SynAntHeader = tw.h2`\n    text-blue-600\n    font-bold\n    text-2xl\n    mt-3\n`\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`\n\nconst Example = tw.span`\n    text-blue-500\n    text-xl\n    block\n`\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`\n\nconst LinkCSS = `\nbg-gray-100\ntext-gray-800\npy-2\npx-4\nrounded-xl\nshadow-xl\ninline-block\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-400\nhover:bg-gray-300\ntransition duration-500 ease-in-out\nm-4\n`\n\nexport const ThesaurusPage = (\n    {\n        Link,\n        BackButtonClick,\n        ReturnedWord,\n        PartOfSpeech,\n        ShortDef,\n        ReactHtmlParser,\n        WordExample,\n        getPathName\n}) => {\n  \n  const location = useLocation()\n  useEffect(() => {\n    getPathName(location.pathname)\n\n  })\n    return (\n            <Fragment>\n              <div className='absolute top-0' >\n              <Link onClick={BackButtonClick} className={LinkCSS} to='/'>\n                Back to search\n              </Link>\n              </div>\n            <WordTypeContainer>\n            <ThesaurusHeader>\n              Thesaurus\n            </ThesaurusHeader>\n            <WordAndType>\n              <TheWord>\n                {ReturnedWord}\n              </TheWord>\n              <TheType>\n                {PartOfSpeech}\n              </TheType>\n            </WordAndType>\n            <SynAntHeader>\n              Synonyms & Antonyms of <em>{ReturnedWord}</em>\n            </SynAntHeader>\n            <SynAntContainer>\n              <span className='font-bold text-gray-700 text-xl absolute left-0 top-0'>1</span>\n              <Text>{ShortDef}</Text>\n              <Example> <strong>//</strong> {ReactHtmlParser(WordExample)} </Example>\n            </SynAntContainer>\n            </WordTypeContainer>\n            </Fragment>\n    )\n}","import { Box } from '@chakra-ui/react'\n\nexport const LoadingPage = () => {\n    return (\n        <Box display='flex' justifyContent='center'>\n            <svg className='animate-spin mt-28 md:mt-42 lg:mt-48' stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"5em\" width=\"5em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M340.896,58.488C303.18,20.771,253.033,0,199.694,0C146.353,0,96.207,20.771,58.491,58.488\n\t\tC20.772,96.206,0,146.354,0,199.693c0,53.342,20.772,103.489,58.491,141.206c37.716,37.717,87.863,58.488,141.203,58.488\n\t\tc53.337,0,103.486-20.771,141.203-58.488c37.719-37.718,58.49-87.865,58.49-141.206C399.387,146.355,378.615,96.207,340.896,58.488\n\t\tz M199.694,77.457c67.402,0,122.236,54.835,122.236,122.236s-54.834,122.236-122.236,122.236S77.457,267.094,77.457,199.693\n\t\tS132.292,77.457,199.694,77.457z M328.061,328.062c-34.289,34.287-79.877,53.17-128.367,53.17\n\t\tc-48.491,0-94.079-18.883-128.367-53.17c-34.289-34.287-53.173-79.877-53.173-128.37h41.148\n\t\tc0,77.411,62.979,140.391,140.392,140.391c77.412,0,140.39-62.979,140.39-140.391c0-77.412-62.979-140.391-140.39-140.391\n\t\tc-4.594,0-9.134,0.229-13.615,0.662v-41.31c4.508-0.332,9.049-0.5,13.615-0.5c48.49,0,94.078,18.883,128.367,53.171\n\t\tc34.289,34.289,53.172,79.878,53.172,128.368C381.232,248.186,362.35,293.775,328.061,328.062z\">\n            </path>\n            </svg> \n        </Box>\n    )\n}\n","import { Box, Button, useColorMode } from '@chakra-ui/react';\n\nconst NavBar = () => {\n\n    const { colorMode, toggleColorMode } = useColorMode()\n    return (\n    <Box display='flex' justifyContent='flex-end' >\n    <Button boxShadow='lg' m='4' rounded='2xl' onClick={toggleColorMode}>\n      {colorMode === \"light\" \n      ?\n      <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"m224.023438 448.03125c85.714843.902344 164.011718-48.488281 200.117187-126.230469-22.722656 9.914063-47.332031 14.769531-72.117187 14.230469-97.15625-.109375-175.890626-78.84375-176-176 .972656-65.71875 37.234374-125.832031 94.910156-157.351562-15.554688-1.980469-31.230469-2.867188-46.910156-2.648438-123.714844 0-224.0000005 100.289062-224.0000005 224 0 123.714844 100.2851565 224 224.0000005 224zm0 0\">\n      </path>\n      </svg> \n      :\n      <svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M256,0C115.39,0,0,115.39,0,256s115.39,256,256,256s256-115.39,256-256S396.61,0,256,0z\">\n      </path>\n      </svg> \n      }\n    </Button>\n    </Box>\n    )\n}\n\nexport default NavBar;","import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link, \n  Redirect,\n} from 'react-router-dom'\nimport ReactHtmlParser from 'react-html-parser';\nimport { useState, useEffect } from 'react';\nimport { getRequest } from './components/RequestPage/Functions/getRequest/getRequest';\nimport SearchPage from './components/RequestPage/SearchPage/SearchPage';\nimport { ThesaurusPage } from './components/ResponsePage/ThesaurusPage/ThesaurusPage';\nimport { LoadingPage } from './components/ResponsePage/Loading/Loading';\nimport NavBar from './components/NavBar/NavBar';\n\nconst  App = (props) => {\n  const [ Word, setWord ] = useState('')\n  const [ ReturnedWord, setReturnedWord] = useState('')\n  const [ ShortDef, setShortDef ] = useState('')\n  const [ PartOfSpeech, setPartOfSpeech ] = useState('')\n  const [ WordExample, setWordExample ] = useState('')\n  const [ Error, setError ] = useState(false)\n  const [ PathName, setPathName ] = useState('')\n\n  const getInputValue = (event) => {\n    setWord(event.target.value)\n  }\n  \n  const getButtonClick = () => {\n    if (Word === '') {\n          alert('Type a word please')\n        } \n    getRequest(Word)\n    .then(response => sendRequstedWord(response))\n  }\n\n  const BackButtonClick = () => {\n    setWord('')\n    setReturnedWord('')\n    setPartOfSpeech('')\n    setShortDef('')\n    setWordExample('')\n  }\n\n  const RequestedThesaurus = (word, index) => {\n    const { fl, hwi: {hw},  shortdef , def: [{sseq: dt}] } = word[index]\n    const WordExample = dt[0][0][1].dt[1][1][0].t\n    const WordExampleSlicedIt = WordExample.replace('{it}', '<em>').replace('{/it}', '</em>')\n    setReturnedWord(hw)\n    setPartOfSpeech(fl)\n    setShortDef(shortdef[0])\n    setWordExample(WordExampleSlicedIt)\n  }\n\n  const sendRequstedWord = (word) => {\n    try {\n          if (word.length >= 1) {\n            RequestedThesaurus(word, 0)\n          } else if (!word[0]) {\n            setError(true)\n            setTimeout(() => {\n              alert('Word not found')\n            }, 500);\n          }\n    }\n    catch (error) {\n      console.log(error)\n    }\n  }\n\n  const HomeComponent = () => {\n    let HomeCondition;\n    if (Word.length) {\n        if (ReturnedWord.length) {\n            HomeCondition = <ThesaurusPage Word={Word} Link={Link} BackButtonClick={BackButtonClick} ReturnedWord={ReturnedWord} PartOfSpeech={PartOfSpeech} ShortDef={ShortDef}\n            ReactHtmlParser={ReactHtmlParser} WordExample={WordExample} getPathName={getPathName}/>\n        } else if (Error) {\n          HomeCondition = <Redirect to='/' />\n        } else {\n          HomeCondition = <LoadingPage/>\n        }\n  } else {\n    HomeCondition = <Redirect to='/' />\n  }\n    return HomeCondition\n  }\n\n  const getPathName = (Path) => {\n    setPathName(Path)\n  }\n\n  useEffect(() => {\n    if (PathName === '/' && ShortDef.length) {\n      BackButtonClick()\n    }\n  })\n\n\n  return (\n    <Router basename='/wordsapiproject' >\n    <NavBar/>\n      <Switch>\n          <Route exact path='/'>\n            <SearchPage getInputValue={getInputValue} getButtonClick={getButtonClick} Link={Link} getPathName={getPathName} />\n          </Route>\n          <Route exact path='/thesaurus'>\n          {HomeComponent()}\n          </Route>\n      </Switch>\n    </Router>\n)\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react'\n// import theme from './theme';\nimport {ColorModeScript} from '@chakra-ui/react'\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Playfair Display\",\n    body: \"Open Sans\",\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n    <ColorModeScript theme={theme} />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}