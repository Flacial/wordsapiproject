{"version":3,"sources":["components/RequestPage/Functions/getRequest/getRequest.js","components/RequestPage/SearchPage/SearchPage.js","components/ResponsePage/ThesaurusPage/ThesaurusPage.js","components/ResponsePage/Loading/Loading.js","components/NavBar/NavBar.js","App.js","index.js"],"names":["getRequest","word","a","fetch","Response","Data","json","MainContainer","tw","div","SearchPage","input","onEnterKeyPress","WordFind","isOpen","onClose","cancelRef","getInputValue","getButtonClick","Link","getPathName","location","useLocation","useEffect","pathname","motionPreset","leastDestructiveRef","isCentered","fontFamily","fontStyle","fontSize","mt","mb","whiteSpace","display","md","justifyContent","onKeyPress","variant","w","rounded","mr","onChange","placeholder","onClick","className","to","ThesaurusHeader","h1","WordTypeContainer","styled","WordAndType","TheWord","TheType","span","SynAntHeader","h2","SynAntContainer","Example","Text","ThesaurusPage","BackButtonClick","ReturnedWord","PartOfSpeech","ShortDef","ReactHtmlParser","WordExample","LinkChak","chakra","bg","useColorModeValue","color","LoadingPage","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","height","width","xmlns","d","NavBar","useColorMode","colorMode","toggleColorMode","boxShadow","outline","outlineColor","style","outlineStyle","m","svg","App","useState","Word","setWord","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","Error","setError","PathName","setPathName","useDisclosure","onOpen","useRef","setWordFind","history","useHistory","getWords","then","response","sendRequstedWord","length","index","fl","hw","hwi","shortdef","WordExampleSlicedIt","def","sseq","dt","t","replace","RequestedThesaurus","setTimeout","error","console","log","Path","exact","path","event","which","push","target","value","ThesaurusPageCondition","ThesaurusPageComponent","theme","extendTheme","fonts","heading","body","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.b878f6ad.chunk.js","sourcesContent":["export const getRequest = async (word) => {\n    const Response = await fetch(`https://dictionaryapi.com/api/v3/references/ithesaurus/json/${word}?key=c48ccf67-004d-4d61-bf2b-54e83578866c`)\n    const Data = Response.json()\n    return Data\n}","import tw from 'tailwind-styled-components';\nimport { useLocation } from 'react-router-dom';\nimport { useEffect } from 'react'\nimport {  } from '@chakra-ui/react'\nimport {\n  Heading, Input, useColorMode, Button, Box,\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  AlertDialogCloseButton\n} from \"@chakra-ui/react\"\n\n\nexport const MainContainer = tw.div`\n   text-center\n   m-auto\n`\n\nexport const WordInput = tw.input`\n  rounded-full\n  px-10\n  text-center\n  outline-none\n  focus:ring-4 focus:ring-green-500\n  lg:mr-3\n`\nconst LinkCSS = `\nbg-gray-100\ntext-gray-800\npy-1\npx-3\nrounded-xl\nshadow-2xl\ninline-block\nmd:py-1\nmd:h-8\nmd:mt-1\nmd:px-4\n\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-400\nhover:bg-gray-200\ntransition duration-200 ease-in-out\n`\n\n\n\nconst SearchPage = ({ onEnterKeyPress, WordFind, isOpen, onClose, cancelRef, getInputValue, getButtonClick, Link, getPathName }) => {\n  const location = useLocation()\n  useEffect(() => {\n    getPathName(location.pathname)\n  })\n\n    return (\n        <MainContainer>\n          <AlertDialog\n              motionPreset=\"slideInBottom\"\n              leastDestructiveRef={cancelRef}\n              onClose={onClose}\n              isOpen={isOpen}\n              isCentered\n            >\n              <AlertDialogOverlay />\n\n              <AlertDialogContent>\n                  <AlertDialogHeader>Incorrect inputs</AlertDialogHeader>\n                  <AlertDialogCloseButton />\n                  <AlertDialogBody>\n                    {WordFind ? 'Empty input detected, please type a word' : 'Word not found, please type a correct word!'}\n                  </AlertDialogBody>\n                  <AlertDialogFooter>\n                  </AlertDialogFooter>\n              </AlertDialogContent>\n          </AlertDialog>\n\n\n              <Heading fontFamily='Playfair Display' fontStyle='italic' fontSize={['3xl', '5xl', '6xl']} mt={['12', null, '32']} mb={['5', null, '12']} whiteSpace='nowrap' >Words to be thesaurused</Heading>\n              <Box display={{ md: \"flex\"}} justifyContent={[null, 'center', null]} >\n              <Box>\n                <Input onKeyPress={onEnterKeyPress} variant='filled' w={['16rem', 'xs', null]} rounded='xl' mr={[null, null, '2rem']} onChange={getInputValue} placeholder=\"Type your word\"/>\n              </Box>\n              <Box mt={[5, 5, 0]} >\n                    <Link onClick={getButtonClick} className={LinkCSS}\n                        to='/thesaurus'>\n                      Search\n                    </Link>\n\n              </Box>\n              </Box>\n            </MainContainer>\n    )\n}\n\nexport default SearchPage;\n","import { Fragment, useEffect, useRef } from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled from 'styled-components'\nimport tw from 'tailwind-styled-components';\nimport { chakra, Heading, Input, useColorMode, Button, Box, useColorModeValue } from '@chakra-ui/react'\n\nconst ThesaurusHeader = tw.h1`\n    text-blue-500   \n    italic\n    font-serif\n    text-3xl\n    font-bold\n    inline-block\n`\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\nbackground: linear-gradient(145deg, #ffffff, #e6e6e6);\nbox-shadow:  2px 2px 12px #37413f, -10px -10px 0px #3B82F6;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 5px;\npadding-bottom: 5px;\nmargin: 3em;\nword-spacing: 0;\n`\n\nconst WordAndType = tw.div`\n    mt-5\n`\n\nconst TheWord = tw.h1`\n    text-5xl\n    text-gray-700\n    font-serif\n    font-bold\n    inline-block\n`\n\nconst TheType = tw.span`\n    text-blue-500\n    text-xl\n    font-bold\n    font-serif\n`\nconst SynAntHeader = tw.h2`\n    text-blue-600\n    font-bold\n    text-2xl\n    mt-3\n`\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`\n\nconst Example = tw.span`\n    text-blue-500\n    text-xl\n    block\n`\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`\n\nconst LinkCSS = `\npy-2\npx-4\nrounded-xl\nshadow-xl\ninline-block\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-500\ntransition duration-500 ease-in-out\nm-4\n`\n\nexport const ThesaurusPage = (\n    {\n        Link,\n        BackButtonClick,\n        ReturnedWord,\n        PartOfSpeech,\n        ShortDef,\n        ReactHtmlParser,\n        WordExample,\n        getPathName\n}) => {\n  \n  const location = useLocation()\n  useEffect(() => {\n    getPathName(location.pathname)\n\n  })\n\n  const LinkChak = chakra(Link)\n\n  const bg = useColorModeValue('#edf2f7', '#303436')\n  const color = useColorModeValue('#303436', '#edf2f7')\n  const hover = useColorModeValue('hover:bg-gray-200' ,'hover:bg-gray-600')\n    return (\n            <Fragment>\n              <Box className='absolute top-0' >\n                <LinkChak bg={bg} color={color} onClick={BackButtonClick} className={LinkCSS} to='/'>\n                  Back to search\n                </LinkChak>\n              </Box>\n              <WordTypeContainer>\n                <ThesaurusHeader>\n                  Thesaurus\n                </ThesaurusHeader>\n                <WordAndType>\n                  <TheWord>\n                    {ReturnedWord}\n                  </TheWord>\n                  <TheType>\n                    {PartOfSpeech}\n                  </TheType>\n                </WordAndType>\n                <SynAntHeader>\n                  Synonyms & Antonyms of <em>{ReturnedWord}</em>\n                </SynAntHeader>\n                <SynAntContainer>\n                  <span className='font-bold text-gray-700 text-xl absolute left-0 top-0'>1</span>\n                  <Text>{ShortDef}</Text>\n                  <Example> <strong>//</strong> {ReactHtmlParser(WordExample)} </Example>\n                </SynAntContainer>\n              </WordTypeContainer>\n            </Fragment>\n    )\n}","import { Box } from '@chakra-ui/react'\n\nexport const LoadingPage = () => {\n    return (\n        <Box display='flex' justifyContent='center'>\n            <svg className='animate-spin mt-28 md:mt-42 lg:mt-48' stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"5em\" width=\"5em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M340.896,58.488C303.18,20.771,253.033,0,199.694,0C146.353,0,96.207,20.771,58.491,58.488\n\t\tC20.772,96.206,0,146.354,0,199.693c0,53.342,20.772,103.489,58.491,141.206c37.716,37.717,87.863,58.488,141.203,58.488\n\t\tc53.337,0,103.486-20.771,141.203-58.488c37.719-37.718,58.49-87.865,58.49-141.206C399.387,146.355,378.615,96.207,340.896,58.488\n\t\tz M199.694,77.457c67.402,0,122.236,54.835,122.236,122.236s-54.834,122.236-122.236,122.236S77.457,267.094,77.457,199.693\n\t\tS132.292,77.457,199.694,77.457z M328.061,328.062c-34.289,34.287-79.877,53.17-128.367,53.17\n\t\tc-48.491,0-94.079-18.883-128.367-53.17c-34.289-34.287-53.173-79.877-53.173-128.37h41.148\n\t\tc0,77.411,62.979,140.391,140.392,140.391c77.412,0,140.39-62.979,140.39-140.391c0-77.412-62.979-140.391-140.39-140.391\n\t\tc-4.594,0-9.134,0.229-13.615,0.662v-41.31c4.508-0.332,9.049-0.5,13.615-0.5c48.49,0,94.078,18.883,128.367,53.171\n\t\tc34.289,34.289,53.172,79.878,53.172,128.368C381.232,248.186,362.35,293.775,328.061,328.062z\">\n            </path>\n            </svg> \n        </Box>\n    )\n}\n","import { chakra, Box, Button, useColorMode } from '@chakra-ui/react';\n\n\nconst NavBar = () => {\n\n    const { colorMode, toggleColorMode } = useColorMode()\n    return (\n\n    <Box display='flex' justifyContent='flex-end' >\n    <Button boxShadow='lg' outline='none' outlineColor='initial' style={{outlineStyle: 'none' }} m='4' rounded='2xl' onClick={toggleColorMode}>\n      {colorMode === \"light\" \n      ?\n      <chakra.svg outline='none' stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"m224.023438 448.03125c85.714843.902344 164.011718-48.488281 200.117187-126.230469-22.722656 9.914063-47.332031 14.769531-72.117187 14.230469-97.15625-.109375-175.890626-78.84375-176-176 .972656-65.71875 37.234374-125.832031 94.910156-157.351562-15.554688-1.980469-31.230469-2.867188-46.910156-2.648438-123.714844 0-224.0000005 100.289062-224.0000005 224 0 123.714844 100.2851565 224 224.0000005 224zm0 0\">\n      </path>\n      </chakra.svg> \n      :\n      <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M256,0C115.39,0,0,115.39,0,256s115.39,256,256,256s256-115.39,256-256S396.61,0,256,0z\">\n      </path>\n      </chakra.svg> \n      }\n    </Button>\n    </Box>\n    )\n}\n\nexport default NavBar;","import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link, \n  Redirect,\n  useHistory\n} from 'react-router-dom'\nimport ReactHtmlParser from 'react-html-parser';\nimport { useState, useEffect, useRef, Fragment } from 'react';\nimport { getRequest } from './components/RequestPage/Functions/getRequest/getRequest';\nimport SearchPage from './components/RequestPage/SearchPage/SearchPage';\nimport { ThesaurusPage } from './components/ResponsePage/ThesaurusPage/ThesaurusPage';\nimport { LoadingPage } from './components/ResponsePage/Loading/Loading';\nimport NavBar from './components/NavBar/NavBar';\nimport { useDisclosure } from '@chakra-ui/react'\n\nconst  App = () => {\n  const [ Word, setWord ] = useState('')\n  const [ ReturnedWord, setReturnedWord] = useState('')\n  const [ ShortDef, setShortDef ] = useState('')\n  const [ PartOfSpeech, setPartOfSpeech ] = useState('')\n  const [ WordExample, setWordExample ] = useState('')\n  const [ Error, setError ] = useState(false)\n  const [ PathName, setPathName ] = useState('')\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const cancelRef = useRef()\n  const [ WordFind, setWordFind ] = useState(false)\n \n  const history = useHistory();\n\n  const getInputValue = (event) => {\n    setWord(event.target.value)\n  }\n  \n  const getWords = () => {\n    if (Word === '') {\n      setWordFind(true)\n          onOpen()\n        } else {\n    getRequest(Word)\n    .then(response => sendRequstedWord(response))\n        }\n  }\n\n  const getButtonClick = () => {\n    getWords()\n  }\n\n  const BackButtonClick = () => {\n    setWord('')\n    setReturnedWord('')\n    setPartOfSpeech('')\n    setShortDef('')\n    setWordExample('')\n  }\n\n  const RequestedThesaurus = (word, index) => {\n    const { fl, hwi: {hw},  shortdef , def: [{sseq: dt}] } = word[index]\n    const WordExample = dt[0][0][1].dt[1][1][0].t\n    const WordExampleSlicedIt = WordExample.replace('{it}', '<em>').replace('{/it}', '</em>')\n    setReturnedWord(hw)\n    setPartOfSpeech(fl)\n    setShortDef(shortdef[0])\n    setWordExample(WordExampleSlicedIt)\n  }\n\n  const sendRequstedWord = (word) => {\n    try {\n          if (word.length >= 1) {\n            RequestedThesaurus(word, 0)\n          } else if (!word[0]) {\n            setError(true)\n            setTimeout(() => {\n              onOpen()\n            }, 100);\n          }\n    }\n    catch (error) {\n      console.log(error)\n      setError(true)\n      onOpen()\n        }\n  }\n\n  const ThesaurusPageComponent = () => {\n    let ThesaurusPageCondition;\n    if (Word.length) {\n        if (ReturnedWord.length) {\n            ThesaurusPageCondition = <ThesaurusPage Word={Word} Link={Link} BackButtonClick={BackButtonClick} ReturnedWord={ReturnedWord} PartOfSpeech={PartOfSpeech} ShortDef={ShortDef}\n            ReactHtmlParser={ReactHtmlParser} WordExample={WordExample} getPathName={getPathName}/>\n        } else if (Error) {\n          setWord('')\n          setError(false)\n          ThesaurusPageCondition = <Redirect to='/' />\n        } else {\n          ThesaurusPageCondition = <LoadingPage/>\n        }\n  } else {\n    ThesaurusPageCondition = <Redirect to='/' />\n  }\n    return ThesaurusPageCondition\n  }\n\n  const getPathName = (Path) => {\n    setPathName(Path)\n  }\n\n  const onEnterKeyPress = (event) => {\n    if (event.which === 13) {\n      getWords()\n      history.push('/thesaurus')\n    }\n  }\n\n  useEffect(() => {\n    if (PathName === '/' && ShortDef.length) {\n      BackButtonClick()\n    }\n  }, [PathName])\n\n\n  return (\n    <Fragment>\n      <NavBar/>\n      <Switch>\n          <Route exact path='/'>\n            <SearchPage onEnterKeyPress={onEnterKeyPress} WordFind={WordFind} isOpen={isOpen} onClose={onClose} cancelRef={cancelRef} getInputValue={getInputValue} getButtonClick={getButtonClick} Link={Link} getPathName={getPathName} />\n          </Route>\n          <Route exact path='/thesaurus'>\n          {ThesaurusPageComponent()}\n          </Route>\n      </Switch>\n    </Fragment>\n)\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react'\nimport {ColorModeScript} from '@chakra-ui/react'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Playfair Display\",\n    body: \"Open Sans\",\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n    <Router basename='/wordsapiproject' >\n    <ColorModeScript theme={theme} />\n      <App />\n    </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}