{"version":3,"sources":["services/getRequest.js","components/ResponsePage/ThesaurusPage/ThesaurusPage.js","components/ResponsePage/Loading/Loading.js","components/RequestPage/SearchPage/SearchPage.js","Routes/Routes.js","containers/App.js","components/NavBar/NavBar.js","index.js"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","console","log","ThesaurusHeader","tw","h1","ChakraThesaurusHeader","chakra","WordTypeContainer","styled","div","ChakraWordTypeContainer","WordAndType","TheWord","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","ThesaurusPage","Link","BackButtonClick","ReturnedWord","PartOfSpeech","ShortDef","ReactHtmlParser","WordExample","getPathName","location","useLocation","useEffect","pathname","LinkChak","bg","useColorModeValue","color","fontColorMain","fontColorHeaders","fontColorDarkWhiteSmallWords","hover","background","gradientbg","boxShadow","className","_hover","onClick","to","bgGradient","m","marginTop","LoadingPage","display","justifyContent","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","height","width","xmlns","d","MainContainer","SearchPage","WordFindType","onEnterKeyPress","WordFind","isOpen","getInputValue","getButtonClick","fontFamily","fontSize","mt","mb","whiteSpace","sm","md","onKeyPress","variant","w","rounded","mr","onChange","placeholder","in","transition","svg","ml","outline","Routes","ThesaurusPageComponent","props","exact","path","TransitionFade","key","App","useState","Word","setWord","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","Error","setError","PathName","setPathName","useDisclosure","onOpen","setWordFind","setWordFindType","history","useHistory","getWords","then","data","sendRequstedWord","length","index","fl","hw","hwi","shortdef","WordExampleSlicedIt","def","sseq","dt","t","replace","RequestedThesaurus","error","Path","ThesaurusPageCondition","event","which","push","target","value","NavBar","useColorMode","colorMode","toggleColorMode","outlineColor","style","outlineStyle","theme","extendTheme","fonts","heading","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.cfad17ea.chunk.js","sourcesContent":["export const getRequest = async (word) => {\n    try {\n        const request = await fetch('https://wordsapiprojectserver.herokuapp.com/thesaurus', {\n            method: 'post',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                word: word\n            })\n    })\n    return request.json()\n    }\n    catch (error) {\n        console.log(error)\n    }\n}","import { Fragment, useEffect } from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled from 'styled-components'\nimport tw from 'tailwind-styled-components';\nimport { chakra, Box, useColorModeValue } from '@chakra-ui/react'\n\nconst ThesaurusHeader = tw.h1`\n    italic\n    font-serif\n    text-3xl\n    font-bold\n    inline-block\n`\nconst ChakraThesaurusHeader = chakra(ThesaurusHeader)\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 5px;\npadding-bottom: 5px;\nword-spacing: 0;\n`\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer)\n\nconst WordAndType = tw.div`\n    mt-5\n`\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`\n\nconst ChakraTheWord = chakra(TheWord)\n\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`\n\nconst ChakraTheType = chakra(TheType)\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`\n\nconst ChakraSynAntHeader = chakra(SynAntHeader)\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`\n\nconst Example = tw.span`\n    text-xl\n    block\n`\n\nconst ChakraExample = chakra(Example)\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`\n\nconst ChakraText = chakra(Text)\n\nconst LinkCSS = `\npy-2\npx-4\nrounded-xl\nshadow-xl\ninline-block\nfocus:outline-none\nfocus:border\nfocus:ring-2 focus:ring-blue-500\ntransition duration-500 ease-in-out\nm-4\n`\n\nexport const ThesaurusPage = (\n    {\n        Link,\n        BackButtonClick,\n        ReturnedWord,\n        PartOfSpeech,\n        ShortDef,\n        ReactHtmlParser,\n        WordExample,\n        getPathName\n}) => {\n  \n  const location = useLocation()\n  useEffect(() => {\n    getPathName(location.pathname)\n  })\n\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7')\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02')\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange')\n  const hover = useColorModeValue({background: \"gray.200\"}, {background: \"gray.700\"});\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)')\n  const boxShadow = useColorModeValue('2px 2px 12px #37413f, -10px -10px 0px #3B82F6', '2px 2px 12px #37413f, -10px -10px 0px orange')\n\n    return (\n            <Fragment>\n              <Box className='absolute top-0'>\n                <LinkChak bg={bg} color={color} _hover={hover} onClick={BackButtonClick} className={LinkCSS} to='/'>\n                  Back to search\n                </LinkChak>\n              </Box>\n              <ChakraWordTypeContainer boxShadow={boxShadow} bgGradient={gradientbg} m={['1em','3em',null]} marginTop={['20', null, null]} >\n                <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n                  Thesaurus\n                </ChakraThesaurusHeader>\n                <WordAndType>\n                  <ChakraTheWord color={fontColorMain} >\n                    {ReturnedWord}\n                  </ChakraTheWord>\n                  <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n                    {PartOfSpeech}\n                  </ChakraTheType>\n                </WordAndType>\n                <ChakraSynAntHeader color={fontColorHeaders} >\n                  Synonyms & Antonyms of <em>{ReturnedWord}</em>\n                </ChakraSynAntHeader>\n                <SynAntContainer>\n                  <chakra.span color={fontColorMain} className='font-bold text-xl absolute left-0 top-0'>1</chakra.span>\n                  <ChakraText color={fontColorMain} >{ShortDef}</ChakraText>\n                  <ChakraExample color={fontColorDarkWhiteSmallWords}> <strong>//</strong> {ReactHtmlParser(WordExample)} </ChakraExample>\n                </SynAntContainer>\n              </ChakraWordTypeContainer>\n            </Fragment>\n    )\n}","import { Box } from '@chakra-ui/react'\n\nexport const LoadingPage = () => {\n    return (\n        <Box display='flex' justifyContent='center'>\n            <svg className='animate-spin mt-40 md:mt-50 lg:mt-56' stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"5em\" width=\"5em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M340.896,58.488C303.18,20.771,253.033,0,199.694,0C146.353,0,96.207,20.771,58.491,58.488\n\t\tC20.772,96.206,0,146.354,0,199.693c0,53.342,20.772,103.489,58.491,141.206c37.716,37.717,87.863,58.488,141.203,58.488\n\t\tc53.337,0,103.486-20.771,141.203-58.488c37.719-37.718,58.49-87.865,58.49-141.206C399.387,146.355,378.615,96.207,340.896,58.488\n\t\tz M199.694,77.457c67.402,0,122.236,54.835,122.236,122.236s-54.834,122.236-122.236,122.236S77.457,267.094,77.457,199.693\n\t\tS132.292,77.457,199.694,77.457z M328.061,328.062c-34.289,34.287-79.877,53.17-128.367,53.17\n\t\tc-48.491,0-94.079-18.883-128.367-53.17c-34.289-34.287-53.173-79.877-53.173-128.37h41.148\n\t\tc0,77.411,62.979,140.391,140.392,140.391c77.412,0,140.39-62.979,140.39-140.391c0-77.412-62.979-140.391-140.39-140.391\n\t\tc-4.594,0-9.134,0.229-13.615,0.662v-41.31c4.508-0.332,9.049-0.5,13.615-0.5c48.49,0,94.078,18.883,128.367,53.171\n\t\tc34.289,34.289,53.172,79.878,53.172,128.368C381.232,248.186,362.35,293.775,328.061,328.062z\">\n            </path>\n            </svg> \n        </Box>\n    )\n}\n\n// TODO Make margin responsive in mobile","import tw from 'tailwind-styled-components';\nimport { useLocation } from 'react-router-dom';\nimport { useEffect } from 'react'\nimport {  } from '@chakra-ui/react'\nimport {\n  Heading, \n  Input, \n  Box,\n  chakra,\n  Fade,\n} from \"@chakra-ui/react\"\n\nconst MainContainer = tw.div`\n   text-center\n   mt-40\n   sm:mt-0\n   md2:mt-38\n   lg:mt-32\n`\n\nconst LinkCSS = `\nbg-gray-100\ntext-gray-800\npy-1\npx-3\nrounded-xl\nshadow-2xl\ninline-block\nmd:py-1\nmd:h-8\nmd:mt-1\nmd:px-4\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-400\nhover:bg-gray-200\ntransition duration-200 ease-in-out\n`\n\nconst SearchPage = ({ WordFindType, onEnterKeyPress, WordFind, isOpen,\n   getInputValue, getButtonClick, Link, getPathName }) => {\n  const location = useLocation()\n  const LinkChak = chakra(Link)\n\n  useEffect(() => {\n    getPathName(location.pathname)\n  })\n\n    return (\n        <MainContainer>\n            <Heading fontFamily='Playfair Display' fontSize={['3xl', '5xl', '6xl']} mt={['12', null, '15', '0', '32']} mb={['5', null, '12']} whiteSpace='nowrap' >Words to be thesaurused</Heading>\n            <Box display={{ sm:'flex', md: \"flex\"}} justifyContent={[null, 'center', null]} >\n              <Box>\n                <Input onKeyPress={onEnterKeyPress} variant='filled' w={['16rem', 'xs', null]} rounded='xl' mr={[null, null, '2rem']} onChange={getInputValue} placeholder=\"Type your word\"/>\n                {WordFind\n                &&\n                <Fade in={isOpen} >\n                <Box mt='1' display='flex' justifyContent={['center','flex-start', null]} transition='ease'>\n                    <chakra.svg mt='1' ml={[null,'4', null]} outline='none' stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\">\n                    </path>\n                    </chakra.svg>\n                    <chakra.span ml='1' mb={['-1',0, 0]} color='red.400' >\n                    {(WordFindType === 'no response' ? 'Word not found!' : ( (WordFindType === 'no input') ? 'Input is empty, type a word!' : 'API Side Error or a bug' ))}\n                    </chakra.span>\n                  </Box>\n                </Fade>} \n              </Box>\n              <Box ml={[0, 5, 0]} mt={[5, 1, 0]} >\n                <LinkChak onClick={getButtonClick} className={LinkCSS}\n                    to='/thesaurus'>\n                  Search\n                </LinkChak>\n              </Box>\n            </Box>\n        </MainContainer>\n    )\n}\n\nexport default SearchPage;\n","import {\n    Switch,\n    Route,\n    useLocation\n} from 'react-router-dom'\nimport SearchPage from '../components/RequestPage/SearchPage/SearchPage';\nimport { Presets } from 'react-component-transition';\n\nfunction Routes({ ThesaurusPageComponent, ...props }) {\n  const location = useLocation();\n\n    return (\n        <Switch key={location.key} location={location} >\n          <Route exact path='/'>\n            <SearchPage {...props} />\n          </Route>\n          <Route exact path='/thesaurus'>\n            <Presets.TransitionFade>\n              {ThesaurusPageComponent()}\n            </Presets.TransitionFade>\n          </Route>\n        </Switch>\n    )\n}\n\nexport default Routes\n","import './App.css';\nimport {\n  Link, \n  Redirect,\n  useHistory\n} from 'react-router-dom'\nimport ReactHtmlParser from 'react-html-parser';\nimport { useState, useEffect } from 'react';\nimport { getRequest } from '../services/getRequest';\nimport { ThesaurusPage } from '../components/ResponsePage/ThesaurusPage/ThesaurusPage';\nimport { LoadingPage } from '../components/ResponsePage/Loading/Loading';\nimport { useDisclosure } from '@chakra-ui/react';\nimport { Presets } from \"react-component-transition\";\nimport Routes from '../Routes/Routes';\n\nconst  App = () => {\n  const [ Word, setWord ] = useState('')\n  const [ ReturnedWord, setReturnedWord] = useState('')\n  const [ ShortDef, setShortDef ] = useState('')\n  const [ PartOfSpeech, setPartOfSpeech ] = useState('')\n  const [ WordExample, setWordExample ] = useState('')\n  const [ Error, setError ] = useState(false)\n  const [ PathName, setPathName ] = useState('')\n  const { isOpen, onOpen } = useDisclosure()\n  const [ WordFind, setWordFind ] = useState(false)\n  const [ WordFindType ,setWordFindType ] = useState('')\n\n  const history = useHistory();\n  \n  const getInputValue = (event) => {\n    setWord(event.target.value)\n  }\n  \n  const getWords = () => {\n    if (Word === '') {\n      setWordFind(true)\n      setWordFindType('no input')\n          onOpen()\n        } else {\n    getRequest(Word)\n    .then(data => sendRequstedWord(data))\n    setWordFind(false)\n    setWordFindType('')\n        }\n  }\n\n  const getButtonClick = () => {\n    getWords()\n  }\n\n  const BackButtonClick = () => {\n    setWord('')\n    setReturnedWord('')\n    setPartOfSpeech('')\n    setShortDef('')\n    setWordExample('')\n  }\n\n  const RequestedThesaurus = (word, index) => {\n    const { fl, hwi: {hw},  shortdef , def: [{sseq: dt}] } = word[index]\n    const WordExample = dt[0][0][1].dt[1][1][0].t\n    const WordExampleSlicedIt = WordExample.replace('{it}', '<em>').replace('{/it}', '</em>')\n    setReturnedWord(hw)\n    setPartOfSpeech(fl)\n    setShortDef(shortdef[0])\n    setWordExample(WordExampleSlicedIt)\n  }\n\n  const sendRequstedWord = (word) => {\n    try {\n          if (word.length >= 1) {\n            RequestedThesaurus(word, 0)\n          } else if (!word[0]) {\n            setError(true)\n            setWordFind(true)\n            setWordFindType('no response')\n            onOpen()\n          }\n    }\n    catch (error) {\n        setError(true)\n        setWordFind(true)\n        onOpen()\n        }\n  }\n\n  const ThesaurusPageComponent = () => {\n    let ThesaurusPageCondition;\n    if (Word.length) {\n        if (ReturnedWord.length) {\n            ThesaurusPageCondition = <Presets.TransitionFade><ThesaurusPage Word={Word} Link={Link} BackButtonClick={BackButtonClick} ReturnedWord={ReturnedWord} PartOfSpeech={PartOfSpeech} ShortDef={ShortDef}\n            ReactHtmlParser={ReactHtmlParser} WordExample={WordExample} getPathName={getPathName}/></Presets.TransitionFade>\n        } else if (Error) {\n          ThesaurusPageCondition = <Redirect to='/' />\n        } else {\n          ThesaurusPageCondition = <LoadingPage/>\n        }\n  } else {\n    ThesaurusPageCondition = <Redirect to='/' />\n  }\n  useEffect(() => {\n    if (WordFind) {\n      if (PathName !== '/') {\n        setWordFind(false)\n        setWordFindType('')\n      }\n    }\n  }, [WordFind])\n  useEffect(() => {\n    if (Error) {\n    setWord('')\n    setError(false)\n    }\n  }, [Error])\n    return ThesaurusPageCondition\n  }\n\n  const getPathName = (Path) => {\n    setPathName(Path)\n  }\n\n  const onEnterKeyPress = (event) => {\n    if (event.which === 13) {\n      getWords()\n      history.push('/thesaurus')\n    }\n  }\n\n  useEffect(() => {\n    if (PathName === '/' && ShortDef.length) {\n      BackButtonClick()\n    }\n  }, [PathName])\n\n  \n  return (\n      <Routes ThesaurusPageComponent={ThesaurusPageComponent} WordFindType={WordFindType}\n       onEnterKeyPress={onEnterKeyPress} WordFind={WordFind} \n       isOpen={isOpen} getInputValue={getInputValue} getButtonClick={getButtonClick} Link={Link} getPathName={getPathName}/>\n  )\n}\n\nexport default App;","import { chakra, Box, Button, useColorMode } from '@chakra-ui/react';\n\n\nconst NavBar = () => {\n\n    const { colorMode, toggleColorMode } = useColorMode()\n    return (\n\n      <Box display='flex' justifyContent='flex-end'>\n        <Button boxShadow='lg' outline='none' outlineColor='initial' style={{outlineStyle: 'none' }} m='4' rounded='xl' onClick={toggleColorMode}>\n          {colorMode === \"light\" \n          ?\n          <chakra.svg outline='none' stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"m224.023438 448.03125c85.714843.902344 164.011718-48.488281 200.117187-126.230469-22.722656 9.914063-47.332031 14.769531-72.117187 14.230469-97.15625-.109375-175.890626-78.84375-176-176 .972656-65.71875 37.234374-125.832031 94.910156-157.351562-15.554688-1.980469-31.230469-2.867188-46.910156-2.648438-123.714844 0-224.0000005 100.289062-224.0000005 224 0 123.714844 100.2851565 224 224.0000005 224zm0 0\">\n          </path>\n          </chakra.svg> \n          :\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M256,0C115.39,0,0,115.39,0,256s115.39,256,256,256s256-115.39,256-256S396.61,0,256,0z\">\n          </path>\n          </chakra.svg> \n          }\n        </Button>\n      </Box>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react'\nimport {ColorModeScript} from '@chakra-ui/react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport NavBar from './components/NavBar/NavBar';\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Playfair Display\",\n    body: \"Open Sans\",\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n    <Router basename='/wordsapiproject' >\n    <ColorModeScript theme={theme} />\n      <NavBar />\n      <App />\n    </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}