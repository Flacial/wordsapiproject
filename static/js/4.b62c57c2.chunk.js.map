{"version":3,"sources":["../../../src/children.ts","../../../src/scale-fade.tsx","../../../src/input-group.tsx","../../../src/input-element.tsx","components/popup-search-bar/popup-search-bar.component.jsx"],"names":["getValidChildren","children","React","child","scaleFadeConfig","initial","animate","exit","variants","props","opacity","scale","initialScale","transitionEnd","transition","duration","ease","EASINGS","easeOut","enter","easeInOut","ScaleFade","in","reverse","className","show","unmountOnExit","isOpen","custom","motionProps","mergeWith","motion","ref","cx","InputGroup","forwardRef","styles","useMultiStyleConfig","omitThemingProps","_className","groupStyles","validChildren","input","clones","theming","size","variant","Object","__css","width","display","position","value","StyledElement","chakra","baseStyle","alignItems","justifyContent","top","zIndex","InputElement","placement","useStyles","attr","elementStyles","fontSize","InputLeftElement","InputRightElement","connect","words","WordArray","NounArray","VerbArray","AdjArray","PhraseArray","AdverbArray","AvailableWordType","isOpenSearchBar","dispatch","onToggleSearchBar","onCloseSearchBar","withRouter","history","HandleBackButtonClick","getWords","useState","Word","setWord","focusBorderColorInput","useColorModeValue","bg","color","InputField","useRef","HandleKeyDownOpenSearchBar","event","key","ctrlKey","shiftKey","preventDefault","current","focus","useEffect","document","addEventListener","removeEventListener","body","style","overflow","background","height","mt","pointerEvents","Search","id","placeholder","focusBorderColor","onKeyDown","push","w","rounded","onChange","target","onClick"],"mappings":"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","file":"static/js/4.b62c57c2.chunk.js","sourcesContent":["import * as React from \"react\"\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport function getValidChildren(children: React.ReactNode) {\n  return React.Children.toArray(children).filter((child) =>\n    React.isValidElement(child),\n  ) as React.ReactElement[]\n}\n","import { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype ScaleFadeVariants = MotionVariants<\"enter\" | \"exit\">\n\nconst variants: ScaleFadeVariants = {\n  exit: (props) => ({\n    opacity: 0,\n    ...(props.reverse\n      ? { scale: props.initialScale }\n      : { transitionEnd: { scale: props.initialScale } }),\n    transition: {\n      duration: 0.1,\n      ease: EASINGS.easeOut,\n    },\n  }),\n  enter: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.25,\n      ease: EASINGS.easeInOut,\n    },\n  },\n}\n\nexport const scaleFadeConfig: HTMLMotionProps<\"div\"> = {\n  initial: \"exit\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants,\n}\n\nexport interface ScaleFadeProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * The initial scale of the element\n   * @default 0.95\n   */\n  initialScale?: number\n  /**\n   * If `true`, the element will transition back to exit state\n   */\n  reverse?: boolean\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in?: boolean\n}\n\nexport const ScaleFade = React.forwardRef<HTMLDivElement, ScaleFadeProps>(\n  (props, ref) => {\n    const {\n      unmountOnExit,\n      in: isOpen,\n      reverse = true,\n      initialScale = 0.95,\n      className,\n      ...rest\n    } = props\n\n    const show = unmountOnExit ? isOpen && unmountOnExit : true\n    const custom = { initialScale, reverse }\n\n    const motionProps = mergeWith(scaleFadeConfig, {\n      custom,\n      animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    })\n\n    return (\n      <AnimatePresence custom={custom}>\n        {show && (\n          <motion.div\n            ref={ref}\n            className={cx(\"chakra-offset-slide\", className)}\n            {...motionProps}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  ScaleFade.displayName = \"ScaleFade\"\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-input__group\", className)\n  const groupStyles: InputGroupProps = {}\n\n  const validChildren = getValidChildren(children)\n\n  const input: any = styles.field\n\n  validChildren.forEach((child: any) => {\n    if (!styles) return\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingStart = input.height ?? input.h\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingEnd = input.height ?? input.h\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0\n    }\n  })\n\n  const clones = validChildren.map((child: any) => {\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    const theming = {\n      size: child.props?.size || props.size,\n      variant: child.props?.variant || props.variant,\n    }\n\n    return child.type.id !== \"Input\"\n      ? React.cloneElement(child, theming)\n      : React.cloneElement(\n          child,\n          Object.assign(theming, groupStyles, child.props),\n        )\n  })\n\n  return (\n    <chakra.div\n      className={_className}\n      ref={ref}\n      __css={{\n        width: \"100%\",\n        display: \"flex\",\n        position: \"relative\",\n      }}\n      {...rest}\n    >\n      <StylesProvider value={styles}>{clones}</StylesProvider>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\"\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">((props, ref) => {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n  }\n\n  return <StyledElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\"\n}\n\nexport const InputLeftElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\"\n}\n\nexport const InputRightElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\"\n}\n","/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  Box,\n  Input,\n  useColorModeValue,\n  ScaleFade,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { connect } from 'react-redux';\nimport { onToggleSearchBar, onCloseSearchBar } from '../../redux/words/words.action';\n\nconst PopUpSearchBar = ({\n  history, HandleBackButtonClick,\n  getWords, isOpenSearchBar, onToggleSearchBar, onCloseSearchBar,\n}) => {\n  const [Word, setWord] = useState('');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const InputField = useRef(null);\n\n  const HandleKeyDownOpenSearchBar = (event) => {\n    if (event.key === 'E' && event.ctrlKey && event.shiftKey) {\n      event.preventDefault();\n      onToggleSearchBar();\n      if (InputField?.current) {\n        InputField.current.focus();\n      }\n    }\n    if (event.key === 'Escape') {\n      event.preventDefault();\n      onCloseSearchBar();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownOpenSearchBar);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownOpenSearchBar);\n    };\n  }, [isOpenSearchBar]);\n\n  useEffect(() => {\n    if (isOpenSearchBar) {\n      document.body.style.overflow = 'hidden';\n    }\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpenSearchBar]);\n\n  const HandleEnterKeyPopUpSearchBar = (event) => {\n    if (event.key === 'Enter') {\n      HandleBackButtonClick(false);\n      getWords(Word);\n      history.push('/thesaurus');\n      onCloseSearchBar();\n    }\n  };\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  return (\n    <>\n      {(isOpenSearchBar)\n        ? (\n          <>\n            <Box position=\"fixed\" zIndex=\"9999\" background=\"gray.800\" opacity=\"0.6\" style={{ height: '100vh', width: '100vw' }} />\n            <Box>\n              <Box position=\"fixed\" display=\"flex\" alignItems=\"flex-start\" justifyContent=\"center\" zIndex=\"9999\" style={{ height: '100vh', width: '100vw' }}>\n                <ScaleFade in={isOpenSearchBar}>\n                  <Box className=\"relative\">\n                    <InputGroup mt=\"32\">\n                      <InputLeftElement\n                        zIndex=\"9999999\"\n                        pointerEvents=\"none\"\n                        // eslint-disable-next-line react/no-children-prop\n                        children={<SearchIcon zIndex=\"9999999\" color={color} />}\n                      />\n                      <Input id=\"InputField2\" ref={InputField} style={{ zIndex: 999999 }} placeholder=\"Search a word\" focusBorderColor={focusBorderColorInput} onKeyDown={HandleEnterKeyPopUpSearchBar} background={bg} color={color} w={['xs', 'xs', null]} rounded=\"xl\" onChange={getInputValue} />\n                    </InputGroup>\n                  </Box>\n                </ScaleFade>\n                <Box position=\"fixed\" style={{ height: '100vh', width: '100vw' }} background=\"transparent\" onClick={onCloseSearchBar} />\n              </Box>\n            </Box>\n          </>\n        )\n        : <></>}\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  WordArray: words.WordArray,\n  NounArray: words.NounArray,\n  VerbArray: words.VerbArray,\n  AdjArray: words.AdjArray,\n  PhraseArray: words.PhraseArray,\n  AdverbArray: words.AdverbArray,\n  AvailableWordType: words.AvailableWordType,\n  isOpenSearchBar: words.isOpenSearchBar,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onToggleSearchBar: () => dispatch(onToggleSearchBar()),\n  onCloseSearchBar: () => dispatch(onCloseSearchBar()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(PopUpSearchBar));\n"],"sourceRoot":""}