{"version":3,"sources":["services/getRequest.js","components/loading-skeleton/loading-skeleton.component.jsx","components/words-container/words.container.component.jsx","components/words-container-content/words-container-content.jsx","components/tabs/tabs.component.jsx","pages/ThesaurusPage/ThesaurusPage.jsx","redux/words/words.types.js","redux/words/words.action.js","components/search-input/search-input.component.jsx","pages/SearchPage/SearchPage.jsx","routes/routes.jsx","components/help-button/help-button.component.jsx","components/theme-button/theme-button.component.jsx","components/search-button/search-button.component.jsx","components/NavBar/NavBar.jsx","components/popup-search-bar/popup-search-bar.component.jsx","containers/App.jsx","redux/words/words.reducer.js","redux/root-reducer.js","redux/store.js","theme.js","index.jsx"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","LoadingSkeleton","SkeletonStartColor","useColorModeValue","SkeletonEndColor","TransitionFade","height","mt","mb","startColor","endColor","w","WordTypeContainer","styled","div","ChakraWordTypeContainer","chakra","WordsContainer","props","children","ml","mr","marginTop","boxShadow","gradientbg","isLargerthan440","bgGradient","WordAndType","tw","TheWord","h1","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","withRouter","ReturnedWord","PartOfSpeech","ShortDef","WordExample","Syns","Ants","getWords","HandleBackButtonClick","history","fontColorMain","fontColorHeaders","fontColorSynAnt","fontColorDarkWhiteSmallWords","hoverSynAntItems","textDecoration","onClickWords","event","target","textContent","push","turnWordInToList","MainObj","ReturnedObj","undefined","map","index","_hover","className","onClick","listStyleType","display","color","slice","ReactHtmlParser","fontSize","fontFamily","fontStyle","ThesaurusHeader","ChakraThesaurusHeader","WordsTabs","AvailableWordType","HandleTabClick","WordsLoaded","Tabshover","bg","focusBorderColorGeneral","NounTabButton","useRef","VerbTabButton","AdjectiveTabButton","HandleKeyDownTabsButton123","key","preventDefault","current","click","useEffect","document","addEventListener","removeEventListener","TheWholeThesaurus","align","variant","noun","Object","keys","length","ref","_selected","_focus","outline","outlineColor","style","outlineStyle","verb","adjective","Link","location","LinkChak","hover","background","fallbackBackground","changeTitle","ComponentState","initialTitle","title","toUpperCase","HandleKeyDownBackButtonQctrl","ctrlKey","window","scrollTo","top","behavior","zIndex","left","to","pathname","CSS","supports","position","h","borderRadius","wordsTypes","setWord","type","payload","connect","Word","words","dispatch","focusBorderColorInput","useState","WordValueSP","setWordSP","inputField","HandleFocusOnInputEnterCtrlShift","focus","focusBorderColor","onKeyPress","which","rounded","value","onBlur","onChange","paddingY","placeholder","paddingLeft","MainContainer","WordFindType","WordFind","isOpen","getInputValue","HandleSearchButtonClick","useMediaQuery","isMoreThan420px","alignContent","justifyContent","whiteSpace","placement","cursor","size","icon","Info","fontWeight","sm","md","Search","in","transition","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","width","xmlns","d","bgColor","as","ReachLink","Routes","Thesaurus","useLocation","exact","path","Help","KeyboardShortCutsColor","m","Question","ThemeButton","useColorMode","colorMode","toggleColorMode","ThemeButtonRef","HandleKeyDownThemeIcon","Moon","SearchButtonHeader","onOpen2","InputFiledSearchBarPopUp","isOpen2","onToggle2","onClose2","InputField","HandleKeyDownOpenSearchBar","shiftKey","overflow","opacity","alignItems","pointerEvents","onKeyDown","WordArray","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","setAnts","setSyns","setWordArray","Error","setError","PathName","useDisclosure","onOpen","onClose","onToggle","setWordFind","setWordFindType","setWordsLoaded","setAvailableWordType","WordsArrayFilter","wordObjects","filter","fl","WordArraySetState","wordArray","hw","hwi","shortdef","dt","def","sseq","syns","meta","ants","ExampleModified","t","replace","PassRequstedWords","MainLoop","element","error","console","log","InitialWord","forEach","arr","prevState","PartOfSpeechChecker","then","data","isSetword","ThesaurusStore","ThesaurusComponent","INITIAL_STATE","wordsReducer","state","action","combineReducers","middleWare","logger","store","createStore","rootReducer","applyMiddleware","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.630f5a7f.chunk.js","sourcesContent":["/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://flary-server.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","import React from 'react';\nimport { Stack, Skeleton, useColorModeValue } from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\n\nconst LoadingSkeleton = () => {\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200');\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500');\n  return (\n    <Presets.TransitionFade>\n      <Stack>\n        <Skeleton height=\"9px\" mt=\"4\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" w=\"80%\" mb=\"3\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n      </Stack>\n    </Presets.TransitionFade>\n  );\n};\n\nexport default LoadingSkeleton;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  useColorModeValue,\n  useMediaQuery,\n  chakra,\n} from '@chakra-ui/react';\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 15px;\npadding-bottom: 20px;\nword-spacing: 0;\n`;\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer);\n\nconst WordsContainer = (props) => {\n  const {\n    children, ml, mr, marginTop, boxShadow, gradientbg, isLargerthan440,\n  } = props;\n\n  return (\n    <ChakraWordTypeContainer\n      boxShadow={boxShadow}\n      bgGradient={gradientbg}\n      ml={ml}\n      mr={mr}\n      marginTop={marginTop}\n    >\n      {children}\n    </ChakraWordTypeContainer>\n  );\n};\n\nexport default WordsContainer;\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-undef */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport { Presets } from 'react-component-transition';\nimport tw from 'tailwind-styled-components';\nimport ReactHtmlParser from 'react-html-parser';\nimport { withRouter } from 'react-router-dom';\nimport {\n  chakra,\n  Heading,\n  UnorderedList,\n  useColorModeValue,\n  Box,\n  ListItem,\n} from '@chakra-ui/react';\n\nconst WordAndType = tw.div`\n    mt-1\n`;\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`;\n\nconst ChakraTheWord = chakra(TheWord);\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`;\n\nconst ChakraTheType = chakra(TheType);\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`;\n\nconst ChakraSynAntHeader = chakra(SynAntHeader);\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`;\n\nconst Example = tw.span`\n    text-xl\n    block\n`;\n\nconst ChakraExample = chakra(Example);\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`;\n\nconst ChakraText = chakra(Text);\n\nconst WordsContainerContent = (\n  props,\n) => {\n  const {\n    ReturnedWord,\n    PartOfSpeech,\n    ShortDef,\n    WordExample,\n    Syns,\n    Ants,\n    getWords,\n    HandleBackButtonClick,\n    history,\n  } = props;\n\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7');\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02');\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hoverSynAntItems = useColorModeValue({ textDecoration: 'underline' }, { textDecoration: 'underline' });\n\n  const onClickWords = (event) => {\n    HandleBackButtonClick();\n    getWords(event.target.textContent);\n    history.push('/thesaurus');\n  };\n  // Change synonyms and antonyms words to list items\n  const turnWordInToList = (MainObj) => {\n    let ReturnedObj = [];\n    if (MainObj !== undefined) {\n      ReturnedObj = MainObj.map((word, index) => {\n        if (MainObj[index + 1] === undefined) {\n          return <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={index}>{word}</ListItem>;\n        }\n        return (\n          <>\n            <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={word}>{word}</ListItem>\n            <span key={index}>{',\\u00A0'}</span>\n          </>\n        );\n      });\n    }\n    return ReturnedObj;\n  };\n  const OrderSynonyms = () => turnWordInToList(Syns);\n  const OrderAntonyms = () => turnWordInToList(Ants);\n\n  return (\n    <>\n      <WordAndType>\n        <Presets.TransitionFade>\n          <ChakraTheWord color={fontColorMain}>\n            {ReturnedWord}\n          </ChakraTheWord>\n        </Presets.TransitionFade>\n        <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n          {PartOfSpeech}\n        </ChakraTheType>\n      </WordAndType>\n      <ChakraSynAntHeader color={fontColorHeaders}>\n        Synonyms & Antonyms of\n        {' '}\n        <em>{ReturnedWord}</em>\n      </ChakraSynAntHeader>\n      <SynAntContainer>\n        <ChakraText color={fontColorMain}>\n          {ShortDef}\n        </ChakraText>\n        {(ShortDef.slice(0, 5) === WordExample.slice(0, 5))\n          ? <></>\n          : (\n            <ChakraExample color={fontColorSynAnt}>\n              {' '}\n              <strong>//</strong>\n              {' '}\n              {ReactHtmlParser(WordExample)}\n            </ChakraExample>\n          )}\n        <Heading mb=\"1\" mt=\"2\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n          Synonyms for\n          {' '}\n          <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n        </Heading>\n        <Box w={['100%', '70%', null]}>\n          <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n        </Box>\n        {(Ants !== undefined)\n          ? (\n            <div>\n              <Heading mb=\"1\" mt=\"4\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                Antonyms for\n                {' '}\n                <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n              </Heading>\n              <Box w={['100%', '70%', null]}>\n                <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n              </Box>\n            </div>\n          )\n          : <></>}\n      </SynAntContainer>\n    </>\n  );\n};\n\nexport default withRouter(WordsContainerContent);\n","/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport {\n  TabList, Tab, Tabs, TabPanels, TabPanel, useColorModeValue, chakra,\n} from '@chakra-ui/react';\nimport React, { useRef, useEffect } from 'react';\nimport { Presets } from 'react-component-transition';\nimport LoadingSkeleton from '../loading-skeleton/loading-skeleton.component';\nimport WordsContainer from '../words-container/words.container.component';\nimport WordsContainerContent from '../words-container-content/words-container-content';\n\nconst ThesaurusHeader = tw.h1`\nitalic\nfont-serif\ntext-3xl\nfont-bold\ninline-block\n`;\n\nconst ChakraThesaurusHeader = chakra(ThesaurusHeader);\n\nconst WordsTabs = ({\n  AvailableWordType,\n  HandleTabClick,\n  PartOfSpeech,\n  ShortDef,\n  WordExample,\n  WordsLoaded,\n  Syns,\n  Ants,\n  getWords,\n  HandleBackButtonClick,\n  ReturnedWord,\n}) => {\n  const boxShadow = useColorModeValue('0px 0px 25px #a1a1a1, -10px -10px 0px #3B82F6', '0px 0px 11px #1c1c1c, -10px -10px 0px orange');\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)');\n  const Tabshover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  const NounTabButton = useRef(null);\n  const VerbTabButton = useRef(null);\n  const AdjectiveTabButton = useRef(null);\n\n  const HandleKeyDownTabsButton123 = (event) => {\n    switch (event.key) {\n      case '!':\n        event.preventDefault();\n        NounTabButton?.current?.click();\n        break;\n      case '@':\n        event.preventDefault();\n        VerbTabButton?.current?.click();\n        break;\n      case '#':\n        event.preventDefault();\n        AdjectiveTabButton?.current?.click();\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownTabsButton123);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownTabsButton123);\n    };\n  }, []);\n\n  const TheWholeThesaurus = () => (\n    <WordsContainer boxShadow={boxShadow} gradientbg={gradientbg} ml={['0', '9em', null]} mr={['0', '9em', null]} marginTop={['3', null, null]}>\n      <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n        Thesaurus\n      </ChakraThesaurusHeader>\n      <Presets.TransitionFade>\n        {(WordsLoaded)\n          ? (\n            <WordsContainerContent\n              ReturnedWord={ReturnedWord}\n              PartOfSpeech={PartOfSpeech}\n              ShortDef={ShortDef}\n              WordExample={WordExample}\n              Syns={Syns}\n              Ants={Ants}\n              getWords={getWords}\n              HandleBackButtonClick={HandleBackButtonClick}\n            />\n          )\n          : (\n            <LoadingSkeleton />\n          )}\n      </Presets.TransitionFade>\n    </WordsContainer>\n  );\n\n  return (\n    <>\n      <Tabs align=\"center\" variant=\"soft-rounded\">\n        {/* <Box className='backdrop-blur z-50' display='flex'\n         justifyContent='center' h='22' width='full'  position='fixed' bottom='0'> */}\n        <TabList marginTop={['4', '2', null]}>\n          {(AvailableWordType.noun) ? ((Object.keys(AvailableWordType).length)\n            ? <Tab ref={NounTabButton} onClick={() => HandleTabClick('noun')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Noun</Tab>\n            : <></>\n          )\n            : <></>}\n          {(AvailableWordType.verb) ? ((Object.keys(AvailableWordType).length)\n            ? <Tab ref={VerbTabButton} onClick={() => HandleTabClick('verb')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Verb</Tab>\n            : <></>\n          )\n            : <></>}\n          {(AvailableWordType.adjective) ? ((Object.keys(AvailableWordType).length)\n            ? <Tab ref={AdjectiveTabButton} onClick={() => HandleTabClick('adjective')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adjective</Tab>\n            : <></>\n          )\n            : <></>}\n        </TabList>\n        {/* </Box> */}\n        <TabPanels>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n};\n\nexport default WordsTabs;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport {\n  useEffect, React,\n} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport WordsTabs from '../../components/tabs/tabs.component';\n\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (props) => {\n  const {\n    Link,\n    HandleBackButtonClick,\n    ReturnedWord,\n    PartOfSpeech,\n    ShortDef,\n    WordExample,\n    WordsLoaded,\n    Syns,\n    Ants,\n    HandleTabClick,\n    AvailableWordType,\n    getWords,\n    history,\n    location,\n  } = props;\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const hover = useColorModeValue({ background: 'gray.200' }, { background: 'gray.700' });\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const fallbackBackground = useColorModeValue('rgba(255, 255, 255, .9)', 'rgba(0, 0, 0, 0.26)');\n\n  const changeTitle = (ComponentState) => {\n    const initialTitle = 'Thesaurus By Flary';\n    if (ComponentState === 'mount') {\n      document.title = ReturnedWord.length ? `${ReturnedWord[0].toUpperCase() + ReturnedWord.slice(1)} Synonyms, ${ReturnedWord} Antonyms | Flary Thesaurus` : initialTitle;\n    } else {\n      document.title = initialTitle;\n    }\n  };\n\n  useEffect(() => {\n    changeTitle('mount');\n    return () => {\n      changeTitle();\n    };\n  }, [ReturnedWord]);\n\n  const HandleKeyDownBackButtonQctrl = (event) => {\n    if (event.key === 'Q' && event.ctrlKey) {\n      HandleBackButtonClick();\n      history.push('/');\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  return (\n    <>\n      {ReturnedWord.length\n        ? (\n          <Box zIndex=\"9991\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={focusBorderColorGeneral} bg={bg} color={color} _hover={hover} onClick={HandleBackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      {(location.pathname === '/thesaurus')\n        ? (\n          <Box\n            background={!(CSS.supports('backdrop-filter', 'blur(5px)'))\n                  && fallbackBackground}\n            className=\"backdrop-blur\"\n            zIndex=\"9990\"\n            position=\"fixed\"\n            top=\"0\"\n            h=\"70px\"\n            w=\"full\"\n            borderRadius=\"0 0 20px 20px\"\n          />\n        )\n        // TODO Break tabs into its own compoonent\n        : <></>}\n      <WordsTabs\n        AvailableWordType={AvailableWordType}\n        HandleTabClick={HandleTabClick}\n        PartOfSpeech={PartOfSpeech}\n        ShortDef={ShortDef}\n        WordExample={WordExample}\n        WordsLoaded={WordsLoaded}\n        Syns={Syns}\n        Ants={Ants}\n        getWords={getWords}\n        HandleBackButtonClick={HandleBackButtonClick}\n        ReturnedWord={ReturnedWord}\n      />\n    </>\n  );\n};\n\nexport default withRouter(ThesaurusPage);\n","/* eslint-disable import/prefer-default-export */\nexport const wordsTypes = {\n  SET_WORD: 'SET_WORD',\n  SET_RETURNED_WORD: 'SET_RETURNED_WORD',\n  SET_SHORTDEF: 'SET_SHORTDEF',\n  SET_PART_OF_SPEECH: 'SET_PART_OF_SPEECH',\n  SET_WORD_EXAMPLE: 'SET_WORD_EXAMPLE',\n  SET_SYNS: 'SET_SYNS',\n  SET_ANTS: 'SET_ANTS',\n  SET_WORD_ARRAY: 'SET_WORD_ARRAY',\n};\n","/* eslint-disable import/prefer-default-export */\nimport { wordsTypes } from './words.types';\n\nexport const setWord = (word) => ({\n  type: wordsTypes.SET_WORD,\n  payload: word,\n});\n\nexport const setReturnedWord = (word) => ({\n  type: wordsTypes.SET_RETURNED_WORD,\n  payload: word,\n});\n\nexport const setShortDef = (word) => ({\n  type: wordsTypes.SET_SHORTDEF,\n  payload: word,\n});\n\nexport const setPartOfSpeech = (word) => ({\n  type: wordsTypes.SET_PART_OF_SPEECH,\n  payload: word,\n});\n\nexport const setWordExample = (word) => ({\n  type: wordsTypes.SET_WORD_EXAMPLE,\n  payload: word,\n});\n\nexport const setAnts = (word) => ({\n  type: wordsTypes.SET_ANTS,\n  payload: word,\n});\n\nexport const setSyns = (word) => ({\n  type: wordsTypes.SET_SYNS,\n  payload: word,\n});\n\nexport const setWordArray = (word) => ({\n  type: wordsTypes.SET_WORD_ARRAY,\n  payload: word,\n});\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Input, useColorModeValue } from '@chakra-ui/react';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setWord } from '../../redux/words/words.action';\n\nconst SearchInput = ({\n  // eslint-disable-next-line no-shadow\n  setWord, getWords, history, Word,\n}) => {\n  const focusBorderColorInput = useColorModeValue('#3B82F6',\n    '#ffa500');\n  const [WordValueSP, setWordSP] = useState('');\n  const inputField = useRef(null);\n\n  const HandleFocusOnInputEnterCtrlShift = (event) => {\n    if (event.key === 'A' && event.ctrlKey) {\n      event.preventDefault();\n      inputField.current.focus();\n    }\n  };\n\n  const onBlur = () => {\n    if (WordValueSP.length) {\n      setWord(WordValueSP);\n    }\n  };\n\n  const HandleEnterKey = (event) => {\n    if (event.which === 13) {\n      setWord(WordValueSP);\n      getWords(WordValueSP);\n      history.push('/thesaurus');\n    }\n  };\n\n  const onInputChange = (event) => {\n    setWordSP(event.target.value);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    return () => {\n      document.removeEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    };\n  });\n\n  return (\n    <Input ref={inputField} focusBorderColor={focusBorderColorInput} onKeyPress={HandleEnterKey} variant=\"filled\" w={['18rem', 'xs', null]} rounded=\"xl\" mr={[null, null, '2rem']} value={WordValueSP} onBlur={onBlur} onChange={onInputChange} paddingY=\"5\" placeholder=\"Search for words\" paddingLeft=\"9\" />\n  );\n};\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setWord: (word) => dispatch(setWord(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SearchInput));\n","/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport { useLocation, withRouter, Link as ReachLink } from 'react-router-dom';\nimport React, {\n  useEffect,\n} from 'react';\nimport {\n  Heading,\n  Box,\n  chakra,\n  Fade,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  useMediaQuery,\n  Button,\n} from '@chakra-ui/react';\nimport { InfoIcon, SearchIcon } from '@chakra-ui/icons';\nimport SearchInput from '../../components/search-input/search-input.component';\n\nconst MainContainer = tw.div`\n   text-center\n   mt-40\n   sm:mt-0\n   md2:mt-38\n   lg:mt-32\n`;\n\nconst SearchPage = ({\n  WordFindType, WordFind, isOpen,\n  getInputValue, HandleSearchButtonClick, getWords,\n}) => {\n  const [isMoreThan420px] = useMediaQuery('(max-width: 420px)');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n    <MainContainer>\n      <Box display=\"flex\" alignContent=\"center\" justifyContent=\"center\" mt={['12', null, '15', '0', '32']} mb={['5', null, '12']}>\n        <Heading fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">\n          Words to be\n          {(isMoreThan420px) ? '\\u00A0' : ' thesaurused'}\n        </Heading>\n        <Popover placement=\"auto-end\" display=\"inline-block\">\n          <PopoverTrigger>\n            {(isMoreThan420px)\n              ? <Heading textDecoration={`underline wavy ${fontColorDarkWhiteSmallWords}`} _hover={[null, null, hover]} cursor=\"pointer\" fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">thesaurused</Heading>\n              : <IconButton variant=\"ghost\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} ml=\"2\" size=\"sm\" icon={<InfoIcon w=\"5\" h=\"5\" />} />}\n          </PopoverTrigger>\n          <PopoverContent outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Thesaurus</PopoverHeader>\n            <PopoverBody>\n              A thesaurus (plural thesauri or thesauruses) or synonym dictionary\n              is a reference work for finding synonyms and sometimes antonyms of words.\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      </Box>\n      <Box display={{ sm: 'flex', md: 'flex' }} justifyContent={[null, 'center', null]}>\n        <Box>\n          <Box justifyContent=\"center\" display=\"flex\" w={['100%', 'xs', null]}>\n            <Box w={['18rem', 'xs', null]} position=\"relative\">\n              <SearchInput getInputValue={getInputValue} getWords={getWords} />\n              <SearchIcon color=\"gray.300\" position=\"absolute\" left=\"3\" top=\"3.5\" />\n            </Box>\n          </Box>\n          {WordFind\n                && (\n                <Fade in={isOpen}>\n                  <Box mt=\"1\" display=\"flex\" justifyContent={['center', 'flex-start', null]} transition=\"ease\">\n                    <chakra.svg mt=\"1\" ml={[null, '4', null]} outline=\"none\" stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\" />\n                    </chakra.svg>\n                    <chakra.span ml=\"1\" mb={['-1', 0, 0]} color=\"red.400\">\n                      {(WordFindType === 'no response' ? 'Word not found! (Misspelled)' : ((WordFindType === 'no input') ? 'Input is empty, type a word!' : 'The word is not in the thesaurus!'))}\n                    </chakra.span>\n                  </Box>\n                </Fade>\n                )}\n        </Box>\n\n        {\n          !isMoreThan420px && (\n            <Box ml={[0, 6, null]} mt={[5, 1, 0]}>\n              <Button\n                _hover={{ background: 'gray.200' }}\n                _focus={focusBorderColorGeneral}\n                color=\"gray.800\"\n                bgColor=\"gray.100\"\n                as={ReachLink}\n                onClick={HandleSearchButtonClick}\n                to=\"/thesaurus\"\n                borderRadius=\"xl\"\n              >\n                Search\n              </Button>\n            </Box>\n          )\n        }\n      </Box>\n    </MainContainer>\n  );\n};\n\nexport default withRouter(SearchPage);\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\nimport React from 'react';\nimport { Presets } from 'react-component-transition';\nimport SearchPage from '../pages/SearchPage/SearchPage';\n\nfunction Routes({ Thesaurus, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <SearchPage {...props} />\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {Thesaurus()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  Button,\n  chakra,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst Help = () => {\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const KeyboardShortCutsColor = useColorModeValue('gray.600', 'gray.400');\n\n  return (\n    <Popover placement=\"auto\">\n      <PopoverTrigger>\n        <Button\n          _focus={focusBorderColorInput}\n          focusBorderColor={focusBorderColorInput}\n          boxShadow=\"lg\"\n          outline=\"none\"\n          outlineColor=\"initial\"\n          style={{ outlineStyle: 'none' }}\n          m=\"4\"\n          mr={[null, '40', null]}\n          rounded=\"xl\"\n        >\n          <QuestionIcon />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent width=\"max-content\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Keyboard Shortcuts</PopoverHeader>\n        <PopoverBody className=\"whitespace-pre-wrap text-left\">\n          <strong>Global</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Switch theme:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + X</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Home Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Focus on input field:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + A</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Thesaurus Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Go to Home Page:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + Q</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Search bar:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + E</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Switch word type:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Shift + 1 or 2 or 3</chakra.span>\n          </chakra.span>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Help;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  chakra, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\n\nconst ThemeButton = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const ThemeButtonRef = useRef(null);\n  const HandleKeyDownThemeIcon = (event) => {\n    if (event.key === 'X' && event.ctrlKey) {\n      event.preventDefault();\n      ThemeButtonRef.current.click();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownThemeIcon);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownThemeIcon);\n    };\n  }, []);\n\n  return (\n    <Button ref={ThemeButtonRef} _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={toggleColorMode}>\n      {colorMode === 'light'\n        ? <MoonIcon />\n        : (\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n          </chakra.svg>\n        )}\n    </Button>\n  );\n};\n\nexport default ThemeButton;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  Button, useColorModeValue,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst SearchButtonHeader = ({ onOpen2 }) => {\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n    <Button _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={onOpen2}>\n      <SearchIcon />\n    </Button>\n  );\n};\n\nexport default SearchButtonHeader;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Help from '../help-button/help-button.component';\nimport ThemeButton from '../theme-button/theme-button.component';\nimport SearchButtonHeader from '../search-button/search-button.component';\n\nconst NavBar = ({\n  onOpen2, InputFiledSearchBarPopUp, location, ReturnedWord,\n}) => (\n  <Box\n    zIndex=\"9991\"\n    position=\"sticky\"\n    top=\"0\"\n    h=\"70px\"\n    display=\"flex\"\n    justifyContent=\"flex-end\"\n  >\n    {(location.pathname === '/thesaurus' && ReturnedWord.length)\n      ? (\n        <SearchButtonHeader\n          onOpen2={onOpen2}\n          InputFiledSearchBarPopUp={InputFiledSearchBarPopUp}\n        />\n      )\n      : <></>}\n    <ThemeButton />\n    <Help />\n  </Box>\n);\n\nconst mapStateToProps = ({ words }) => ({\n  ReturnedWord: words.ReturnedWord,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(NavBar));\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Presets } from 'react-component-transition';\nimport {\n  chakra,\n  Box,\n  Input,\n  useDisclosure,\n  useColorModeValue,\n  Portal,\n  Fade,\n  ScaleFade,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst PopUpSearchBar = ({\n  history, HandleBackButtonClick,\n  getWords, isOpen2, onToggle2, onClose2, onOpen2,\n}) => {\n  const [Word, setWord] = useState('');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const InputField = useRef(null);\n\n  const HandleSearchButtonClickHeader = () => {\n    onToggle2();\n    if (InputField?.current) {\n      InputField.current.focus();\n    }\n  };\n\n  const HandleKeyDownOpenSearchBar = (event) => {\n    if (event.key === 'E' && event.ctrlKey && event.shiftKey) {\n      event.preventDefault();\n      onToggle2();\n      if (InputField?.current) {\n        InputField.current.focus();\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownOpenSearchBar);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownOpenSearchBar);\n    };\n  }, [isOpen2]);\n\n  useEffect(() => {\n    if (isOpen2) {\n      document.body.style.overflow = 'hidden';\n    }\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen2]);\n\n  const HandleEnterKeyPopUpSearchBar = (event) => {\n    if (event.key === 'Enter') {\n      HandleBackButtonClick(false);\n      getWords(Word);\n      history.push('/thesaurus');\n      onClose2();\n    }\n  };\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  return (\n    <>\n      {(isOpen2)\n        ? (\n          <>\n            <Box position=\"fixed\" zIndex=\"9999\" background=\"gray.800\" opacity=\"0.6\" style={{ height: '100vh', width: '100vw' }} />\n            <Box>\n              <Box position=\"fixed\" display=\"flex\" alignItems=\"flex-start\" justifyContent=\"center\" zIndex=\"9999\" style={{ height: '100vh', width: '100vw' }}>\n                <ScaleFade in={isOpen2}>\n                  <Box className=\"relative\">\n                    <InputGroup mt=\"32\">\n                      <InputLeftElement\n                        zIndex=\"9999999\"\n                        pointerEvents=\"none\"\n                        // eslint-disable-next-line react/no-children-prop\n                        children={<SearchIcon zIndex=\"9999999\" color={color} />}\n                      />\n                      <Input ref={InputField} style={{ zIndex: 999999 }} placeholder=\"Search a word\" focusBorderColor={focusBorderColorInput} onKeyDown={HandleEnterKeyPopUpSearchBar} background={bg} color={color} w={['16rem', 'xs', null]} rounded=\"xl\" onChange={getInputValue} />\n                    </InputGroup>\n                  </Box>\n                </ScaleFade>\n                <Box position=\"fixed\" style={{ height: '100vh', width: '100vw' }} background=\"transparent\" onClick={onClose2} />\n              </Box>\n            </Box>\n          </>\n        )\n        : <></>}\n    </>\n  );\n};\n\nexport default withRouter(PopUpSearchBar);\n","/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\nimport { connect } from 'react-redux';\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport {\n  useState,\n  useEffect,\n  React,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\nimport ThesaurusPage from '../pages/ThesaurusPage/ThesaurusPage';\nimport Routes from '../routes/routes';\nimport NavBar from '../components/NavBar/NavBar';\nimport PopUpSearchBar from '../components/popup-search-bar/popup-search-bar.component';\nimport {\n  setWord,\n  setReturnedWord,\n  setShortDef,\n  setPartOfSpeech,\n  setWordExample,\n  setAnts,\n  setSyns,\n  setWordArray,\n} from '../redux/words/words.action';\n\nconst App = (props) => {\n  const {\n    location,\n    Word,\n    setWord,\n    ReturnedWord,\n    setReturnedWord,\n    ShortDef,\n    setShortDef,\n    PartOfSpeech,\n    setPartOfSpeech,\n    WordExample,\n    setWordExample,\n    Ants,\n    setAnts,\n    Syns,\n    setSyns,\n    WordArray,\n    setWordArray,\n  } = props;\n  const [Error, setError] = useState(false);\n  const PathName = location.pathname;\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const {\n    isOpen: isOpen2,\n    onOpen: onOpen2,\n    onClose: onClose2,\n    onToggle: onToggle2,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [AvailableWordType, setAvailableWordType] = useState({});\n\n  // Used as a condition to render the values or skeleton in ThesaurusPage\n  useEffect(() => {\n    if (PathName === '/thesaurus' && !ShortDef.length) {\n      setWordsLoaded(false);\n    } else if (PathName === '/thesaurus' && ShortDef.length) {\n      setWordsLoaded(true);\n    }\n  });\n\n  const getInputValue = (event) => {\n    setWord(event);\n  };\n\n  const WordsArrayFilter = (wordObjects, type) => {\n    const filteredArray = wordObjects.filter((word) => word.fl === type);\n    return filteredArray[0];\n  };\n\n  const WordArraySetState = (wordArray) => {\n    const {\n      fl,\n      hwi: {\n        hw,\n      },\n      shortdef,\n      def: [{\n        sseq: dt,\n      }],\n      meta: {\n        syns,\n      },\n      meta: {\n        ants,\n      },\n    } = wordArray;\n    const Example = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n    const ExampleModified = Example.replace('{it}', '<em>').replace('{/it}', '</em>');\n    setAnts(ants[0]);\n    setSyns(syns[0]);\n    setReturnedWord(hw);\n    setPartOfSpeech(fl);\n    setShortDef(shortdef[0]);\n    setWordExample(ExampleModified);\n  };\n\n  const PartOfSpeechChecker = (wordObjects) => {\n    try {\n      wordObjects.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType((prevState) => ({ ...prevState, noun: true }));\n            break;\n          case 'verb':\n            setAvailableWordType((prevState) => ({ ...prevState, verb: true }));\n            break;\n          case 'adjective':\n            setAvailableWordType((prevState) => ({ ...prevState, adjective: true }));\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const InitialWord = (wordObjects) => {\n    try {\n      MainLoop:\n      for (let index = 0; index < 4; index++) {\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'noun') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'noun'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'verb') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'verb'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'adjective') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'adjective'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl !== 'noun' && 'verb' && 'adjective') {\n            WordArraySetState(WordsArrayFilter(wordObjects, element.fl));\n            break MainLoop;\n          }\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const PassRequstedWords = (wordObjects) => {\n    try {\n      if (wordObjects[0].hwi) {\n        setWordArray(wordObjects);\n        InitialWord(wordObjects);\n        PartOfSpeechChecker(wordObjects);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      console.log(error);\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = (word = Word) => {\n    if (word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(word)\n        .then((data) => PassRequstedWords(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const HandleSearchButtonClick = () => {\n    getWords();\n  };\n\n  const HandleBackButtonClick = (isSetword) => {\n    setWordsLoaded(false);\n    if (isSetword) {\n      setWord('');\n    }\n    setReturnedWord('');\n    setPartOfSpeech('');\n    setShortDef('');\n    setWordExample('');\n    setSyns([]);\n    setAnts([]);\n    setAvailableWordType({});\n  };\n\n  // Sets AvailableWordType to an empty object\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType({});\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  const HandleTabClick = (type) => {\n    switch (type) {\n      case 'verb':\n        WordArraySetState(WordsArrayFilter(WordArray, 'verb'));\n        break;\n      case 'noun':\n        WordArraySetState(WordsArrayFilter(WordArray, 'noun'));\n        break;\n      case 'adjective':\n        WordArraySetState(WordsArrayFilter(WordArray, 'adjective'));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const ThesaurusStore = () => (\n    <ThesaurusPage\n      getInputValue={getInputValue}\n      getWords={getWords}\n      AvailableWordType={AvailableWordType}\n      HandleTabClick={HandleTabClick}\n      Ants={Ants}\n      Syns={Syns}\n      WordsLoaded={WordsLoaded}\n      Link={Link}\n      HandleBackButtonClick={HandleBackButtonClick}\n      ReturnedWord={ReturnedWord}\n      PartOfSpeech={PartOfSpeech}\n      ShortDef={ShortDef}\n      WordExample={WordExample}\n    />\n  );\n\n  const Thesaurus = () => {\n    let ThesaurusComponent;\n    if (Word.length) {\n      if (ReturnedWord.length) {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      } else if (Error) {\n        ThesaurusComponent = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusComponent = <Redirect to=\"/\" />;\n    }\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusComponent;\n  };\n\n  // Clear all stored states if the pathName isn't thesaurus\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && ShortDef.length) {\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <>\n      {(PathName === '/thesaurus')\n        ? (\n          <PopUpSearchBar\n            isOpen2={isOpen2}\n            onOpen2={onOpen2}\n            onClose2={onClose2}\n            onToggle2={onToggle2}\n            HandleBackButtonClick={HandleBackButtonClick}\n            getInputValue={getInputValue}\n            getWords={getWords}\n            setWordsLoaded={setWordsLoaded}\n          />\n        )\n        : <></>}\n      <NavBar\n        PathName={PathName}\n        onOpen2={onOpen2}\n      />\n      <Routes\n        getWords={getWords}\n        Thesaurus={Thesaurus}\n        WordFindType={WordFindType}\n        WordFind={WordFind}\n        isOpen={isOpen}\n        getInputValue={getInputValue}\n        HandleSearchButtonClick={HandleSearchButtonClick}\n        Link={Link}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  ReturnedWord: words.ReturnedWord,\n  ShortDef: words.ShortDef,\n  PartOfSpeech: words.PartOfSpeech,\n  WordExample: words.WordExample,\n  Syns: words.Syns,\n  Ants: words.Ants,\n  WordArray: words.WordArray,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // eslint-disable-next-line no-undef\n  setWord: (word) => dispatch(setWord(word)),\n  setReturnedWord: (word) => dispatch(setReturnedWord(word)),\n  setShortDef: (word) => dispatch(setShortDef(word)),\n  setPartOfSpeech: (word) => dispatch(setPartOfSpeech(word)),\n  setWordExample: (word) => dispatch(setWordExample(word)),\n  setAnts: (word) => dispatch(setAnts(word)),\n  setSyns: (word) => dispatch(setSyns(word)),\n  setWordArray: (word) => dispatch(setWordArray(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n","import { wordsTypes } from './words.types';\n\n// const [Error, setError] = useState(false);\n// const PathName = location.pathname;\n// const {\n//   isOpen,\n//   onOpen,\n// } = useDisclosure();\n// const {\n//   isOpen: isOpen2,\n//   onOpen: onOpen2,\n//   onClose: onClose2,\n//   onToggle: onToggle2,\n// } = useDisclosure();\n// const [WordFind, setWordFind] = useState(false);\n// const [WordFindType, setWordFindType] = useState('');\n// const [WordsLoaded, setWordsLoaded] = useState(false);\n// const [WordArray, setWordArray] = useState([]);\n// const [AvailableWordType, setAvailableWordType] = useState({});\n\nconst INITIAL_STATE = {\n  Word: '',\n  ReturnedWord: '',\n  ShortDef: '',\n  PartOfSpeech: '',\n  WordExample: '',\n  Syns: [],\n  Ants: [],\n  WordArray: [],\n};\n\nconst wordsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case wordsTypes.SET_WORD:\n      return {\n        ...state,\n        Word: action.payload,\n      };\n    case wordsTypes.SET_RETURNED_WORD:\n      return {\n        ...state,\n        ReturnedWord: action.payload,\n      };\n    case wordsTypes.SET_SHORTDEF:\n      return {\n        ...state,\n        ShortDef: action.payload,\n      };\n    case wordsTypes.SET_PART_OF_SPEECH:\n      return {\n        ...state,\n        PartOfSpeech: action.payload,\n      };\n    case wordsTypes.SET_WORD_EXAMPLE:\n      return {\n        ...state,\n        WordExample: action.payload,\n      };\n    case wordsTypes.SET_SYNS:\n      return {\n        ...state,\n        Syns: action.payload,\n      };\n    case wordsTypes.SET_ANTS:\n      return {\n        ...state,\n        Ants: action.payload,\n      };\n    case wordsTypes.SET_WORD_ARRAY:\n      return {\n        ...state,\n        WordArray: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default wordsReducer;\n","import { combineReducers } from 'redux';\nimport wordsReducer from './words/words.reducer';\n\nexport default combineReducers({\n  words: wordsReducer,\n});\n","import { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\n\nconst middleWare = [logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middleWare));\n\nexport default store;\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport store from './redux/store';\nimport theme from './theme';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ChakraProvider>\n        <Router basename=\"/flary\">\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <App />\n        </Router>\n      </ChakraProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}