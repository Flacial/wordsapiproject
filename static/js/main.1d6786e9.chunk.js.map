{"version":3,"sources":["services/getRequest.js","routes/routes.jsx","components/help-button/help-button.component.jsx","components/theme-button/theme-button.component.jsx","components/header/header.component.jsx","components/spinner/spinner.component.jsx","containers/App.jsx","redux/words/words.reducer.js","redux/store.js","theme.js","index.jsx","redux/words/words.action.js","redux/words/words.types.js","components/error-boundary/error-boundary.component.jsx"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","SearchPage","lazy","Routes","Thesaurus","props","location","useLocation","exact","path","fallback","TransitionFade","key","Help","fontColorMain","useColorModeValue","focusBorderColorGeneral","boxShadow","focusBorderColorInput","KeyboardShortCutsColor","placement","_focus","focusBorderColor","outline","outlineColor","style","outlineStyle","m","mr","rounded","Question","width","background","fontFamily","fontSize","fontWeight","className","span","color","ThemeButton","useColorMode","colorMode","toggleColorMode","ThemeButtonRef","useRef","HandleKeyDownThemeIcon","event","ctrlKey","preventDefault","current","click","useEffect","document","addEventListener","removeEventListener","ref","onClick","Moon","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","height","xmlns","d","SearchButtonHeader","withRouter","InputFiledSearchBarPopUp","WordsLoaded","zIndex","position","top","h","display","justifyContent","pathname","LoadingSpinner","marginTop","thickness","speed","emptyColor","size","PopUpSearchBar","ThesaurusPage","connect","words","Word","WordArray","NounArray","VerbArray","AdjArray","PhraseArray","AdverbArray","AvailableWordType","dispatch","setWord","setWordArray","setNounArray","setVerbArray","setAdjArray","setPhraseArray","setAdverbArray","setAvailableWordType","resetAvailableWordType","useState","Error","setError","PathName","useDisclosure","isOpen","onOpen","WordFind","setWordFind","WordFindType","setWordFindType","setWordsLoaded","IsInitialDone","setInitialDone","wordObjects","noun","filteredArray","filter","fl","verb","adjective","phrase","adverb","setFilterArray","Object","keys","PassRequstedWords","hwi","forEach","arr","type","value","error","console","log","PartOfSpeechChecker","getWords","then","data","HandleBackButtonClick","isSetword","length","ThesaurusComponent","to","Link","HandleSearchButtonClick","INITIAL_STATE","ReturnedWord","ShortDef","PartOfSpeech","WordExample","Syns","Ants","isOpenSearchBar","isCloseSearchBar","wordsReducer","state","action","wordsTypes","ON_OPEN_SEARCHBAR","ON_CLOSE_SEARCHBAR","ON_TOGGLE_SEARCHBAR","SET_NOUN_ARRAY","payload","SET_AVAILABLE_WORD_TYPES","values","RESET_AVAILABLE_WORD_TYPES","SET_ADVERB_ARRAY","SET_PHRASE_ARRAY","SET_VERB_ARRAY","SET_ADJ_ARRAY","SET_WORD","SET_RETURNED_WORD","SET_SHORTDEF","SET_PART_OF_SPEECH","SET_WORD_EXAMPLE","SET_SYNS","SET_ANTS","SET_WORD_ARRAY","configureStore","reducer","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","store","StrictMode","basename","getElementById","onOpenSearchBar","onToggleSearchBar","onCloseSearchBar","ErrorBoundary","hasError","info","this","children","href","React","Component"],"mappings":"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","file":"static/js/main.1d6786e9.chunk.js","sourcesContent":["/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://flary-server.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\n// eslint-disable-next-line no-unused-vars\nimport React, { lazy, Suspense } from 'react';\nimport { Presets } from 'react-component-transition';\n\nconst SearchPage = lazy(() => import('../pages/SearchPage/SearchPage'));\n\nfunction Routes({ Thesaurus, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <Suspense fallback={null}>\n          <SearchPage {...props} />\n        </Suspense>\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {Thesaurus()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  Button,\n  chakra,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst Help = () => {\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const KeyboardShortCutsColor = useColorModeValue('gray.600', 'gray.400');\n\n  return (\n    <Popover placement=\"auto\">\n      <PopoverTrigger>\n        <Button\n          _focus={focusBorderColorInput}\n          focusBorderColor={focusBorderColorInput}\n          boxShadow=\"lg\"\n          outline=\"none\"\n          outlineColor=\"initial\"\n          style={{ outlineStyle: 'none' }}\n          m=\"4\"\n          mr={[null, '40', null]}\n          rounded=\"xl\"\n        >\n          <QuestionIcon />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent width=\"max-content\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Keyboard Shortcuts</PopoverHeader>\n        <PopoverBody className=\"whitespace-pre-wrap text-left\">\n          <strong>Global</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Switch theme:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + X</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Home Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Focus on input field:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + A</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Thesaurus Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Go to Home Page:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + Q</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Search bar:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + E</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          {/* <chakra.span>\n            Switch word type:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Shift + 1 or 2 or 3</chakra.span>\n          </chakra.span> */}\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Help;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  chakra, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\n\nconst ThemeButton = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const ThemeButtonRef = useRef(null);\n  const HandleKeyDownThemeIcon = (event) => {\n    if (event.key === 'X' && event.ctrlKey) {\n      event.preventDefault();\n      ThemeButtonRef.current.click();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownThemeIcon);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownThemeIcon);\n    };\n  }, []);\n\n  return (\n    <Button ref={ThemeButtonRef} _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={toggleColorMode}>\n      {colorMode === 'light'\n        ? <MoonIcon />\n        : (\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n          </chakra.svg>\n        )}\n    </Button>\n  );\n};\n\nexport default ThemeButton;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Box } from '@chakra-ui/react';\nimport React, { Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Presets } from 'react-component-transition';\nimport Help from '../help-button/help-button.component';\nimport ThemeButton from '../theme-button/theme-button.component';\n// const PopUpSearchBar = lazy(() => import('../popup-search-bar/popup-search-bar.component'));\n// import SearchButtonHeader from '../search-button/search-button.component';\n// import ErrorBoundary from '../error-boundary/error-boundary.component';\nconst SearchButtonHeader = lazy(() => import('../search-button/search-button.component'));\n\nconst Header = ({\n  InputFiledSearchBarPopUp,\n  location,\n  WordsLoaded,\n}) => (\n  <Box\n    zIndex=\"9991\"\n    position=\"sticky\"\n    top=\"0\"\n    h=\"70px\"\n    display=\"flex\"\n    justifyContent=\"flex-end\"\n  >\n    {(location.pathname === '/thesaurus' && WordsLoaded)\n      ? (\n        <>\n          <Presets.TransitionFade>\n            <Suspense fallback={null}>\n              <SearchButtonHeader\n                WordsLoaded={WordsLoaded}\n                InputFiledSearchBarPopUp={InputFiledSearchBarPopUp}\n              />\n            </Suspense>\n          </Presets.TransitionFade>\n        </>\n      )\n      : <></>}\n    <ThemeButton />\n    <Help />\n  </Box>\n);\n\nexport default withRouter(Header);\n","import { Box, Spinner, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nconst LoadingSpinner = () => {\n  const color = useColorModeValue('blue.500', 'orange');\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20\">\n      <Spinner\n        thickness=\"4px\"\n        speed=\"0.65s\"\n        emptyColor=\"gray.200\"\n        color={color}\n        size=\"xl\"\n      />\n    </Box>\n  );\n};\n\nexport default LoadingSpinner;\n","/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\n\n// TODO add react-swipeable\n\nimport { connect } from 'react-redux';\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport {\n  useState,\n  useEffect,\n  React,\n  lazy,\n  Suspense,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\n// import ThesaurusPage from '../pages/ThesaurusPage/ThesaurusPage';\nimport Routes from '../routes/routes';\nimport Header from '../components/header/header.component';\nimport {\n  setWord,\n  setWordArray,\n  setNounArray,\n  setAdjArray,\n  setVerbArray,\n  setPhraseArray,\n  setAdverbArray,\n  setAvailableWordType,\n  resetAvailableWordType,\n} from '../redux/words/words.action';\nimport ErrorBoundary from '../components/error-boundary/error-boundary.component';\nimport LoadingSpinner from '../components/spinner/spinner.component';\n\nconst PopUpSearchBar = lazy(() => import('../components/popup-search-bar/popup-search-bar.component'));\nconst ThesaurusPage = lazy(() => import('../pages/ThesaurusPage/ThesaurusPage'));\n\nconst App = (props) => {\n  const {\n    location,\n    Word,\n    setWord,\n    setWordArray,\n    setNounArray,\n    WordArray,\n    setVerbArray,\n    setAdjArray,\n    setPhraseArray,\n    setAdverbArray,\n    AvailableWordType,\n    setAvailableWordType,\n    resetAvailableWordType,\n  } = props;\n  const [Error, setError] = useState(false);\n  const PathName = location.pathname;\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [IsInitialDone, setInitialDone] = useState(false);\n\n  // TODO Fix Repeated setState calls\n  const setFilterArray = (wordObjects) => {\n    if (AvailableWordType.noun) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'noun');\n      setNounArray(filteredArray[0]);\n    }\n    if (AvailableWordType.verb) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'verb');\n      setVerbArray(filteredArray[0]);\n    }\n    if (AvailableWordType.adjective) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'adjective');\n      setAdjArray(filteredArray[0]);\n    }\n    if (AvailableWordType.phrase) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'phrase');\n      setPhraseArray(filteredArray[0]);\n    }\n    if (AvailableWordType.adverb) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'adverb');\n      setAdverbArray(filteredArray[0]);\n    }\n  };\n\n  useEffect(() => {\n    if (IsInitialDone) {\n      setFilterArray(WordArray);\n    }\n  }, [Object.keys(AvailableWordType)]);\n\n  const PartOfSpeechChecker = (wordObjects) => {\n    try {\n      wordObjects.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType({ type: 'noun', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'verb':\n            setAvailableWordType({ type: 'verb', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'adjective':\n            setAvailableWordType({ type: 'adjective', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'phrase':\n            setAvailableWordType({ type: 'phrase', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'adverb':\n            setAvailableWordType({ type: 'adverb', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const PassRequstedWords = (wordObjects) => {\n    try {\n      if (wordObjects[0].hwi) {\n        setWordArray(wordObjects);\n        // InitialWord(wordObjects);\n        PartOfSpeechChecker(wordObjects);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      console.log(error);\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = (word = Word) => {\n    if (word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(word)\n        .then((data) => PassRequstedWords(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const HandleSearchButtonClick = () => {\n    getWords();\n  };\n\n  const HandleBackButtonClick = (isSetword) => {\n    if (isSetword) {\n      setWord('');\n    }\n    setWordsLoaded(false);\n    resetAvailableWordType();\n    setNounArray([]);\n    setVerbArray([]);\n    setAdjArray([]);\n    setPhraseArray([]);\n    setAdverbArray([]);\n    setWordArray([]);\n  };\n\n  // Sets AvailableWordType to an empty object\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType([]);\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n  // TODO convert Thesaurus compoennt to lazy one\n  const ThesaurusStore = () => (\n    <Suspense fallback={<LoadingSpinner />}>\n      <ThesaurusPage\n        getWords={getWords}\n        AvailableWordType={AvailableWordType}\n        WordsLoaded={WordsLoaded}\n        Link={Link}\n        HandleBackButtonClick={HandleBackButtonClick}\n      />\n    </Suspense>\n  );\n\n  const Thesaurus = () => {\n    let ThesaurusComponent;\n    if (Word.length) {\n      if (Error) {\n        ThesaurusComponent = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusComponent = <Redirect to=\"/\" />;\n    }\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusComponent;\n  };\n\n  // Clear all stored states if the pathName is not thesaurus\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && WordArray?.[0]?.fl?.length) {\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <>\n      {(PathName === '/thesaurus' && WordsLoaded)\n        ? (\n          <ErrorBoundary>\n            <Suspense fallback={null}>\n              <PopUpSearchBar\n                HandleBackButtonClick={HandleBackButtonClick}\n                getWords={getWords}\n                setWordsLoaded={setWordsLoaded}\n              />\n            </Suspense>\n          </ErrorBoundary>\n        )\n        : <></>}\n      <Header\n        PathName={PathName}\n        WordsLoaded={WordsLoaded}\n      />\n      <Routes\n        getWords={getWords}\n        Thesaurus={Thesaurus}\n        WordFindType={WordFindType}\n        WordFind={WordFind}\n        isOpen={isOpen}\n        HandleSearchButtonClick={HandleSearchButtonClick}\n        Link={Link}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  WordArray: words.WordArray,\n  NounArray: words.NounArray,\n  VerbArray: words.VerbArray,\n  AdjArray: words.AdjArray,\n  PhraseArray: words.PhraseArray,\n  AdverbArray: words.AdverbArray,\n  AvailableWordType: words.AvailableWordType,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setWord: (word) => dispatch(setWord(word)),\n  setWordArray: (word) => dispatch(setWordArray(word)),\n  setNounArray: (word) => dispatch(setNounArray(word)),\n  setVerbArray: (word) => dispatch(setVerbArray(word)),\n  setAdjArray: (word) => dispatch(setAdjArray(word)),\n  setPhraseArray: (word) => dispatch(setPhraseArray(word)),\n  setAdverbArray: (word) => dispatch(setAdverbArray(word)),\n  setAvailableWordType: (word) => dispatch(setAvailableWordType(word)),\n  resetAvailableWordType: () => dispatch(resetAvailableWordType()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n","import { wordsTypes } from './words.types';\n\nconst INITIAL_STATE = {\n  Word: '',\n  ReturnedWord: '',\n  ShortDef: '',\n  PartOfSpeech: '',\n  WordExample: '',\n  Syns: [],\n  Ants: [],\n  WordArray: [],\n  NounArray: [],\n  VerbArray: [],\n  AdjArray: [],\n  PhraseArray: [],\n  AdverbArray: [],\n  AvailableWordType: [],\n  isOpenSearchBar: false,\n  isCloseSearchBar: true,\n};\n\nconst wordsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case wordsTypes.ON_OPEN_SEARCHBAR:\n      return {\n        ...state,\n        isOpenSearchBar: true,\n        isCloseSearchBar: false,\n      };\n\n    case wordsTypes.ON_CLOSE_SEARCHBAR:\n      return {\n        ...state,\n        isOpenSearchBar: false,\n        isCloseSearchBar: true,\n      };\n\n    case wordsTypes.ON_TOGGLE_SEARCHBAR:\n      return {\n        ...state,\n        isOpenSearchBar: !state.isOpenSearchBar,\n        isCloseSearchBar: !state.isCloseSearchBar,\n      };\n\n    case wordsTypes.SET_NOUN_ARRAY:\n      return {\n        ...state,\n        NounArray: action.payload,\n      };\n    case wordsTypes.SET_AVAILABLE_WORD_TYPES:\n      return {\n        ...state,\n        AvailableWordType: {\n          ...state.AvailableWordType,\n          [Object.keys(action.payload)[0]]: [Object.values(action.payload)[0]],\n        },\n      };\n    case wordsTypes.RESET_AVAILABLE_WORD_TYPES:\n      return {\n        ...state,\n        AvailableWordType: [],\n      };\n    case wordsTypes.SET_ADVERB_ARRAY:\n      return {\n        ...state,\n        AdverbArray: action.payload,\n      };\n    case wordsTypes.SET_PHRASE_ARRAY:\n      return {\n        ...state,\n        PhraseArray: action.payload,\n      };\n    case wordsTypes.SET_VERB_ARRAY:\n      return {\n        ...state,\n        VerbArray: action.payload,\n      };\n    case wordsTypes.SET_ADJ_ARRAY:\n      return {\n        ...state,\n        AdjArray: action.payload,\n      };\n    case wordsTypes.SET_WORD:\n      return {\n        ...state,\n        Word: action.payload,\n      };\n    case wordsTypes.SET_RETURNED_WORD:\n      return {\n        ...state,\n        ReturnedWord: action.payload,\n      };\n    case wordsTypes.SET_SHORTDEF:\n      return {\n        ...state,\n        ShortDef: action.payload,\n      };\n    case wordsTypes.SET_PART_OF_SPEECH:\n      return {\n        ...state,\n        PartOfSpeech: action.payload,\n      };\n    case wordsTypes.SET_WORD_EXAMPLE:\n      return {\n        ...state,\n        WordExample: action.payload,\n      };\n    case wordsTypes.SET_SYNS:\n      return {\n        ...state,\n        Syns: action.payload,\n      };\n    case wordsTypes.SET_ANTS:\n      return {\n        ...state,\n        Ants: action.payload,\n      };\n    case wordsTypes.SET_WORD_ARRAY:\n      return {\n        ...state,\n        WordArray: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default wordsReducer;\n","/* eslint-disable no-unused-vars */\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport wordsReducer from './words/words.reducer';\n\nexport default configureStore({\n  reducer: {\n    words: wordsReducer,\n  },\n  // devTools: false,\n  // middleware: [logger],\n});\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport store from './redux/store';\nimport theme from './theme';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ChakraProvider>\n        <Router basename=\"/flary\">\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <App />\n        </Router>\n      </ChakraProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n","/* eslint-disable import/prefer-default-export */\nimport { wordsTypes } from './words.types';\n\nexport const setAvailableWordType = (word) => ({\n  type: wordsTypes.SET_AVAILABLE_WORD_TYPES,\n  payload: {\n    [word.type]: word.value,\n  },\n});\n\nexport const resetAvailableWordType = () => ({\n  type: wordsTypes.RESET_AVAILABLE_WORD_TYPES,\n});\n\nexport const onOpenSearchBar = () => ({\n  type: wordsTypes.ON_OPEN_SEARCHBAR,\n});\n\nexport const onToggleSearchBar = () => ({\n  type: wordsTypes.ON_TOGGLE_SEARCHBAR,\n});\n\nexport const onCloseSearchBar = () => ({\n  type: wordsTypes.ON_CLOSE_SEARCHBAR,\n});\n\nexport const setPhraseArray = (word) => ({\n  type: wordsTypes.SET_PHRASE_ARRAY,\n  payload: word,\n});\n\nexport const setAdverbArray = (word) => ({\n  type: wordsTypes.SET_ADVERB_ARRAY,\n  payload: word,\n});\n\nexport const setNounArray = (word) => ({\n  type: wordsTypes.SET_NOUN_ARRAY,\n  payload: word,\n});\n\nexport const setVerbArray = (word) => ({\n  type: wordsTypes.SET_VERB_ARRAY,\n  payload: word,\n});\n\nexport const setAdjArray = (word) => ({\n  type: wordsTypes.SET_ADJ_ARRAY,\n  payload: word,\n});\n\nexport const setWord = (word) => ({\n  type: wordsTypes.SET_WORD,\n  payload: word,\n});\n\nexport const setReturnedWord = (word) => ({\n  type: wordsTypes.SET_RETURNED_WORD,\n  payload: word,\n});\n\nexport const setShortDef = (word) => ({\n  type: wordsTypes.SET_SHORTDEF,\n  payload: word,\n});\n\nexport const setPartOfSpeech = (word) => ({\n  type: wordsTypes.SET_PART_OF_SPEECH,\n  payload: word,\n});\n\nexport const setWordExample = (word) => ({\n  type: wordsTypes.SET_WORD_EXAMPLE,\n  payload: word,\n});\n\nexport const setAnts = (word) => ({\n  type: wordsTypes.SET_ANTS,\n  payload: word,\n});\n\nexport const setSyns = (word) => ({\n  type: wordsTypes.SET_SYNS,\n  payload: word,\n});\n\nexport const setWordArray = (word) => ({\n  type: wordsTypes.SET_WORD_ARRAY,\n  payload: word,\n});\n","/* eslint-disable import/prefer-default-export */\nexport const wordsTypes = {\n  SET_PHRASE_ARRAY: 'SET_PHRASE_ARRAY',\n  SET_ADVERB_ARRAY: 'SET_ADVERB_ARRAY',\n  SET_WORD: 'SET_WORD',\n  SET_RETURNED_WORD: 'SET_RETURNED_WORD',\n  SET_SHORTDEF: 'SET_SHORTDEF',\n  SET_PART_OF_SPEECH: 'SET_PART_OF_SPEECH',\n  SET_WORD_EXAMPLE: 'SET_WORD_EXAMPLE',\n  SET_SYNS: 'SET_SYNS',\n  SET_ANTS: 'SET_ANTS',\n  SET_WORD_ARRAY: 'SET_WORD_ARRAY',\n  SET_NOUN_ARRAY: 'SET_NOUN_ARRAY',\n  SET_VERB_ARRAY: 'SET_VERB_ARRAY',\n  SET_ADJ_ARRAY: 'SET_ADJ_ARRAY',\n  SET_AVAILABLE_WORD_TYPES: 'SET_AVAILABLE_WORD_TYPES',\n  RESET_AVAILABLE_WORD_TYPES: 'RESET_AVAILABLE_WORD_TYPES',\n  ON_OPEN_SEARCHBAR: 'ON_OPEN_SEARCHBAR',\n  ON_TOGGLE_SEARCHBAR: 'ON_TOGGLE_SEARCHBAR',\n  ON_CLOSE_SEARCHBAR: 'ON_CLOSE_SEARCHBAR',\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  componentDidCatch(error, info) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n    if (hasError) {\n      return (\n        <div style={{ color: 'red', fontWeight: 'bold' }}>\n          ERROR: Something went wrong. Please sumbit an issue here\n          {' '}\n          <a href=\"https://github.com/flacial/flary/issues/new/choose\">Link</a>\n          {' '}\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n"],"sourceRoot":""}