{"version":3,"sources":["components/loading-skeleton/loading-skeleton.component.jsx","components/words-container/words.container.component.jsx","components/words-container-content/words-container-content.jsx","components/tabs/tabs.component.jsx","pages/ThesaurusPage/ThesaurusPage.jsx"],"names":["LoadingSkeleton","SkeletonStartColor","useColorModeValue","SkeletonEndColor","TransitionFade","height","mt","mb","startColor","endColor","w","WordTypeContainer","styled","div","ChakraWordTypeContainer","chakra","WordsContainer","props","children","ml","mr","marginTop","boxShadow","gradientbg","isLargerthan440","bgGradient","WordAndType","tw","TheWord","h1","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","connect","words","Word","ReturnedWord","ShortDef","PartOfSpeech","WordExample","Syns","Ants","WordArray","withRouter","getWords","HandleBackButtonClick","history","WordsArray","fl","hw","hwi","shortdef","dt","def","sseq","syns","meta","ants","ExampleModified","t","replace","fontColorMain","fontColorHeaders","fontColorSynAnt","fontColorDarkWhiteSmallWords","hoverSynAntItems","textDecoration","onClickWords","event","target","textContent","push","turnWordInToList","MainObj","ReturnedObj","undefined","map","word","index","_hover","className","onClick","listStyleType","display","ThesaurusHeader","ChakraThesaurusHeader","color","slice","ReactHtmlParser","fontSize","fontFamily","fontStyle","WordsTabs","AvailableWordType","WordsLoaded","NounArray","VerbArray","AdjArray","PhraseArray","AdverbArray","Tabshover","bg","focusBorderColorGeneral","NounTabButton","useRef","VerbTabButton","AdjectiveTabButton","PhraseTabButton","AdverbTabButton","TabListElement","InitialWordArray","Object","keys","length","TheWholeThesaurus","defaultIndex","align","variant","ref","flexWrap","noun","_selected","_focus","outline","outlineColor","style","outlineStyle","verb","adjective","phrase","adverb","dispatch","setAvailableWordType","React","memo","Link","location","LinkChak","hover","background","fallbackBackground","HandleKeyDownBackButtonQctrl","key","ctrlKey","useEffect","document","addEventListener","removeEventListener","window","scrollTo","top","behavior","zIndex","left","to","pathname","CSS","supports","position","h","borderRadius"],"mappings":"qPAwBeA,EApBS,WACtB,IAAMC,EAAqBC,YAAkB,UAAW,cAClDC,EAAmBD,YAAkB,WAAY,cACvD,OACE,cAAC,IAAQE,eAAT,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAUC,OAAO,MAAMC,GAAG,IAAIC,GAAG,IAAIC,WAAYP,EAAoBQ,SAAUN,IAC/E,cAAC,IAAD,CAAUE,OAAO,MAAME,GAAG,IAAIC,WAAYP,EAAoBQ,SAAUN,IACxE,cAAC,IAAD,CAAUE,OAAO,MAAME,GAAG,IAAIC,WAAYP,EAAoBQ,SAAUN,IACxE,cAAC,IAAD,CAAUE,OAAO,MAAME,GAAG,IAAIC,WAAYP,EAAoBQ,SAAUN,IACxE,cAAC,IAAD,CAAUE,OAAO,MAAME,GAAG,IAAIC,WAAYP,EAAoBQ,SAAUN,IACxE,cAAC,IAAD,CAAUE,OAAO,MAAME,GAAG,IAAIC,WAAYP,EAAoBQ,SAAUN,IACxE,cAAC,IAAD,CAAUE,OAAO,MAAME,GAAG,IAAIC,WAAYP,EAAoBQ,SAAUN,IACxE,cAAC,IAAD,CAAUE,OAAO,MAAME,GAAG,IAAIC,WAAYP,EAAoBQ,SAAUN,IACxE,cAAC,IAAD,CAAUE,OAAO,MAAMK,EAAE,MAAMH,GAAG,IAAIC,WAAYP,EAAoBQ,SAAUN,U,SCRlFQ,E,OAAoBC,EAAOC,IAAV,0MAYjBC,EAA0BC,YAAOJ,GAoBxBK,EAlBQ,SAACC,GAAW,IAE/BC,EACED,EADFC,SAAUC,EACRF,EADQE,GAAIC,EACZH,EADYG,GAAIC,EAChBJ,EADgBI,UAAWC,EAC3BL,EAD2BK,UAAWC,EACtCN,EADsCM,WACtCN,EADkDO,gBAGtD,OACE,cAACV,EAAD,CACEQ,UAAWA,EACXG,WAAYF,EACZJ,GAAIA,EACJC,GAAIA,EACJC,UAAWA,EALb,SAOGH,K,6DCjBDQ,EAAcC,IAAGd,IAAN,sCAIXe,EAAUD,IAAGE,GAAN,2FAOPC,EAAgBf,YAAOa,GAEvBG,EAAUJ,IAAGK,KAAN,wEAMPC,EAAgBlB,YAAOgB,GAEvBG,EAAeP,IAAGQ,GAAN,mEAMZC,EAAqBrB,YAAOmB,GAE5BG,EAAkBV,IAAGd,IAAN,yDAKfyB,EAAUX,IAAGK,KAAN,oDAKPO,EAAgBxB,YAAOuB,GAEvBE,EAAOb,IAAGK,KAAN,4DAKJS,EAAa1B,YAAOyB,GAyKXE,eAXS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,MAAgB,CACtCC,KAAMD,EAAMC,KACZC,aAAcF,EAAME,aACpBC,SAAUH,EAAMG,SAChBC,aAAcJ,EAAMI,aACpBC,YAAaL,EAAMK,YACnBC,KAAMN,EAAMM,KACZC,KAAMP,EAAMO,KACZC,UAAWR,EAAMQ,aAGqB,KAAzBT,CAA+BU,aAvKhB,SAC5BnC,GACI,IAAD,QAEDoC,EAIEpC,EAJFoC,SACAC,EAGErC,EAHFqC,sBACAC,EAEEtC,EAFFsC,QACAC,EACEvC,EADFuC,WAIAC,EAcED,EAdFC,GAEEC,EAYAF,EAbFG,IACED,GAEFE,EAUEJ,EAVFI,SAEQC,EAfP,YAuBCL,EATFM,IAdC,MAeCC,KAGAC,EAKAR,EANFS,KACED,KAGAE,EAEAV,EAHFS,KACEC,KAIEC,GADe,oBAAGN,EAAG,GAAG,GAAG,GAAGA,UAAf,iBAAG,EAAiB,UAApB,iBAAG,EAAsB,UAAzB,aAAG,EAA2B,GAAGO,SAAjC,QAAsCP,EAAG,GAAG,GAAG,GAAGA,GAAG,GAAG,IACrCQ,QAAQ,OAAQ,QAAQA,QAAQ,QAAS,SAC3EnB,EAAOgB,EAAK,GACZjB,EAAOe,EAAK,GACZnB,EAAea,EACfX,EAAeU,EACfX,EAAWc,EAAS,GACpBZ,EAAcmB,EAEdG,EAAgBpE,YAAkB,WAAY,WAC9CqE,EAAmBrE,YAAkB,UAAW,WAChDsE,EAAkBtE,YAAkB,UAAW,cAC/CuE,EAA+BvE,YAAkB,UAAW,UAC5DwE,EAAmBxE,YAAkB,CAAEyE,eAAgB,aAAe,CAAEA,eAAgB,cAoBxFC,EAAe,SAACC,GACpBvB,IACAD,EAASwB,EAAMC,OAAOC,aACtBxB,EAAQyB,KAAK,eAGTC,EAAmB,SAACC,GACxB,IAAIC,EAAc,GAclB,YAbgBC,IAAZF,IACFC,EAAcD,EAAQG,KAAI,SAACC,EAAMC,GAC/B,YAA2BH,IAAvBF,EAAQK,EAAQ,GACX,cAAC,IAAD,CAAUC,OAAQd,EAAkBe,UAAU,iBAAiBC,QAASd,EAAce,cAAc,OAAOC,QAAQ,eAAnH,SAA+IN,GAARC,GAG9I,qCACE,cAAC,IAAD,CAAUC,OAAQd,EAAkBe,UAAU,iBAAiBC,QAASd,EAAce,cAAc,OAAOC,QAAQ,eAAnH,SAA8IN,GAAPA,GACvI,+BAAmB,SAARC,UAKZJ,GAKHU,EAAkBlE,IAAGE,GAAN,mFAQfiE,EAAwB/E,YAAO8E,GAErC,OACE,qCACE,cAACC,EAAD,CAAuBC,MAAOtB,EAA9B,uBAGA,eAAC/C,EAAD,WACE,cAAC,IAAQtB,eAAT,UACE,cAAC0B,EAAD,CAAeiE,MAAOzB,EAAtB,SACGzB,MAGL,cAACZ,EAAD,CAAe8D,MAAOtB,EAAtB,SACG1B,OAGL,eAACX,EAAD,CAAoB2D,MAAOxB,EAA3B,mCAEG,IACD,6BAAK1B,OAEP,eAACR,EAAD,WACE,cAACI,EAAD,CAAYsD,MAAOzB,EAAnB,SACGxB,IAEDA,EAASkD,MAAM,EAAG,KAAOhD,EAAYgD,MAAM,EAAG,GAC5C,6BAEA,eAACzD,EAAD,CAAewD,MAAOvB,EAAtB,UACG,IACD,wCACC,IACAyB,IAAgBjD,MAGvB,eAAC,IAAD,CAASzC,GAAG,IAAID,GAAG,IAAI4F,SAAS,MAAMC,WAAW,aAAaJ,MAAOxB,EAArE,yBAEG,IACD,cAAC,IAAOvC,KAAR,CAAaoE,UAAU,SAAvB,SAAiCvD,OAEnC,cAAC,IAAD,CAAKnC,EAAG,CAAC,OAAQ,MAAO,MAAxB,SACE,cAAC,IAAD,CAAeyF,WAAW,OAAOD,SAAS,KAAK/E,GAAG,IAAI4E,MAAOvB,EAA7D,SArDoBS,EAAiBhC,YAuD5BmC,IAATlC,EAEE,gCACE,eAAC,IAAD,CAAS3C,GAAG,IAAID,GAAG,IAAI4F,SAAS,MAAMC,WAAW,aAAaJ,MAAOxB,EAArE,yBAEG,IACD,cAAC,IAAOvC,KAAR,CAAaoE,UAAU,SAAvB,SAAiCvD,OAEnC,cAAC,IAAD,CAAKnC,EAAG,CAAC,OAAQ,MAAO,MAAxB,SACE,cAAC,IAAD,CAAeyF,WAAW,OAAOD,SAAS,KAAK/E,GAAG,IAAI4E,MAAOvB,EAA7D,SA/DcS,EAAiB/B,UAmEnC,uC,gBCvMNmD,EAAY,SAAC,GAWZ,IAVLC,EAUI,EAVJA,kBACAC,EASI,EATJA,YACAlD,EAQI,EARJA,SACAC,EAOI,EAPJA,sBACAkD,EAMI,EANJA,UACAC,EAKI,EALJA,UACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,YAGMtF,EAAYpB,YAAkB,gDAAiD,gDAC/EqB,EAAarB,YAAkB,iCAC/B2G,EAAY3G,YAAkB,CAAE6F,MAAO,WAAa,CAAEA,MAAO,WAC7De,EAAK5G,YAAkB,UAAW,6BAClC6F,EAAQ7F,YAAkB,UAAW,WACrC6G,EAA0B7G,YAAkB,CAAEoB,UAAW,qBAAuB,CAAEA,UAAW,qBAE7F0F,EAAgBC,iBAAO,MACvBC,EAAgBD,iBAAO,MACvBE,EAAqBF,iBAAO,MAC5BG,EAAkBH,iBAAO,MACzBI,EAAkBJ,iBAAO,MACzBK,EAAiBL,iBAAO,MAGxBM,EAAmB,WAAO,IAAD,EAC7B,cAAIC,aAAJ,IAAIA,QAAJ,UAAIA,OAAQC,KAAKjB,UAAjB,aAAI,EAAyBkB,QACpBlB,EAELgB,OAAOC,KAAKhB,GAAWiB,OAClBjB,EAELe,OAAOC,KAAKf,GAAUgB,OACjBhB,EAELc,OAAOC,KAAKd,GAAae,OACpBf,EAELa,OAAOC,KAAKb,GAAac,OACpBd,OADT,GA4CIe,EAAoB,SAACnE,GAAD,OACxB,cAAC,EAAD,CAAgBlC,UAAWA,EAAWC,WAAYA,EAAYJ,GAAI,CAAC,IAAK,MAAO,MAAOC,GAAI,CAAC,IAAK,MAAO,MAAOC,UAAW,CAAC,IAAK,KAAM,MAArI,SACE,cAAC,IAAQjB,eAAT,UACImG,EAEE,cAAC,IAAD,UACE,cAAC,EAAD,CACElD,SAAUA,EACVC,sBAAuBA,EACvBE,WAAYA,MAKhB,cAAC,EAAD,SAMV,OACE,mCACE,eAAC,IAAD,CAAMoE,aAAc,EAAGC,MAAM,SAASC,QAAQ,eAA9C,UAGE,cAAC,IAAQ1H,eAAT,UACE,eAAC,IAAD,CAAS2H,IAAKT,EAAgBU,SAAS,OAAO3G,UAAW,CAAC,IAAK,IAAK,MAApE,UACIiF,EAAkB2B,MAAUT,OAAOC,KAAKnB,GAAmBoB,OACzD,cAAC,IAAD,CAAKK,IAAKf,EAAexB,OAAQqB,EAAWqB,UAAW,CAAEnC,QAAOe,MAAMqB,OAAQpB,EAAyBqB,QAAQ,OAAOC,aAAa,UAAUC,MAAO,CAAEC,aAAc,QAApK,kBAGA,KACFjC,EAAkBkC,MAAUhB,OAAOC,KAAKnB,GAAmBoB,OACzD,cAAC,IAAD,CAAKK,IAAKb,EAAe1B,OAAQqB,EAAWqB,UAAW,CAAEnC,QAAOe,MAAMqB,OAAQpB,EAAyBqB,QAAQ,OAAOC,aAAa,UAAUC,MAAO,CAAEC,aAAc,QAApK,kBAGA,KACFjC,EAAkBmC,WAAejB,OAAOC,KAAKnB,GAAmBoB,OAC9D,cAAC,IAAD,CAAKK,IAAKZ,EAAoB3B,OAAQqB,EAAWqB,UAAW,CAAEnC,QAAOe,MAAMqB,OAAQpB,EAAyBqB,QAAQ,OAAOC,aAAa,UAAUC,MAAO,CAAEC,aAAc,QAAzK,uBAGA,KACFjC,EAAkBoC,QAAYlB,OAAOC,KAAKnB,GAAmBoB,OAC3D,cAAC,IAAD,CAAKK,IAAKX,EAAiB5B,OAAQqB,EAAWqB,UAAW,CAAEnC,QAAOe,MAAMqB,OAAQpB,EAAyBqB,QAAQ,OAAOC,aAAa,UAAUC,MAAO,CAAEC,aAAc,QAAtK,oBAGA,KACFjC,EAAkBqC,QAAYnB,OAAOC,KAAKnB,GAAmBoB,OAC3D,cAAC,IAAD,CAAKK,IAAKV,EAAiB7B,OAAQqB,EAAWqB,UAAW,CAAEnC,QAAOe,MAAMqB,OAAQpB,EAAyBqB,QAAQ,OAAOC,aAAa,UAAUC,MAAO,CAAEC,aAAc,QAAtK,oBAGA,UAIR,eAAC,IAAD,WACE,cAAC,IAAD,UACGZ,EAAkBJ,OAMnBC,OAAOC,KAAKhB,GAAWiB,QAAoC,SAA1BH,IAAmB9D,GAEhD,cAAC,IAAD,UACGkE,EAAkBlB,KAGrB,KAGJe,OAAOC,KAAKf,GAAUgB,QAAoC,cAA1BH,IAAmB9D,GAE/C,cAAC,IAAD,UACGkE,EAAkBjB,KAGrB,KAGJc,OAAOC,KAAKd,GAAae,QAAoC,WAA1BH,IAAmB9D,GAElD,cAAC,IAAD,UACGkE,EAAkBhB,KAGrB,KAGJa,OAAOC,KAAKb,GAAac,QAAoC,WAA1BH,IAAmB9D,GAElD,cAAC,IAAD,UACGkE,EAAkBf,KAGrB,cAsBDlE,eAdS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,MAAgB,CACtCQ,UAAWR,EAAMQ,UACjBqD,UAAW7D,EAAM6D,UACjBC,UAAW9D,EAAM8D,UACjBC,SAAU/D,EAAM+D,SAChBC,YAAahE,EAAMgE,YACnBC,YAAajE,EAAMiE,YACnBN,kBAAmB3D,EAAM2D,sBAGA,SAACsC,GAAD,MAAe,CACxCC,qBAAsB,SAACvD,GAAD,OAAUsD,EAASC,YAAqBvD,QAGjD5C,CAA6CoG,IAAMC,KAAK1C,ICnHxDjD,uBA7EO,SAACnC,GAAW,IAE9B+H,EAOE/H,EAPF+H,KACA1F,EAMErC,EANFqC,sBACAiD,EAKEtF,EALFsF,YACAD,EAIErF,EAJFqF,kBACAjD,EAGEpC,EAHFoC,SACAE,EAEEtC,EAFFsC,QACA0F,EACEhI,EADFgI,SAEIC,EAAWnI,YAAOiI,GAClBlC,EAAK5G,YAAkB,UAAW,6BAClC6F,EAAQ7F,YAAkB,UAAW,WACrCiJ,EAAQjJ,YAAkB,CAAEkJ,WAAY,YAAc,CAAEA,WAAY,aACpErC,EAA0B7G,YAAkB,CAAEoB,UAAW,qBAAuB,CAAEA,UAAW,qBAC7F+H,EAAqBnJ,YAAkB,0BAA2B,uBAElEoJ,EAA+B,SAACzE,GAClB,MAAdA,EAAM0E,KAAe1E,EAAM2E,UAC7BlG,IACAC,EAAQyB,KAAK,OAkBjB,OAdAyE,qBAAU,WAER,OADAC,SAASC,iBAAiB,UAAWL,GAC9B,WACLI,SAASE,oBAAoB,UAAWN,MAEzC,IAEHG,qBAAU,WACRI,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,aAEX,IAGD,qCACGzD,EAEG,cAAC,IAAD,CAAK0D,OAAO,OAAOxE,UAAU,cAAcyE,KAAM,CAAC,KAAM,KAAM,MAA9D,SACE,cAAChB,EAAD,CAAUf,OAAQpB,EAAyBD,GAAIA,EAAIf,MAAOA,EAAOP,OAAQ2D,EAAOzD,QAASpC,EAAuBmC,UAxD/G,wLAwDmI0E,GAAG,IAAvI,8BAKF,6BACoB,eAAtBlB,EAASmB,SAEP,cAAC,IAAD,CACEhB,YAAciB,IAAIC,SAAS,kBAAmB,cACrCjB,EACT5D,UAAU,gBACVwE,OAAO,OACPM,SAAS,QACTR,IAAI,IACJS,EAAE,OACF9J,EAAE,OACF+J,aAAa,kBAIf,6BACJ,cAAC,IAAQrK,eAAT,UACE,cAAC,EAAD,CACEkG,kBAAmBA,EACnBC,YAAaA,EACblD,SAAUA,EACVC,sBAAuBA","file":"static/js/7.c71c78e5.chunk.js","sourcesContent":["import React from 'react';\nimport { Stack, Skeleton, useColorModeValue } from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\n\nconst LoadingSkeleton = () => {\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200');\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500');\n  return (\n    <Presets.TransitionFade>\n      <Stack>\n        <Skeleton height=\"9px\" mt=\"4\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" w=\"80%\" mb=\"3\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n      </Stack>\n    </Presets.TransitionFade>\n  );\n};\n\nexport default LoadingSkeleton;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  useColorModeValue,\n  useMediaQuery,\n  chakra,\n} from '@chakra-ui/react';\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 15px;\npadding-bottom: 20px;\nword-spacing: 0;\n`;\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer);\n\nconst WordsContainer = (props) => {\n  const {\n    children, ml, mr, marginTop, boxShadow, gradientbg, isLargerthan440,\n  } = props;\n\n  return (\n    <ChakraWordTypeContainer\n      boxShadow={boxShadow}\n      bgGradient={gradientbg}\n      ml={ml}\n      mr={mr}\n      marginTop={marginTop}\n    >\n      {children}\n    </ChakraWordTypeContainer>\n  );\n};\n\nexport default WordsContainer;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\nimport React, { useEffect } from 'react';\nimport { Presets } from 'react-component-transition';\nimport tw from 'tailwind-styled-components';\nimport ReactHtmlParser from 'react-html-parser';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  chakra,\n  Heading,\n  UnorderedList,\n  useColorModeValue,\n  Box,\n  ListItem,\n} from '@chakra-ui/react';\n\nconst WordAndType = tw.div`\n    mt-1\n`;\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`;\n\nconst ChakraTheWord = chakra(TheWord);\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`;\n\nconst ChakraTheType = chakra(TheType);\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`;\n\nconst ChakraSynAntHeader = chakra(SynAntHeader);\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`;\n\nconst Example = tw.span`\n    text-xl\n    block\n`;\n\nconst ChakraExample = chakra(Example);\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`;\n\nconst ChakraText = chakra(Text);\n\nconst WordsContainerContent = (\n  props,\n) => {\n  const {\n    getWords,\n    HandleBackButtonClick,\n    history,\n    WordsArray,\n  } = props;\n\n  const {\n    fl,\n    hwi: {\n      hw,\n    },\n    shortdef,\n    def: [{\n      sseq: dt,\n    }],\n    meta: {\n      syns,\n    },\n    meta: {\n      ants,\n    },\n  } = WordsArray;\n  const ExampleSentence = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n  const ExampleModified = ExampleSentence.replace('{it}', '<em>').replace('{/it}', '</em>');\n  const Ants = ants[0];\n  const Syns = syns[0];\n  const ReturnedWord = hw;\n  const PartOfSpeech = fl;\n  const ShortDef = shortdef[0];\n  const WordExample = ExampleModified;\n\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7');\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02');\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hoverSynAntItems = useColorModeValue({ textDecoration: 'underline' }, { textDecoration: 'underline' });\n\n  // TODO fix changetitle\n  // const changeTitle = (ComponentState) => {\n  //   const initialTitle = 'Thesaurus By Flary';\n  //   if (ComponentState === 'mount') {\n  //     document.title = ReturnedWord.length ? `${ReturnedWord[0].toUpperCase()\n  //  + ReturnedWord.slice(1)} Synonyms, ${ReturnedWord} Antonyms | Flary Thesaurus` : initialTitle;\n  //   } else {\n  //     document.title = initialTitle;\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   changeTitle('mount');\n  //   return () => {\n  //     changeTitle();\n  //   };\n  // }, [ReturnedWord]);\n\n  const onClickWords = (event) => {\n    HandleBackButtonClick();\n    getWords(event.target.textContent);\n    history.push('/thesaurus');\n  };\n  // Change synonyms and antonyms words to list items\n  const turnWordInToList = (MainObj) => {\n    let ReturnedObj = [];\n    if (MainObj !== undefined) {\n      ReturnedObj = MainObj.map((word, index) => {\n        if (MainObj[index + 1] === undefined) {\n          return <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={index}>{word}</ListItem>;\n        }\n        return (\n          <>\n            <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={word}>{word}</ListItem>\n            <span key={index}>{',\\u00A0'}</span>\n          </>\n        );\n      });\n    }\n    return ReturnedObj;\n  };\n  const OrderSynonyms = () => turnWordInToList(Syns);\n  const OrderAntonyms = () => turnWordInToList(Ants);\n\n  const ThesaurusHeader = tw.h1`\nitalic\nfont-serif\ntext-3xl\nfont-bold\ninline-block\n`;\n\n  const ChakraThesaurusHeader = chakra(ThesaurusHeader);\n\n  return (\n    <>\n      <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n        Thesaurus\n      </ChakraThesaurusHeader>\n      <WordAndType>\n        <Presets.TransitionFade>\n          <ChakraTheWord color={fontColorMain}>\n            {ReturnedWord}\n          </ChakraTheWord>\n        </Presets.TransitionFade>\n        <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n          {PartOfSpeech}\n        </ChakraTheType>\n      </WordAndType>\n      <ChakraSynAntHeader color={fontColorHeaders}>\n        Synonyms & Antonyms of\n        {' '}\n        <em>{ReturnedWord}</em>\n      </ChakraSynAntHeader>\n      <SynAntContainer>\n        <ChakraText color={fontColorMain}>\n          {ShortDef}\n        </ChakraText>\n        {(ShortDef.slice(0, 5) === WordExample.slice(0, 5))\n          ? <></>\n          : (\n            <ChakraExample color={fontColorSynAnt}>\n              {' '}\n              <strong>//</strong>\n              {' '}\n              {ReactHtmlParser(WordExample)}\n            </ChakraExample>\n          )}\n        <Heading mb=\"1\" mt=\"2\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n          Synonyms for\n          {' '}\n          <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n        </Heading>\n        <Box w={['100%', '70%', null]}>\n          <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n        </Box>\n        {(Ants !== undefined)\n          ? (\n            <div>\n              <Heading mb=\"1\" mt=\"4\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                Antonyms for\n                {' '}\n                <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n              </Heading>\n              <Box w={['100%', '70%', null]}>\n                <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n              </Box>\n            </div>\n          )\n          : <></>}\n      </SynAntContainer>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  ReturnedWord: words.ReturnedWord,\n  ShortDef: words.ShortDef,\n  PartOfSpeech: words.PartOfSpeech,\n  WordExample: words.WordExample,\n  Syns: words.Syns,\n  Ants: words.Ants,\n  WordArray: words.WordArray,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(WordsContainerContent));\n","/* eslint-disable max-len */\n/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable no-unused-vars */\n\nimport {\n  TabList, Tab, Tabs, TabPanels, TabPanel, useColorModeValue,\n} from '@chakra-ui/react';\n// eslint-disable-next-line no-unused-vars\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Presets } from 'react-component-transition';\nimport { connect } from 'react-redux';\nimport LoadingSkeleton from '../loading-skeleton/loading-skeleton.component';\nimport WordsContainer from '../words-container/words.container.component';\nimport WordsContainerContent from '../words-container-content/words-container-content';\nimport ErrorBoundary from '../error-boundary/error-boundary.component';\nimport { setAvailableWordType } from '../../redux/words/words.action';\n\nconst WordsTabs = ({\n  AvailableWordType,\n  WordsLoaded,\n  getWords,\n  HandleBackButtonClick,\n  NounArray,\n  VerbArray,\n  AdjArray,\n  PhraseArray,\n  AdverbArray,\n  // WordArray,\n}) => {\n  const boxShadow = useColorModeValue('0px 0px 25px #a1a1a1, -10px -10px 0px #3B82F6', '0px 0px 11px #1c1c1c, -10px -10px 0px orange');\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)');\n  const Tabshover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  const NounTabButton = useRef(null);\n  const VerbTabButton = useRef(null);\n  const AdjectiveTabButton = useRef(null);\n  const PhraseTabButton = useRef(null);\n  const AdverbTabButton = useRef(null);\n  const TabListElement = useRef(null);\n\n  // eslint-disable-next-line consistent-return\n  const InitialWordArray = () => {\n    if (Object?.keys(NounArray)?.length) {\n      return NounArray;\n    }\n    if (Object.keys(VerbArray).length) {\n      return VerbArray;\n    }\n    if (Object.keys(AdjArray).length) {\n      return AdjArray;\n    }\n    if (Object.keys(PhraseArray).length) {\n      return PhraseArray;\n    }\n    if (Object.keys(AdverbArray).length) {\n      return AdverbArray;\n    }\n  };\n\n  // eslint-disable-next-line consistent-return\n  // const HandleKeyDownTabsButtonSwitch = (event, AvailableWordType) => {\n  //   switch (event.key) {\n  //     case '!': // Noun 1\n  //       if (TabListElement?.current?.childElementCount >= 2) {\n  //         event.preventDefault();\n  //         return (!AvailableWordType.noun && AdjectiveTabButton?.current?.click()) || NounTabButton?.current?.click();\n  //       }\n  //       break;\n  //     case '@': // Verb 2\n  //       event.preventDefault();\n  //       return VerbTabButton?.current?.click();\n  //     case '#': // Adjective 3\n  //       if (AvailableWordType?.noun && AvailableWordType?.verb) {\n  //         event.preventDefault();\n  //         return AdverbTabButton?.current?.click() || PhraseTabButton?.current?.click() || AdjectiveTabButton?.current?.click();\n  //       }\n  //       break;\n  //     case '$': // Phrase 4\n  //       event.preventDefault();\n  //       return AdverbTabButton?.current?.click() || PhraseTabButton?.current?.click();\n  //     case '%': // Adverb 5\n  //       if (AvailableWordType?.phrase) {\n  //         event.preventDefault();\n  //         AdverbTabButton?.current?.click();\n  //       }\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   document.addEventListener('keydown', (e) => HandleKeyDownTabsButtonSwitch(e, AvailableWordType));\n  //   return () => {\n  //     document.removeEventListener('keydown', (e) => HandleKeyDownTabsButtonSwitch(e, AvailableWordType));\n  //   };\n  // }, [AvailableWordType]);\n\n  const TheWholeThesaurus = (WordsArray) => (\n    <WordsContainer boxShadow={boxShadow} gradientbg={gradientbg} ml={['0', '9em', null]} mr={['0', '9em', null]} marginTop={['3', null, null]}>\n      <Presets.TransitionFade>\n        {(WordsLoaded)\n          ? (\n            <ErrorBoundary>\n              <WordsContainerContent\n                getWords={getWords}\n                HandleBackButtonClick={HandleBackButtonClick}\n                WordsArray={WordsArray}\n              />\n            </ErrorBoundary>\n          )\n          : (\n            <LoadingSkeleton />\n          )}\n      </Presets.TransitionFade>\n    </WordsContainer>\n  );\n\n  return (\n    <>\n      <Tabs defaultIndex={0} align=\"center\" variant=\"soft-rounded\">\n        {/* <Box className='backdrop-blur z-50' display='flex'\n         justifyContent='center' h='22' width='full'  position='fixed' bottom='0'> */}\n        <Presets.TransitionFade>\n          <TabList ref={TabListElement} flexWrap=\"wrap\" marginTop={['4', '2', null]}>\n            {(AvailableWordType.noun) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={NounTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Noun</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.verb) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={VerbTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Verb</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.adjective) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={AdjectiveTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adjective</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.phrase) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={PhraseTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Phrase</Tab>\n              : null\n            )\n              : null}\n            {(AvailableWordType.adverb) ? ((Object.keys(AvailableWordType).length)\n              ? <Tab ref={AdverbTabButton} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adverb</Tab>\n              : null\n            )\n              : null}\n          </TabList>\n        </Presets.TransitionFade>\n        {/* </Box> */}\n        <TabPanels>\n          <TabPanel>\n            {TheWholeThesaurus(InitialWordArray())}\n          </TabPanel>\n          {/* )\n              : null\n          } */}\n          {\n            Object.keys(VerbArray).length && InitialWordArray().fl !== 'verb'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(VerbArray)}\n                </TabPanel>\n              )\n              : null\n          }\n          {\n            Object.keys(AdjArray).length && InitialWordArray().fl !== 'adjective'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(AdjArray)}\n                </TabPanel>\n              )\n              : null\n          }\n          {\n            Object.keys(PhraseArray).length && InitialWordArray().fl !== 'phrase'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(PhraseArray)}\n                </TabPanel>\n              )\n              : null\n          }\n          {\n            Object.keys(AdverbArray).length && InitialWordArray().fl !== 'adverb'\n              ? (\n                <TabPanel>\n                  {TheWholeThesaurus(AdverbArray)}\n                </TabPanel>\n              )\n              : null\n          }\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  WordArray: words.WordArray,\n  NounArray: words.NounArray,\n  VerbArray: words.VerbArray,\n  AdjArray: words.AdjArray,\n  PhraseArray: words.PhraseArray,\n  AdverbArray: words.AdverbArray,\n  AvailableWordType: words.AvailableWordType,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAvailableWordType: (word) => dispatch(setAvailableWordType(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(WordsTabs));\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport {\n  useEffect, React,\n} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\nimport WordsTabs from '../../components/tabs/tabs.component';\n\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (props) => {\n  const {\n    Link,\n    HandleBackButtonClick,\n    WordsLoaded,\n    AvailableWordType,\n    getWords,\n    history,\n    location,\n  } = props;\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const hover = useColorModeValue({ background: 'gray.200' }, { background: 'gray.700' });\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const fallbackBackground = useColorModeValue('rgba(255, 255, 255, .9)', 'rgba(0, 0, 0, 0.26)');\n\n  const HandleKeyDownBackButtonQctrl = (event) => {\n    if (event.key === 'Q' && event.ctrlKey) {\n      HandleBackButtonClick();\n      history.push('/');\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  return (\n    <>\n      {WordsLoaded\n        ? (\n          <Box zIndex=\"9991\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={focusBorderColorGeneral} bg={bg} color={color} _hover={hover} onClick={HandleBackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      {(location.pathname === '/thesaurus')\n        ? (\n          <Box\n            background={!(CSS.supports('backdrop-filter', 'blur(5px)'))\n                  && fallbackBackground}\n            className=\"backdrop-blur\"\n            zIndex=\"9990\"\n            position=\"fixed\"\n            top=\"0\"\n            h=\"70px\"\n            w=\"full\"\n            borderRadius=\"0 0 20px 20px\"\n          />\n        )\n        // TODO Break tabs into its own compoonent\n        : <></>}\n      <Presets.TransitionFade>\n        <WordsTabs\n          AvailableWordType={AvailableWordType}\n          WordsLoaded={WordsLoaded}\n          getWords={getWords}\n          HandleBackButtonClick={HandleBackButtonClick}\n        />\n      </Presets.TransitionFade>\n    </>\n  );\n};\n\nexport default withRouter(ThesaurusPage);\n"],"sourceRoot":""}