{"version":3,"sources":["../../../src/__utils.ts","../../../src/Search.tsx","../../../src/form-control.tsx","../../../src/flush-sync.ts","../../../src/use-form-control.ts","../../../src/input.tsx","../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js","../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js","../node_modules/framer-motion/dist/es/utils/use-force-update.js","../../../src/scale-fade.tsx","../../../src/input-group.tsx","../../../src/input-element.tsx"],"names":["EASINGS","ease","easeIn","easeOut","easeInOut","SearchIcon","createIcon","d","displayName","createContext","strict","name","FormControl","forwardRef","styles","useMultiStyleConfig","props","id","isReadOnly","uuid","useId","idProp","labelId","feedbackId","helpTextId","React","useBoolean","getHelpTextProps","forwardedRef","ref","mergeRefs","node","setHasHelpText","getErrorMessageProps","setHasFeedbackText","getRootProps","role","isRequired","isInvalid","isDisabled","isFocused","onFocus","setFocus","event","flushSync","ReactDOM","isFunction","fn","onBlur","hasFeedbackText","hasHelpText","htmlProps","useFormControlProvider","omitThemingProps","className","cx","contextValue","value","__css","width","position","FormHelperText","field","useFormControlContext","useStyles","useFormControl","labelIds","disabled","readOnly","required","callAllHandlers","useFormControlProps","ariaAttr","Input","input","_className","presenceId","getPresenceId","PresenceChild","_a","children","initial","isPresent","onExitComplete","custom","presenceAffectsLayout","presenceChildren","useConstant","newChildrenMap","context","useMemo","childId","set","allComplete","forEach","isComplete","register","delete","undefined","_","key","useEffect","size","createElement","PresenceContext","Provider","Map","getChildKey","child","AnimatePresence","_b","exitBeforeEnter","_c","forceRender","unloadingRef","useRef","__read","useState","forcedRenderCount","setForcedRenderCount","useUnmountEffect","current","useCallback","useForceUpdate","layoutContext","useContext","SharedLayoutContext","isSharedLayout","forceUpdate","isInitialRender","filteredChildren","filtered","Children","isValidElement","push","onlyElements","presentChildren","allChildren","exiting","Set","updateChildLookup","Fragment","map","childrenToRender","__spread","presentKeys","targetKeys","numPresent","length","i","indexOf","add","get","insertionIndex","splice","removeIndex","findIndex","presentChild","has","cloneElement","scaleFadeConfig","animate","exit","variants","opacity","scale","initialScale","transitionEnd","transition","duration","enter","ScaleFade","in","reverse","show","unmountOnExit","isOpen","motionProps","mergeWith","InputGroup","groupStyles","validChildren","getValidChildren","clones","paddingRight","theming","variant","paddingLeft","pl","pr","borderLeftRadius","borderRightRadius","display","StyledElement","chakra","baseStyle","alignItems","justifyContent","top","zIndex","InputElement","placement","elementStyles","InputLeftElement","InputRightElement"],"mappings":"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","file":"static/js/3.a306c79a.chunk.js","sourcesContent":["import { Variant } from \"framer-motion\"\n\nexport type MotionVariants<T extends string> = Record<T, Variant>\n\nexport const EASINGS = {\n  ease: [0.25, 0.1, 0.25, 1],\n  easeIn: [0.4, 0, 1, 1],\n  easeOut: [0, 0, 0.2, 1],\n  easeInOut: [0.4, 0, 0.2, 1],\n}\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const SearchIcon = createIcon({\n  d:\n    \"M23.384,21.619,16.855,15.09a9.284,9.284,0,1,0-1.768,1.768l6.529,6.529a1.266,1.266,0,0,0,1.768,0A1.251,1.251,0,0,0,23.384,21.619ZM2.75,9.5a6.75,6.75,0,1,1,6.75,6.75A6.758,6.758,0,0,1,2.75,9.5Z\",\n  displayName: \"SearchIcon\",\n})\n","import { useBoolean, useId } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport {\n  createContext,\n  withFlushSync,\n  mergeRefs,\n  PropGetter,\n} from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<FormControlProviderContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const getHelpTextProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getErrorMessageProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: withFlushSync(setFocus.on),\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { getRootProps, htmlProps: _, ...context } = useFormControlProvider(\n    ownProps,\n  )\n\n  const className = cx(\"chakra-form-control\", props.className)\n  const contextValue = React.useMemo(() => context, [context])\n\n  return (\n    <FormControlProvider value={contextValue}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className={className}\n          __css={{\n            width: \"100%\",\n            position: \"relative\",\n          }}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n  const className = cx(\"chakra-form__helper-text\", props.className)\n  return (\n    <chakra.div\n      {...field?.getHelpTextProps(props, ref)}\n      __css={styles.helperText}\n      className={className}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n","import { AnyFunction, isFunction } from \"@chakra-ui/utils\"\nimport * as ReactDOM from \"react-dom\"\n\n/** This is a workaround for React Concurrent Mode issue https://github.com/facebook/react/issues/18591. Remove once it's fixed. */\nexport function withFlushSync<T extends AnyFunction>(fn: any) {\n  return (event: Parameters<T>[0]) => {\n    const flushSync = (ReactDOM as any).flushSync as\n      | ((fn: AnyFunction) => void)\n      | undefined\n    if (isFunction(flushSync)) {\n      flushSync(() => {\n        fn(event)\n      })\n    } else {\n      fn(event)\n    }\n  }\n}\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   *  please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nexport const Input = forwardRef<InputProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const ownProps = omitThemingProps(props)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nif (__DEV__) {\n  Input.displayName = \"Input\"\n}\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import { useMemo, useEffect, createElement } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\nvar presenceId = 0;\nfunction getPresenceId() {\n    var id = presenceId;\n    presenceId++;\n    return id;\n}\nvar PresenceChild = function (_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useConstant(getPresenceId);\n    var context = useMemo(function () { return ({\n        id: id,\n        initial: initial,\n        isPresent: isPresent,\n        custom: custom,\n        onExitComplete: function (childId) {\n            presenceChildren.set(childId, true);\n            var allComplete = true;\n            presenceChildren.forEach(function (isComplete) {\n                if (!isComplete)\n                    allComplete = false;\n            });\n            allComplete && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n        },\n        register: function (childId) {\n            presenceChildren.set(childId, false);\n            return function () { return presenceChildren.delete(childId); };\n        },\n    }); }, \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(function () {\n        presenceChildren.forEach(function (_, key) { return presenceChildren.set(key, false); });\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    useEffect(function () {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [isPresent]);\n    return (createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useContext, useRef, createElement, Fragment, cloneElement, Children, isValidElement } from 'react';\nimport { __spread } from 'tslib';\nimport { SharedLayoutContext, isSharedLayout } from '../../context/SharedLayoutContext.js';\nimport { useForceUpdate } from '../../utils/use-force-update.js';\nimport { PresenceChild } from './PresenceChild.js';\n\nfunction getChildKey(child) {\n    return child.key || \"\";\n}\nfunction updateChildLookup(children, allChildren) {\n    var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n            if (seenChildren.has(key)) {\n                console.warn(\"Children of AnimatePresence require unique keys. \\\"\" + key + \"\\\" is a duplicate.\");\n            }\n            seenChildren.add(key);\n        }\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * @library\n *\n * Any `Frame` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * // As items are added and removed from `items`\n * export function Items({ items }) {\n *   return (\n *     <AnimatePresence>\n *       {items.map(item => (\n *         <Frame\n *           key={item.id}\n *           initial={{ opacity: 0 }}\n *           animate={{ opacity: 1 }}\n *           exit={{ opacity: 0 }}\n *         />\n *       ))}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * @motion\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var forceRender = useForceUpdate();\n    var layoutContext = useContext(SharedLayoutContext);\n    if (isSharedLayout(layoutContext)) {\n        forceRender = layoutContext.forceUpdate;\n    }\n    var isInitialRender = useRef(true);\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(filteredChildren);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map())\n        .current;\n    // A living record of all currently exiting components.\n    var exiting = useRef(new Set()).current;\n    updateChildLookup(filteredChildren, allChildren);\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    if (isInitialRender.current) {\n        isInitialRender.current = false;\n        return (createElement(Fragment, null, filteredChildren.map(function (child) { return (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    var childrenToRender = __spread(filteredChildren);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n        else {\n            // In case this key has re-entered, remove from the exiting list\n            exiting.delete(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    presentChildren.current = childrenToRender;\n    if (process.env.NODE_ENV !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (createElement(Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n","import { useCallback, useRef, useState } from 'react';\nimport { __read } from 'tslib';\nimport { useUnmountEffect } from './use-unmount-effect.js';\n\nfunction useForceUpdate() {\n    var unloadingRef = useRef(false);\n    var _a = __read(useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    useUnmountEffect(function () { return (unloadingRef.current = true); });\n    return useCallback(function () {\n        !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n}\n\nexport { useForceUpdate };\n","import { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype ScaleFadeVariants = MotionVariants<\"enter\" | \"exit\">\n\nconst variants: ScaleFadeVariants = {\n  exit: (props) => ({\n    opacity: 0,\n    ...(props.reverse\n      ? { scale: props.initialScale }\n      : { transitionEnd: { scale: props.initialScale } }),\n    transition: {\n      duration: 0.1,\n      ease: EASINGS.easeOut,\n    },\n  }),\n  enter: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.25,\n      ease: EASINGS.easeInOut,\n    },\n  },\n}\n\nexport const scaleFadeConfig: HTMLMotionProps<\"div\"> = {\n  initial: \"exit\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants,\n}\n\nexport interface ScaleFadeProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * The initial scale of the element\n   * @default 0.95\n   */\n  initialScale?: number\n  /**\n   * If `true`, the element will transition back to exit state\n   */\n  reverse?: boolean\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in?: boolean\n}\n\nexport const ScaleFade = React.forwardRef<HTMLDivElement, ScaleFadeProps>(\n  (props, ref) => {\n    const {\n      unmountOnExit,\n      in: isOpen,\n      reverse = true,\n      initialScale = 0.95,\n      className,\n      ...rest\n    } = props\n\n    const show = unmountOnExit ? isOpen && unmountOnExit : true\n    const custom = { initialScale, reverse }\n\n    const motionProps = mergeWith(scaleFadeConfig, {\n      custom,\n      animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    })\n\n    return (\n      <AnimatePresence custom={custom}>\n        {show && (\n          <motion.div\n            ref={ref}\n            className={cx(\"chakra-offset-slide\", className)}\n            {...motionProps}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  ScaleFade.displayName = \"ScaleFade\"\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-input__group\", className)\n  const groupStyles: InputGroupProps = {}\n\n  const validChildren = getValidChildren(children)\n\n  const input: any = styles.field\n\n  validChildren.forEach((child: any) => {\n    if (!styles) return\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingLeft = input.height ?? input.h\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingRight = input.height ?? input.h\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderRightRadius = 0\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderLeftRadius = 0\n    }\n  })\n\n  const clones = validChildren.map((child: any) => {\n    const { pl, paddingLeft, pr, paddingRight } = child.props\n\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    const theming = {\n      size: child.props?.size || props.size,\n      variant: child.props?.variant || props.variant,\n    }\n\n    return child.type.id !== \"Input\"\n      ? React.cloneElement(child, theming)\n      : React.cloneElement(child, {\n          ...theming,\n          paddingLeft: pl ?? paddingLeft ?? groupStyles?.paddingLeft,\n          paddingRight: pr ?? paddingRight ?? groupStyles?.paddingRight,\n          borderLeftRadius: groupStyles?.borderLeftRadius,\n          borderRightRadius: groupStyles?.borderRightRadius,\n        })\n  })\n\n  return (\n    <chakra.div\n      className={_className}\n      ref={ref}\n      __css={{\n        width: \"100%\",\n        display: \"flex\",\n        position: \"relative\",\n      }}\n      {...rest}\n    >\n      <StylesProvider value={styles}>{clones}</StylesProvider>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\"\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">((props, ref) => {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useStyles()\n  const input: any = styles.field\n\n  const elementStyles: SystemStyleObject = {\n    [placement]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    paddingX: input?.paddingLeft ?? input?.pl,\n  }\n\n  return <StyledElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\"\n}\n\nexport const InputLeftElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\"\n}\n\nexport const InputRightElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\"\n}\n"],"sourceRoot":""}