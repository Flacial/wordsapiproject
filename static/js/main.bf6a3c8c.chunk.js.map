{"version":3,"sources":["redux/words/words.action.js","redux/words/words.types.js","services/getRequest.js","components/loading-skeleton/loading-skeleton.component.jsx","components/words-container/words.container.component.jsx","components/words-container-content/words-container-content.jsx","components/tabs/tabs.component.jsx","pages/ThesaurusPage/ThesaurusPage.jsx","routes/routes.jsx","components/help-button/help-button.component.jsx","components/theme-button/theme-button.component.jsx","components/search-button/search-button.component.jsx","components/error-boundary/error-boundary.component.jsx","components/NavBar/NavBar.jsx","containers/App.jsx","redux/words/words.reducer.js","redux/root-reducer.js","redux/store.js","theme.js","index.jsx"],"names":["setWord","word","type","wordsTypes","SET_WORD","payload","setReturnedWord","SET_RETURNED_WORD","setShortDef","SET_SHORTDEF","setPartOfSpeech","SET_PART_OF_SPEECH","setWordExample","SET_WORD_EXAMPLE","setAnts","SET_ANTS","setSyns","SET_SYNS","setWordArray","SET_WORD_ARRAY","getRequest","a","fetch","method","headers","body","JSON","stringify","request","json","LoadingSkeleton","SkeletonStartColor","useColorModeValue","SkeletonEndColor","TransitionFade","height","mt","mb","startColor","endColor","w","WordTypeContainer","styled","div","ChakraWordTypeContainer","chakra","WordsContainer","props","children","ml","mr","marginTop","boxShadow","gradientbg","isLargerthan440","bgGradient","WordAndType","tw","TheWord","h1","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","connect","words","Word","ReturnedWord","ShortDef","PartOfSpeech","WordExample","Syns","Ants","WordArray","withRouter","getWords","HandleBackButtonClick","history","fontColorMain","fontColorHeaders","fontColorSynAnt","fontColorDarkWhiteSmallWords","hoverSynAntItems","textDecoration","onClickWords","event","target","textContent","push","turnWordInToList","MainObj","ReturnedObj","undefined","map","index","_hover","className","onClick","listStyleType","display","color","slice","ReactHtmlParser","fontSize","fontFamily","fontStyle","ThesaurusHeader","ChakraThesaurusHeader","WordsTabs","AvailableWordType","WordsLoaded","Tabshover","bg","focusBorderColorGeneral","NounTabButton","useRef","VerbTabButton","AdjectiveTabButton","WordsArrayFilter","wordObjects","filter","fl","WordArraySetState","wordArray","hw","hwi","shortdef","dt","def","sseq","syns","meta","ants","ExampleModified","t","replace","HandleTabClick","HandleKeyDownTabsButton123","key","preventDefault","current","click","useEffect","document","addEventListener","removeEventListener","TheWholeThesaurus","align","variant","noun","Object","keys","length","ref","_selected","_focus","outline","outlineColor","style","outlineStyle","verb","adjective","dispatch","React","memo","Link","location","LinkChak","hover","background","fallbackBackground","changeTitle","ComponentState","initialTitle","title","toUpperCase","HandleKeyDownBackButtonQctrl","ctrlKey","window","scrollTo","top","behavior","zIndex","left","to","pathname","CSS","supports","position","h","borderRadius","SearchPage","lazy","Routes","Thesaurus","useLocation","exact","path","fallback","Help","focusBorderColorInput","KeyboardShortCutsColor","placement","focusBorderColor","m","rounded","Question","width","fontWeight","ThemeButton","useColorMode","colorMode","toggleColorMode","ThemeButtonRef","HandleKeyDownThemeIcon","Moon","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","xmlns","d","SearchButtonHeader","onOpen2","Search","ErrorBoundary","state","hasError","error","console","log","this","Component","InputFiledSearchBarPopUp","setWordsLoaded","onToggle2","onClose2","isOpen2","getInputValue","justifyContent","PopUpSearchBar","useState","Error","setError","PathName","useDisclosure","isOpen","onOpen","onClose","onToggle","WordFind","setWordFind","WordFindType","setWordFindType","setAvailableWordType","PassRequstedWords","MainLoop","element","InitialWord","forEach","arr","prevState","PartOfSpeechChecker","then","data","isSetword","ThesaurusStore","ThesaurusComponent","HandleSearchButtonClick","INITIAL_STATE","wordsReducer","action","combineReducers","store","logger","createStore","rootReducer","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.bf6a3c8c.chunk.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { wordsTypes } from './words.types';\n\nexport const setWord = (word) => ({\n  type: wordsTypes.SET_WORD,\n  payload: word,\n});\n\nexport const setReturnedWord = (word) => ({\n  type: wordsTypes.SET_RETURNED_WORD,\n  payload: word,\n});\n\nexport const setShortDef = (word) => ({\n  type: wordsTypes.SET_SHORTDEF,\n  payload: word,\n});\n\nexport const setPartOfSpeech = (word) => ({\n  type: wordsTypes.SET_PART_OF_SPEECH,\n  payload: word,\n});\n\nexport const setWordExample = (word) => ({\n  type: wordsTypes.SET_WORD_EXAMPLE,\n  payload: word,\n});\n\nexport const setAnts = (word) => ({\n  type: wordsTypes.SET_ANTS,\n  payload: word,\n});\n\nexport const setSyns = (word) => ({\n  type: wordsTypes.SET_SYNS,\n  payload: word,\n});\n\nexport const setWordArray = (word) => ({\n  type: wordsTypes.SET_WORD_ARRAY,\n  payload: word,\n});\n","/* eslint-disable import/prefer-default-export */\nexport const wordsTypes = {\n  SET_WORD: 'SET_WORD',\n  SET_RETURNED_WORD: 'SET_RETURNED_WORD',\n  SET_SHORTDEF: 'SET_SHORTDEF',\n  SET_PART_OF_SPEECH: 'SET_PART_OF_SPEECH',\n  SET_WORD_EXAMPLE: 'SET_WORD_EXAMPLE',\n  SET_SYNS: 'SET_SYNS',\n  SET_ANTS: 'SET_ANTS',\n  SET_WORD_ARRAY: 'SET_WORD_ARRAY',\n};\n","/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://flary-server.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","import React from 'react';\nimport { Stack, Skeleton, useColorModeValue } from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\n\nconst LoadingSkeleton = () => {\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200');\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500');\n  return (\n    <Presets.TransitionFade>\n      <Stack>\n        <Skeleton height=\"9px\" mt=\"4\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" w=\"80%\" mb=\"3\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n      </Stack>\n    </Presets.TransitionFade>\n  );\n};\n\nexport default LoadingSkeleton;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  useColorModeValue,\n  useMediaQuery,\n  chakra,\n} from '@chakra-ui/react';\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 15px;\npadding-bottom: 20px;\nword-spacing: 0;\n`;\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer);\n\nconst WordsContainer = (props) => {\n  const {\n    children, ml, mr, marginTop, boxShadow, gradientbg, isLargerthan440,\n  } = props;\n\n  return (\n    <ChakraWordTypeContainer\n      boxShadow={boxShadow}\n      bgGradient={gradientbg}\n      ml={ml}\n      mr={mr}\n      marginTop={marginTop}\n    >\n      {children}\n    </ChakraWordTypeContainer>\n  );\n};\n\nexport default WordsContainer;\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-undef */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\nimport { Presets } from 'react-component-transition';\nimport tw from 'tailwind-styled-components';\nimport ReactHtmlParser from 'react-html-parser';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  chakra,\n  Heading,\n  UnorderedList,\n  useColorModeValue,\n  Box,\n  ListItem,\n} from '@chakra-ui/react';\n\nconst WordAndType = tw.div`\n    mt-1\n`;\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`;\n\nconst ChakraTheWord = chakra(TheWord);\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`;\n\nconst ChakraTheType = chakra(TheType);\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`;\n\nconst ChakraSynAntHeader = chakra(SynAntHeader);\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`;\n\nconst Example = tw.span`\n    text-xl\n    block\n`;\n\nconst ChakraExample = chakra(Example);\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`;\n\nconst ChakraText = chakra(Text);\n\nconst WordsContainerContent = (\n  props,\n) => {\n  const {\n    ReturnedWord,\n    PartOfSpeech,\n    ShortDef,\n    WordExample,\n    Syns,\n    Ants,\n    getWords,\n    HandleBackButtonClick,\n    history,\n  } = props;\n\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7');\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02');\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hoverSynAntItems = useColorModeValue({ textDecoration: 'underline' }, { textDecoration: 'underline' });\n\n  const onClickWords = (event) => {\n    HandleBackButtonClick();\n    getWords(event.target.textContent);\n    history.push('/thesaurus');\n  };\n  // Change synonyms and antonyms words to list items\n  const turnWordInToList = (MainObj) => {\n    let ReturnedObj = [];\n    if (MainObj !== undefined) {\n      ReturnedObj = MainObj.map((word, index) => {\n        if (MainObj[index + 1] === undefined) {\n          return <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={index}>{word}</ListItem>;\n        }\n        return (\n          <>\n            <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={word}>{word}</ListItem>\n            <span key={index}>{',\\u00A0'}</span>\n          </>\n        );\n      });\n    }\n    return ReturnedObj;\n  };\n  const OrderSynonyms = () => turnWordInToList(Syns);\n  const OrderAntonyms = () => turnWordInToList(Ants);\n\n  return (\n    <>\n      <WordAndType>\n        <Presets.TransitionFade>\n          <ChakraTheWord color={fontColorMain}>\n            {ReturnedWord}\n          </ChakraTheWord>\n        </Presets.TransitionFade>\n        <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n          {PartOfSpeech}\n        </ChakraTheType>\n      </WordAndType>\n      <ChakraSynAntHeader color={fontColorHeaders}>\n        Synonyms & Antonyms of\n        {' '}\n        <em>{ReturnedWord}</em>\n      </ChakraSynAntHeader>\n      <SynAntContainer>\n        <ChakraText color={fontColorMain}>\n          {ShortDef}\n        </ChakraText>\n        {(ShortDef.slice(0, 5) === WordExample.slice(0, 5))\n          ? <></>\n          : (\n            <ChakraExample color={fontColorSynAnt}>\n              {' '}\n              <strong>//</strong>\n              {' '}\n              {ReactHtmlParser(WordExample)}\n            </ChakraExample>\n          )}\n        <Heading mb=\"1\" mt=\"2\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n          Synonyms for\n          {' '}\n          <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n        </Heading>\n        <Box w={['100%', '70%', null]}>\n          <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n        </Box>\n        {(Ants !== undefined)\n          ? (\n            <div>\n              <Heading mb=\"1\" mt=\"4\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                Antonyms for\n                {' '}\n                <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n              </Heading>\n              <Box w={['100%', '70%', null]}>\n                <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n              </Box>\n            </div>\n          )\n          : <></>}\n      </SynAntContainer>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  ReturnedWord: words.ReturnedWord,\n  ShortDef: words.ShortDef,\n  PartOfSpeech: words.PartOfSpeech,\n  WordExample: words.WordExample,\n  Syns: words.Syns,\n  Ants: words.Ants,\n  WordArray: words.WordArray,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(WordsContainerContent));\n","/* eslint-disable no-shadow */\n/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport {\n  TabList, Tab, Tabs, TabPanels, TabPanel, useColorModeValue, chakra,\n} from '@chakra-ui/react';\nimport React, { useRef, useEffect } from 'react';\nimport { Presets } from 'react-component-transition';\nimport { connect } from 'react-redux';\nimport LoadingSkeleton from '../loading-skeleton/loading-skeleton.component';\nimport WordsContainer from '../words-container/words.container.component';\nimport WordsContainerContent from '../words-container-content/words-container-content';\nimport {\n  setWord,\n  setReturnedWord,\n  setShortDef,\n  setPartOfSpeech,\n  setWordExample,\n  setAnts,\n  setSyns,\n  setWordArray,\n} from '../../redux/words/words.action';\n\nconst ThesaurusHeader = tw.h1`\nitalic\nfont-serif\ntext-3xl\nfont-bold\ninline-block\n`;\n\nconst ChakraThesaurusHeader = chakra(ThesaurusHeader);\n\nconst WordsTabs = ({\n  AvailableWordType,\n  WordsLoaded,\n  getWords,\n  WordExample,\n  HandleBackButtonClick,\n  WordArray,\n  setReturnedWord,\n  setShortDef,\n  setPartOfSpeech,\n  setWordExample,\n  setAnts,\n  setSyns,\n}) => {\n  const boxShadow = useColorModeValue('0px 0px 25px #a1a1a1, -10px -10px 0px #3B82F6', '0px 0px 11px #1c1c1c, -10px -10px 0px orange');\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)');\n  const Tabshover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  const NounTabButton = useRef(null);\n  const VerbTabButton = useRef(null);\n  const AdjectiveTabButton = useRef(null);\n\n  const WordsArrayFilter = (wordObjects, type) => {\n    const filteredArray = wordObjects.filter((word) => word.fl === type);\n    return filteredArray[0];\n  };\n\n  const WordArraySetState = (wordArray) => {\n    const {\n      fl,\n      hwi: {\n        hw,\n      },\n      shortdef,\n      def: [{\n        sseq: dt,\n      }],\n      meta: {\n        syns,\n      },\n      meta: {\n        ants,\n      },\n    } = wordArray;\n    const Example = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n    const ExampleModified = Example.replace('{it}', '<em>').replace('{/it}', '</em>');\n    setAnts(ants[0]);\n    setSyns(syns[0]);\n    setReturnedWord(hw);\n    setPartOfSpeech(fl);\n    setShortDef(shortdef[0]);\n    setWordExample(ExampleModified);\n  };\n\n  const HandleTabClick = (type) => {\n    switch (type) {\n      case 'verb':\n        WordArraySetState(WordsArrayFilter(WordArray, 'verb'));\n        break;\n      case 'noun':\n        WordArraySetState(WordsArrayFilter(WordArray, 'noun'));\n        break;\n      case 'adjective':\n        WordArraySetState(WordsArrayFilter(WordArray, 'adjective'));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const HandleKeyDownTabsButton123 = (event) => {\n    switch (event.key) {\n      case '!':\n        event.preventDefault();\n        NounTabButton?.current?.click();\n        break;\n      case '@':\n        event.preventDefault();\n        VerbTabButton?.current?.click();\n        break;\n      case '#':\n        event.preventDefault();\n        AdjectiveTabButton?.current?.click();\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownTabsButton123);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownTabsButton123);\n    };\n  }, []);\n\n  const TheWholeThesaurus = () => (\n    <WordsContainer boxShadow={boxShadow} gradientbg={gradientbg} ml={['0', '9em', null]} mr={['0', '9em', null]} marginTop={['3', null, null]}>\n      <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n        Thesaurus\n      </ChakraThesaurusHeader>\n      <Presets.TransitionFade>\n        {(WordsLoaded)\n          ? (\n            <WordsContainerContent\n              getWords={getWords}\n              HandleBackButtonClick={HandleBackButtonClick}\n            />\n          )\n          : (\n            <LoadingSkeleton />\n          )}\n      </Presets.TransitionFade>\n    </WordsContainer>\n  );\n\n  return (\n    <>\n      <Tabs align=\"center\" variant=\"soft-rounded\">\n        {/* <Box className='backdrop-blur z-50' display='flex'\n         justifyContent='center' h='22' width='full'  position='fixed' bottom='0'> */}\n        <TabList marginTop={['4', '2', null]}>\n          {(AvailableWordType.noun) ? ((Object.keys(AvailableWordType).length)\n            ? <Tab ref={NounTabButton} onClick={() => HandleTabClick('noun')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Noun</Tab>\n            : <></>\n          )\n            : <></>}\n          {(AvailableWordType.verb) ? ((Object.keys(AvailableWordType).length)\n            ? <Tab ref={VerbTabButton} onClick={() => HandleTabClick('verb')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Verb</Tab>\n            : <></>\n          )\n            : <></>}\n          {(AvailableWordType.adjective) ? ((Object.keys(AvailableWordType).length)\n            ? <Tab ref={AdjectiveTabButton} onClick={() => HandleTabClick('adjective')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adjective</Tab>\n            : <></>\n          )\n            : <></>}\n        </TabList>\n        {/* </Box> */}\n        <TabPanels>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  ReturnedWord: words.ReturnedWord,\n  ShortDef: words.ShortDef,\n  PartOfSpeech: words.PartOfSpeech,\n  WordExample: words.WordExample,\n  Syns: words.Syns,\n  Ants: words.Ants,\n  WordArray: words.WordArray,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // eslint-disable-next-line no-undef\n  setWord: (word) => dispatch(setWord(word)),\n  setReturnedWord: (word) => dispatch(setReturnedWord(word)),\n  setShortDef: (word) => dispatch(setShortDef(word)),\n  setPartOfSpeech: (word) => dispatch(setPartOfSpeech(word)),\n  setWordExample: (word) => dispatch(setWordExample(word)),\n  setAnts: (word) => dispatch(setAnts(word)),\n  setSyns: (word) => dispatch(setSyns(word)),\n  setWordArray: (word) => dispatch(setWordArray(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(WordsTabs));\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport {\n  useEffect, React,\n} from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { connect } from 'react-redux';\nimport WordsTabs from '../../components/tabs/tabs.component';\n\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (props) => {\n  const {\n    Link,\n    HandleBackButtonClick,\n    ReturnedWord,\n    WordsLoaded,\n    AvailableWordType,\n    getWords,\n    history,\n    location,\n  } = props;\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const hover = useColorModeValue({ background: 'gray.200' }, { background: 'gray.700' });\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const fallbackBackground = useColorModeValue('rgba(255, 255, 255, .9)', 'rgba(0, 0, 0, 0.26)');\n\n  const changeTitle = (ComponentState) => {\n    const initialTitle = 'Thesaurus By Flary';\n    if (ComponentState === 'mount') {\n      document.title = ReturnedWord.length ? `${ReturnedWord[0].toUpperCase() + ReturnedWord.slice(1)} Synonyms, ${ReturnedWord} Antonyms | Flary Thesaurus` : initialTitle;\n    } else {\n      document.title = initialTitle;\n    }\n  };\n\n  useEffect(() => {\n    changeTitle('mount');\n    return () => {\n      changeTitle();\n    };\n  }, [ReturnedWord]);\n\n  const HandleKeyDownBackButtonQctrl = (event) => {\n    if (event.key === 'Q' && event.ctrlKey) {\n      HandleBackButtonClick();\n      history.push('/');\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  return (\n    <>\n      {ReturnedWord.length\n        ? (\n          <Box zIndex=\"9991\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={focusBorderColorGeneral} bg={bg} color={color} _hover={hover} onClick={HandleBackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      {(location.pathname === '/thesaurus')\n        ? (\n          <Box\n            background={!(CSS.supports('backdrop-filter', 'blur(5px)'))\n                  && fallbackBackground}\n            className=\"backdrop-blur\"\n            zIndex=\"9990\"\n            position=\"fixed\"\n            top=\"0\"\n            h=\"70px\"\n            w=\"full\"\n            borderRadius=\"0 0 20px 20px\"\n          />\n        )\n        // TODO Break tabs into its own compoonent\n        : <></>}\n      <WordsTabs\n        AvailableWordType={AvailableWordType}\n        WordsLoaded={WordsLoaded}\n        getWords={getWords}\n        HandleBackButtonClick={HandleBackButtonClick}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  ReturnedWord: words.ReturnedWord,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(ThesaurusPage));\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\n// eslint-disable-next-line no-unused-vars\nimport React, { lazy, Suspense } from 'react';\nimport { Presets } from 'react-component-transition';\n\nconst SearchPage = lazy(() => import('../pages/SearchPage/SearchPage'));\n\nfunction Routes({ Thesaurus, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <Suspense fallback={null}>\n          <SearchPage {...props} />\n        </Suspense>\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {Thesaurus()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  Button,\n  chakra,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst Help = () => {\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const KeyboardShortCutsColor = useColorModeValue('gray.600', 'gray.400');\n\n  return (\n    <Popover placement=\"auto\">\n      <PopoverTrigger>\n        <Button\n          _focus={focusBorderColorInput}\n          focusBorderColor={focusBorderColorInput}\n          boxShadow=\"lg\"\n          outline=\"none\"\n          outlineColor=\"initial\"\n          style={{ outlineStyle: 'none' }}\n          m=\"4\"\n          mr={[null, '40', null]}\n          rounded=\"xl\"\n        >\n          <QuestionIcon />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent width=\"max-content\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Keyboard Shortcuts</PopoverHeader>\n        <PopoverBody className=\"whitespace-pre-wrap text-left\">\n          <strong>Global</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Switch theme:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + X</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Home Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Focus on input field:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + A</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Thesaurus Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Go to Home Page:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + Q</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Search bar:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + E</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Switch word type:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Shift + 1 or 2 or 3</chakra.span>\n          </chakra.span>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Help;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  chakra, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\n\nconst ThemeButton = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const ThemeButtonRef = useRef(null);\n  const HandleKeyDownThemeIcon = (event) => {\n    if (event.key === 'X' && event.ctrlKey) {\n      event.preventDefault();\n      ThemeButtonRef.current.click();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownThemeIcon);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownThemeIcon);\n    };\n  }, []);\n\n  return (\n    <Button ref={ThemeButtonRef} _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={toggleColorMode}>\n      {colorMode === 'light'\n        ? <MoonIcon />\n        : (\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n          </chakra.svg>\n        )}\n    </Button>\n  );\n};\n\nexport default ThemeButton;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  Button, useColorModeValue,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst SearchButtonHeader = ({ onOpen2 }) => {\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n    <Button _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={onOpen2}>\n      <SearchIcon />\n    </Button>\n  );\n};\n\nexport default SearchButtonHeader;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n    if (hasError) {\n      return <div>Something went wrong</div>;\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Box } from '@chakra-ui/react';\nimport React, { Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Help from '../help-button/help-button.component';\nimport ThemeButton from '../theme-button/theme-button.component';\nimport SearchButtonHeader from '../search-button/search-button.component';\nimport ErrorBoundary from '../error-boundary/error-boundary.component';\n\nconst PopUpSearchBar = lazy(() => import('../popup-search-bar/popup-search-bar.component'));\n\nconst NavBar = ({\n  onOpen2,\n  InputFiledSearchBarPopUp,\n  location,\n  ReturnedWord,\n  getWords,\n  setWordsLoaded,\n  HandleBackButtonClick,\n  onToggle2,\n  onClose2,\n  isOpen2,\n  getInputValue,\n}) => (\n  <Box\n    zIndex=\"9991\"\n    position=\"sticky\"\n    top=\"0\"\n    h=\"70px\"\n    display=\"flex\"\n    justifyContent=\"flex-end\"\n  >\n    {(location.pathname === '/thesaurus' && ReturnedWord.length)\n      ? (\n        <>\n          {/* <ErrorBoundary>\n            <Suspense fallback={null}>\n              <PopUpSearchBar\n                isOpen2={isOpen2}\n                onOpen2={onOpen2}\n                onClose2={onClose2}\n                onToggle2={onToggle2}\n                HandleBackButtonClick={HandleBackButtonClick}\n                getWords={getWords}\n                setWordsLoaded={setWordsLoaded}\n              />\n            </Suspense>\n          </ErrorBoundary> */}\n          <SearchButtonHeader\n            onOpen2={onOpen2}\n            InputFiledSearchBarPopUp={InputFiledSearchBarPopUp}\n          />\n        </>\n      )\n      : <></>}\n    <ThemeButton />\n    <Help />\n  </Box>\n);\n\nconst mapStateToProps = ({ words }) => ({\n  ReturnedWord: words.ReturnedWord,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(NavBar));\n","/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\nimport { connect } from 'react-redux';\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport {\n  useState,\n  useEffect,\n  React,\n  lazy,\n  Suspense,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\nimport ThesaurusPage from '../pages/ThesaurusPage/ThesaurusPage';\nimport Routes from '../routes/routes';\nimport NavBar from '../components/NavBar/NavBar';\nimport {\n  setWord,\n  setReturnedWord,\n  setShortDef,\n  setPartOfSpeech,\n  setWordExample,\n  setAnts,\n  setSyns,\n  setWordArray,\n} from '../redux/words/words.action';\nimport ErrorBoundary from '../components/error-boundary/error-boundary.component';\n\nconst PopUpSearchBar = lazy(() => import('../components/popup-search-bar/popup-search-bar.component'));\n\nconst App = (props) => {\n  const {\n    location,\n    Word,\n    setWord,\n    ReturnedWord,\n    setReturnedWord,\n    ShortDef,\n    setShortDef,\n    setPartOfSpeech,\n    setWordExample,\n    Ants,\n    setAnts,\n    Syns,\n    setSyns,\n    setWordArray,\n  } = props;\n  const [Error, setError] = useState(false);\n  const PathName = location.pathname;\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const {\n    isOpen: isOpen2,\n    onOpen: onOpen2,\n    onClose: onClose2,\n    onToggle: onToggle2,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [AvailableWordType, setAvailableWordType] = useState({});\n\n  // Used as a condition to render the values or skeleton in ThesaurusPage\n  useEffect(() => {\n    if (PathName === '/thesaurus' && !ShortDef.length) {\n      setWordsLoaded(false);\n    } else if (PathName === '/thesaurus' && ShortDef.length) {\n      setWordsLoaded(true);\n    }\n  });\n\n  const getInputValue = (event) => {\n    setWord(event);\n  };\n\n  const WordsArrayFilter = (wordObjects, type) => {\n    const filteredArray = wordObjects.filter((word) => word.fl === type);\n    return filteredArray[0];\n  };\n\n  const WordArraySetState = (wordArray) => {\n    const {\n      fl,\n      hwi: {\n        hw,\n      },\n      shortdef,\n      def: [{\n        sseq: dt,\n      }],\n      meta: {\n        syns,\n      },\n      meta: {\n        ants,\n      },\n    } = wordArray;\n    const Example = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n    const ExampleModified = Example.replace('{it}', '<em>').replace('{/it}', '</em>');\n    setAnts(ants[0]);\n    setSyns(syns[0]);\n    setReturnedWord(hw);\n    setPartOfSpeech(fl);\n    setShortDef(shortdef[0]);\n    setWordExample(ExampleModified);\n  };\n\n  const PartOfSpeechChecker = (wordObjects) => {\n    try {\n      wordObjects.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType((prevState) => ({ ...prevState, noun: true }));\n            break;\n          case 'verb':\n            setAvailableWordType((prevState) => ({ ...prevState, verb: true }));\n            break;\n          case 'adjective':\n            setAvailableWordType((prevState) => ({ ...prevState, adjective: true }));\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const InitialWord = (wordObjects) => {\n    try {\n      MainLoop:\n      for (let index = 0; index < 4; index++) {\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'noun') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'noun'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'verb') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'verb'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'adjective') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'adjective'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl !== 'noun' && 'verb' && 'adjective') {\n            WordArraySetState(WordsArrayFilter(wordObjects, element.fl));\n            break MainLoop;\n          }\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const PassRequstedWords = (wordObjects) => {\n    try {\n      if (wordObjects[0].hwi) {\n        setWordArray(wordObjects);\n        InitialWord(wordObjects);\n        PartOfSpeechChecker(wordObjects);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      console.log(error);\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = (word = Word) => {\n    if (word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(word)\n        .then((data) => PassRequstedWords(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const HandleSearchButtonClick = () => {\n    getWords();\n  };\n\n  const HandleBackButtonClick = (isSetword) => {\n    setWordsLoaded(false);\n    if (isSetword) {\n      setWord('');\n    }\n    setReturnedWord('');\n    setPartOfSpeech('');\n    setShortDef('');\n    setWordExample('');\n    setSyns([]);\n    setAnts([]);\n    setAvailableWordType({});\n  };\n\n  // Sets AvailableWordType to an empty object\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType({});\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  const ThesaurusStore = () => (\n    <ThesaurusPage\n      getWords={getWords}\n      AvailableWordType={AvailableWordType}\n      Ants={Ants}\n      Syns={Syns}\n      WordsLoaded={WordsLoaded}\n      Link={Link}\n      HandleBackButtonClick={HandleBackButtonClick}\n    />\n  );\n\n  const Thesaurus = () => {\n    let ThesaurusComponent;\n    if (Word.length) {\n      if (ReturnedWord.length) {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      } else if (Error) {\n        ThesaurusComponent = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusComponent = <Redirect to=\"/\" />;\n    }\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusComponent;\n  };\n\n  // Clear all stored states if the pathName is not thesaurus\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && ShortDef.length) {\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <>\n      {(PathName === '/thesaurus' && ReturnedWord.length)\n        ? (\n          <ErrorBoundary>\n            <Suspense fallback={null}>\n              <PopUpSearchBar\n                isOpen2={isOpen2}\n                onOpen2={onOpen2}\n                onClose2={onClose2}\n                onToggle2={onToggle2}\n                HandleBackButtonClick={HandleBackButtonClick}\n                getInputValue={getInputValue}\n                getWords={getWords}\n                setWordsLoaded={setWordsLoaded}\n              />\n            </Suspense>\n          </ErrorBoundary>\n        )\n        : <></>}\n      <NavBar\n        PathName={PathName}\n        onOpen2={onOpen2}\n      />\n      <Routes\n        getWords={getWords}\n        Thesaurus={Thesaurus}\n        WordFindType={WordFindType}\n        WordFind={WordFind}\n        isOpen={isOpen}\n        getInputValue={getInputValue}\n        HandleSearchButtonClick={HandleSearchButtonClick}\n        Link={Link}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  ReturnedWord: words.ReturnedWord,\n  ShortDef: words.ShortDef,\n  PartOfSpeech: words.PartOfSpeech,\n  WordExample: words.WordExample,\n  Syns: words.Syns,\n  Ants: words.Ants,\n  WordArray: words.WordArray,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // eslint-disable-next-line no-undef\n  setWord: (word) => dispatch(setWord(word)),\n  setReturnedWord: (word) => dispatch(setReturnedWord(word)),\n  setShortDef: (word) => dispatch(setShortDef(word)),\n  setPartOfSpeech: (word) => dispatch(setPartOfSpeech(word)),\n  setWordExample: (word) => dispatch(setWordExample(word)),\n  setAnts: (word) => dispatch(setAnts(word)),\n  setSyns: (word) => dispatch(setSyns(word)),\n  setWordArray: (word) => dispatch(setWordArray(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n","import { wordsTypes } from './words.types';\n\n// const [Error, setError] = useState(false);\n// const PathName = location.pathname;\n// const {\n//   isOpen,\n//   onOpen,\n// } = useDisclosure();\n// const {\n//   isOpen: isOpen2,\n//   onOpen: onOpen2,\n//   onClose: onClose2,\n//   onToggle: onToggle2,\n// } = useDisclosure();\n// const [WordFind, setWordFind] = useState(false);\n// const [WordFindType, setWordFindType] = useState('');\n// const [WordsLoaded, setWordsLoaded] = useState(false);\n// const [WordArray, setWordArray] = useState([]);\n// const [AvailableWordType, setAvailableWordType] = useState({});\n\nconst INITIAL_STATE = {\n  Word: '',\n  ReturnedWord: '',\n  ShortDef: '',\n  PartOfSpeech: '',\n  WordExample: '',\n  Syns: [],\n  Ants: [],\n  WordArray: [],\n};\n\nconst wordsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case wordsTypes.SET_WORD:\n      return {\n        ...state,\n        Word: action.payload,\n      };\n    case wordsTypes.SET_RETURNED_WORD:\n      return {\n        ...state,\n        ReturnedWord: action.payload,\n      };\n    case wordsTypes.SET_SHORTDEF:\n      return {\n        ...state,\n        ShortDef: action.payload,\n      };\n    case wordsTypes.SET_PART_OF_SPEECH:\n      return {\n        ...state,\n        PartOfSpeech: action.payload,\n      };\n    case wordsTypes.SET_WORD_EXAMPLE:\n      return {\n        ...state,\n        WordExample: action.payload,\n      };\n    case wordsTypes.SET_SYNS:\n      return {\n        ...state,\n        Syns: action.payload,\n      };\n    case wordsTypes.SET_ANTS:\n      return {\n        ...state,\n        Ants: action.payload,\n      };\n    case wordsTypes.SET_WORD_ARRAY:\n      return {\n        ...state,\n        WordArray: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default wordsReducer;\n","import { combineReducers } from 'redux';\nimport wordsReducer from './words/words.reducer';\n\nexport default combineReducers({\n  words: wordsReducer,\n});\n","/* eslint-disable no-unused-vars */\nimport { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\n\nconst middleWare = [logger];\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport store from './redux/store';\nimport theme from './theme';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ChakraProvider>\n        <Router basename=\"/flary\">\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <App />\n        </Router>\n      </ChakraProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}