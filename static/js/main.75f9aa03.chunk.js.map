{"version":3,"sources":["services/getRequest.js","components/words-container/words.container.component.jsx","components/loading-skeleton/loading-skeleton.component.jsx","components/words-container-content/words-container-content.jsx","pages/ThesaurusPage/ThesaurusPage.jsx","pages/SearchPage/SearchPage.jsx","routes/routes.jsx","components/help-button/help-button.component.jsx","components/theme-button/theme-button.component.jsx","components/search-button/search-button.component.jsx","components/NavBar/NavBar.jsx","components/popup-search-bar/popup-search-bar.component.jsx","containers/App.jsx","theme.js","index.jsx"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","WordTypeContainer","styled","div","ChakraWordTypeContainer","chakra","WordsContainer","props","children","ml","mr","marginTop","boxShadow","gradientbg","isLargerthan440","bgGradient","LoadingSkeleton","SkeletonStartColor","useColorModeValue","SkeletonEndColor","TransitionFade","height","mt","mb","startColor","endColor","w","WordAndType","tw","TheWord","h1","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","withRouter","ReturnedWord","PartOfSpeech","ShortDef","WordExample","Syns","Ants","getWords","HandleBackButtonClick","history","fontColorMain","fontColorHeaders","fontColorSynAnt","fontColorDarkWhiteSmallWords","hoverSynAntItems","textDecoration","onClickWords","event","target","textContent","push","turnWordInToList","MainObj","ReturnedObj","undefined","map","index","_hover","className","onClick","listStyleType","display","color","slice","ReactHtmlParser","fontSize","fontFamily","fontStyle","ThesaurusHeader","ChakraThesaurusHeader","Link","getPathName","WordsLoaded","HandleTabClick","AvailableWordType","LinkChak","bg","Tabshover","TabsSelected","background","fallbackBackground","hoverShadowNeonDark","textShadow","WordsContainerShadow","NounTabButton","useRef","AdjectiveTabButton","VerbTabButton","location","useLocation","changeTitle","ComponentState","initialTitle","document","title","length","toUpperCase","useEffect","pathname","HandleKeyDownBackButtonQctrl","key","ctrlKey","preventDefault","HandleKeyDownTabsButton123","current","click","addEventListener","removeEventListener","window","scrollTo","top","behavior","TheWholeThesaurus","zIndex","left","_focus","to","CSS","supports","position","h","borderRadius","align","variant","noun","Object","keys","ref","_selected","outline","outlineColor","style","outlineStyle","verb","adjective","MainContainer","WordFindType","WordFind","isOpen","getInputValue","HandleSearchButtonClick","useMediaQuery","isMoreThan420px","inputField","HandleFocusOnInputEnterCtrlShift","focus","alignContent","justifyContent","whiteSpace","sm","md","focusBorderColor","onKeyPress","which","rounded","onChange","paddingY","placeholder","paddingLeft","Search","in","transition","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","width","xmlns","d","bgColor","as","ReachLink","Routes","Thesaurus","exact","path","Help","focusBorderColorGeneral","focusBorderColorInput","KeyboardShortCutsColor","placement","m","Question","fontWeight","ThemeButton","useColorMode","colorMode","toggleColorMode","ThemeButtonRef","HandleKeyDownThemeIcon","Moon","SearchButtonHeader","onOpen2","NavBar","PathName","InputFiledSearchBarPopUp","isOpen2","onToggle2","onClose2","useState","Word","setWord","InputField","HandleKeyDownOpenSearchBar","shiftKey","overflow","opacity","alignItems","pointerEvents","onKeyDown","value","App","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","Error","setError","setPathName","useDisclosure","onOpen","onClose","onToggle","setWordFind","setWordFindType","setWordsLoaded","setSyns","setAnts","WordArray","setWordArray","setAvailableWordType","WordsArrayFilter","wordObjects","type","filter","fl","WordArraySetState","wordArray","hw","hwi","shortdef","dt","def","sseq","syns","meta","ants","ExampleModified","t","replace","PassRequstedWords","MainLoop","element","error","console","log","InitialWord","forEach","arr","prevState","PartOfSpeechChecker","then","data","isSetword","Path","ThesaurusStore","ThesaurusComponent","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.75f9aa03.chunk.js","sourcesContent":["/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://flary-server.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  useColorModeValue,\n  useMediaQuery,\n  chakra,\n} from '@chakra-ui/react';\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 15px;\npadding-bottom: 20px;\nword-spacing: 0;\n`;\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer);\n\nconst WordsContainer = (props) => {\n  const {\n    children, ml, mr, marginTop, boxShadow, gradientbg, isLargerthan440,\n  } = props;\n\n  return (\n    <ChakraWordTypeContainer\n      boxShadow={boxShadow}\n      bgGradient={gradientbg}\n      ml={ml}\n      mr={mr}\n      marginTop={marginTop}\n    >\n      {children}\n    </ChakraWordTypeContainer>\n  );\n};\n\nexport default WordsContainer;\n","import React from 'react';\nimport { Stack, Skeleton, useColorModeValue } from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\n\nconst LoadingSkeleton = () => {\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200');\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500');\n  return (\n    <Presets.TransitionFade>\n      <Stack>\n        <Skeleton height=\"9px\" mt=\"4\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n        <Skeleton height=\"9px\" w=\"80%\" mb=\"3\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n      </Stack>\n    </Presets.TransitionFade>\n  );\n};\n\nexport default LoadingSkeleton;\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-undef */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\nimport React from 'react';\n// import { Presets } from 'react-component-transition';\nimport tw from 'tailwind-styled-components';\nimport ReactHtmlParser from 'react-html-parser';\nimport { withRouter } from 'react-router-dom';\nimport {\n  chakra,\n  Heading,\n  UnorderedList,\n  useColorModeValue,\n  Box,\n  ListItem,\n} from '@chakra-ui/react';\n\nconst WordAndType = tw.div`\n    mt-1\n`;\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`;\n\nconst ChakraTheWord = chakra(TheWord);\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`;\n\nconst ChakraTheType = chakra(TheType);\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`;\n\nconst ChakraSynAntHeader = chakra(SynAntHeader);\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`;\n\nconst Example = tw.span`\n    text-xl\n    block\n`;\n\nconst ChakraExample = chakra(Example);\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`;\n\nconst ChakraText = chakra(Text);\n\nconst WordsContainerContent = (\n  props,\n) => {\n  const {\n    ReturnedWord,\n    PartOfSpeech,\n    ShortDef,\n    WordExample,\n    Syns,\n    Ants,\n    getWords,\n    HandleBackButtonClick,\n    history,\n  } = props;\n\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7');\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02');\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hoverSynAntItems = useColorModeValue({ textDecoration: 'underline' }, { textDecoration: 'underline' });\n\n  const onClickWords = (event) => {\n    HandleBackButtonClick();\n    getWords(event.target.textContent);\n    history.push('/thesaurus');\n  };\n  // Change synonyms and antonyms words to list items\n  const turnWordInToList = (MainObj) => {\n    let ReturnedObj = [];\n    if (MainObj !== undefined) {\n      ReturnedObj = MainObj.map((word, index) => {\n        if (MainObj[index + 1] === undefined) {\n          return <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={index}>{word}</ListItem>;\n        }\n        return (\n          <>\n            <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={word}>{word}</ListItem>\n            <span key={index}>{',\\u00A0'}</span>\n          </>\n        );\n      });\n    }\n    return ReturnedObj;\n  };\n  const OrderSynonyms = () => turnWordInToList(Syns);\n  const OrderAntonyms = () => turnWordInToList(Ants);\n\n  return (\n    <>\n      <WordAndType>\n        <ChakraTheWord color={fontColorMain}>\n          {ReturnedWord}\n        </ChakraTheWord>\n        <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n          {PartOfSpeech}\n        </ChakraTheType>\n      </WordAndType>\n      <ChakraSynAntHeader color={fontColorHeaders}>\n        Synonyms & Antonyms of\n        {' '}\n        <em>{ReturnedWord}</em>\n      </ChakraSynAntHeader>\n      <SynAntContainer>\n        <ChakraText color={fontColorMain}>\n          {ShortDef}\n        </ChakraText>\n        {(ShortDef.slice(0, 5) === WordExample.slice(0, 5))\n          ? <></>\n          : (\n            <ChakraExample color={fontColorSynAnt}>\n              {' '}\n              <strong>//</strong>\n              {' '}\n              {ReactHtmlParser(WordExample)}\n            </ChakraExample>\n          )}\n        <Heading mb=\"1\" mt=\"2\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n          Synonyms for\n          {' '}\n          <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n        </Heading>\n        <Box w={['100%', '70%', null]}>\n          <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n        </Box>\n        {(Ants !== undefined)\n          ? (\n            <div>\n              <Heading mb=\"1\" mt=\"4\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                Antonyms for\n                {' '}\n                <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n              </Heading>\n              <Box w={['100%', '70%', null]}>\n                <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n              </Box>\n            </div>\n          )\n          : <></>}\n      </SynAntContainer>\n    </>\n  );\n};\n\nexport default withRouter(WordsContainerContent);\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable no-unused-vars */\n/* eslint-disable max-len */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport {\n  useEffect, React, useRef,\n} from 'react';\nimport { Presets, ComponentTransition, AnimationTypes } from 'react-component-transition';\nimport { useLocation, withRouter } from 'react-router-dom';\nimport tw from 'tailwind-styled-components';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n} from '@chakra-ui/react';\nimport WordsContainer from '../../components/words-container/words.container.component';\n// import PopUpSearchBar from '../../components/popup-search-bar/popup-search-bar.component';\nimport LoadingSkeleton from '../../components/loading-skeleton/loading-skeleton.component';\nimport WordsContainerContent from '../../components/words-container-content/words-container-content';\n\nconst ThesaurusHeader = tw.h1`\n    italic\n    font-serif\n    text-3xl\n    font-bold\n    inline-block\n`;\nconst ChakraThesaurusHeader = chakra(ThesaurusHeader);\n\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (props) => {\n  const {\n    Link,\n    HandleBackButtonClick,\n    ReturnedWord,\n    PartOfSpeech,\n    ShortDef,\n    WordExample,\n    getPathName,\n    WordsLoaded,\n    Syns,\n    Ants,\n    HandleTabClick,\n    AvailableWordType,\n    getWords,\n    history,\n  } = props;\n\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const Tabshover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange', boxShadow: '0 0 5px #FFF, 0 0 10px #FFF, 0 0 7px #FFF, 0 0 3px #49ff18, 0 0 5px #c75600, 0 0 10px #c75600, 0 0 10px #c75600, 0 0 20px #c75600' });\n  const TabsSelected = useColorModeValue({ background: '#edf2f7', color: '#252d3d' }, { color: '#edf2f7', background: 'rgba(255, 255, 255, 0.08)', boxShadow: '0 0 5px #FFF, 0 0 10px #FFF, 0 0 7px #FFF, 0 0 3px #49ff18, 0 0 5px #c75600, 0 0 10px #c75600, 0 0 10px #c75600, 0 0 20px #c75600' });\n  const fallbackBackground = useColorModeValue('rgba(255, 255, 255, .9)', 'rgba(0, 0, 0, 0.26)');\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)');\n  const hoverShadowNeonDark = useColorModeValue({ background: 'gray.200' }, { boxShadow: '0 0 5px #FFF, 0 0 10px #FFF, 0 0 7px #FFF, 0 0 3px #49ff18, 0 0 5px #c75600, 0 0 10px #c75600, 0 0 10px #c75600, 0 0 20px #c75600' });\n  const textShadow = useColorModeValue('0 1px 0 #CCCCCC, 0 2px 0 #c9c9c9, 0 3px 0 #bbb, 0 4px 0 #b9b9b9, 0 5px 0 #aaa, 0 6px 1px rgba(0,0,0,.1), 0 0 5px rgba(0,0,0,.1), 0 1px 3px rgba(0,0,0,.3), 0 3px 5px rgba(0,0,0,.2), 0 5px 10px rgba(0,0,0,.1), 0 10px 10px rgba(0,0,0,.2), 0 10px 10px rgba(0,0,0,.10);', '0 0 7px rgba(255,255,255,.5), 0 0 5px rgba(255,255,255,.5);');\n  const WordsContainerShadow = useColorModeValue('-1px -1px 0 #CCCCCC, -1px -1px 0 #c9c9c9, -3px -3px 0 #bbb, -5px -5px 0 #b9b9b9, -5px -5px 0 #aaa, -6px -6px 1px rgba(0,0,0,.1), 0 0 5px rgba(0,0,0,.1), -1px -1px 3px rgba(0,0,0,.3), -3px -3px 5px rgba(0,0,0,.2), -5px -5px 10px rgba(0,0,0,.1), -10px -10px 10px rgba(0,0,0,.2), -20px -20px 20px rgba(0,0,0,.10);', '0 0 7px rgba(255,255,255,.5), 0 0 5px rgba(255,255,255,.5);');\n  const NounTabButton = useRef(null);\n  const AdjectiveTabButton = useRef(null);\n  const VerbTabButton = useRef(null);\n\n  const location = useLocation();\n\n  const changeTitle = (ComponentState) => {\n    const initialTitle = 'Thesaurus By Flary';\n    if (ComponentState === 'mount') {\n      document.title = ReturnedWord.length ? `${ReturnedWord[0].toUpperCase() + ReturnedWord.slice(1)} Synonyms, ${ReturnedWord} Antonyms | Flary Thesaurus` : initialTitle;\n    } else {\n      document.title = initialTitle;\n    }\n  };\n\n  useEffect(() => {\n    changeTitle('mount');\n    return () => {\n      changeTitle();\n    };\n  }, [ReturnedWord]);\n\n  useEffect(() => {\n    getPathName(location.pathname);\n  });\n\n  const HandleKeyDownBackButtonQctrl = (event) => {\n    if (event.key === 'Q' && event.ctrlKey) {\n      event.preventDefault();\n      HandleBackButtonClick();\n      history.push('/');\n    }\n  };\n\n  const HandleKeyDownTabsButton123 = (event) => {\n    switch (event.key) {\n      case '!':\n        event.preventDefault();\n        NounTabButton?.current?.click();\n        break;\n      case '@':\n        event.preventDefault();\n        VerbTabButton?.current?.click();\n        break;\n      case '#':\n        event.preventDefault();\n        AdjectiveTabButton?.current?.click();\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownTabsButton123);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownTabsButton123);\n    };\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  const TheWholeThesaurus = () => (\n    <Presets.TransitionFade>\n      <WordsContainer boxShadow={WordsContainerShadow} gradientbg={gradientbg} ml={['0', '9em', null]} mr={['0', '9em', null]} marginTop={['3', null, null]}>\n        <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n          Thesaurus\n        </ChakraThesaurusHeader>\n        <Presets.TransitionFade>\n          {(WordsLoaded)\n            ? (\n              <WordsContainerContent {...props} />\n            )\n\n            : (\n              <LoadingSkeleton />\n            )}\n        </Presets.TransitionFade>\n      </WordsContainer>\n    </Presets.TransitionFade>\n  );\n\n  return (\n    <>\n      {ReturnedWord.length\n        ? (\n          <Box zIndex=\"9991\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={hoverShadowNeonDark} bg={bg} color={color} boxShadow={textShadow} _hover={hoverShadowNeonDark} onClick={HandleBackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      {(location.pathname === '/thesaurus')\n        ? (\n          <Box\n            background={!(CSS.supports('backdrop-filter', 'blur(5px)'))\n                  && fallbackBackground}\n            className=\"backdrop-blur\"\n            zIndex=\"9990\"\n            position=\"fixed\"\n            top=\"0\"\n            h=\"70px\"\n            w=\"full\"\n            borderRadius=\"0 0 20px 20px\"\n          />\n        )\n        // TODO Break tabs into its own compoonent\n        : <></>}\n      <Presets.TransitionFade>\n        <Tabs align=\"center\" variant=\"soft-rounded\">\n          {/* <Box className='backdrop-blur z-50' display='flex'\n         justifyContent='center' h='22' width='full'  position='fixed' bottom='0'> */}\n          <TabList marginTop={['4', '2', null]}>\n            {(AvailableWordType.noun) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n              : <Tab mr=\"4\" boxShadow={textShadow} ref={NounTabButton} onClick={() => HandleTabClick('noun')} _hover={Tabshover} _selected={TabsSelected} _focus={{ color }} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Noun</Tab>\n            )\n              : <></>}\n            {(AvailableWordType.verb) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n              : <Tab mr=\"4\" boxShadow={textShadow} ref={VerbTabButton} onClick={() => HandleTabClick('verb')} _hover={Tabshover} _selected={TabsSelected} _focus={{ color }} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Verb</Tab>\n            )\n              : <></>}\n            {(AvailableWordType.adjective) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n              : <Tab boxShadow={textShadow} ref={AdjectiveTabButton} onClick={() => HandleTabClick('adjective')} _hover={Tabshover} _selected={TabsSelected} _focus={{ color }} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adjective</Tab>\n            )\n              : <></>}\n          </TabList>\n          {/* </Box> */}\n          <TabPanels>\n            <TabPanel>\n              {TheWholeThesaurus()}\n            </TabPanel>\n            <TabPanel>\n              {TheWholeThesaurus()}\n            </TabPanel>\n            <TabPanel>\n              {TheWholeThesaurus()}\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Presets.TransitionFade>\n    </>\n  );\n};\n\nexport default withRouter(ThesaurusPage);\n","/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport { useLocation, withRouter, Link as ReachLink } from 'react-router-dom';\nimport { useEffect, React, useRef } from 'react';\nimport {\n  Heading,\n  Input,\n  Box,\n  chakra,\n  Fade,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  useMediaQuery,\n  Button,\n  InputLeftElement,\n  InputGroup,\n  Text,\n} from '@chakra-ui/react';\nimport { InfoIcon, SearchIcon } from '@chakra-ui/icons';\n\nconst MainContainer = tw.div`\n   text-center\n   mt-40\n   sm:mt-0\n   md2:mt-38\n   lg:mt-32\n`;\n\nconst SearchPage = ({\n  WordFindType, WordFind, isOpen,\n  getInputValue, HandleSearchButtonClick, getPathName, getWords, history,\n}) => {\n  const [isMoreThan420px] = useMediaQuery('(max-width: 420px)');\n  const location = useLocation();\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const hoverShadowNeonDark = useColorModeValue({ background: 'gray.200' }, { boxShadow: '0 0 5px #FFF, 0 0 10px #FFF, 0 0 7px #FFF, 0 0 3px #49ff18, 0 0 5px #c75600, 0 0 10px #c75600, 0 0 10px #c75600, 0 0 20px #c75600' });\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const inputField = useRef(null);\n  const textShadow = useColorModeValue('0 1px 0 #CCCCCC, 0 2px 0 #c9c9c9, 0 3px 0 #bbb, 0 4px 0 #b9b9b9, 0 5px 0 #aaa, 0 6px 1px rgba(0,0,0,.1), 0 0 5px rgba(0,0,0,.1), 0 1px 3px rgba(0,0,0,.3), 0 3px 5px rgba(0,0,0,.2), 0 5px 10px rgba(0,0,0,.1), 0 10px 10px rgba(0,0,0,.2), 0 20px 20px rgba(0,0,0,.10);',\n\n    '0 0 15px rgba(255,255,255,.5), 0 0 10px rgba(255,255,255,.5);');\n\n  const HandleFocusOnInputEnterCtrlShift = (event) => {\n    if (event.key === 'A' && event.ctrlKey) {\n      event.preventDefault();\n      inputField.current.focus();\n    }\n  };\n\n  const HandleEnterKey = (event) => {\n    if (event.which === 13) {\n      getWords();\n      history.push('/thesaurus');\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    return () => {\n      document.removeEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    };\n  });\n\n  useEffect(() => {\n    getPathName(location.pathname);\n  });\n\n  return (\n    <MainContainer>\n      <Box display=\"flex\" alignContent=\"center\" justifyContent=\"center\" mt={['12', null, '15', '0', '32']} mb={['5', null, '12']}>\n        <Heading textShadow={textShadow} mt={['-20', 0, 0]} mb={[0, 10, null]} fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">\n          Words to be thesaurused\n          {/* {(isMoreThan420px) ? '\\u00A0' : ' thesaurused'} */}\n        </Heading>\n        {/* <Popover placement=\"auto-end\" display=\"inline-block\">\n          <PopoverTrigger>\n            {(isMoreThan420px)\n              ? <Heading textDecoration=\"underline wavy\" mt={['-20', 0, 0]} textShadow={textShadow} _hover={[null, null, hover]} cursor=\"pointer\" fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">thesaurused</Heading>\n              : <IconButton variant=\"ghost\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} ml=\"2\" size=\"sm\" icon={<InfoIcon w=\"5\" h=\"5\" />} />}\n          </PopoverTrigger>\n          <PopoverContent mt={['-20', 0, 0]} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Thesaurus</PopoverHeader>\n            <PopoverBody>\n              A thesaurus (plural thesauri or thesauruses) or synonym dictionary\n              is a reference work for finding synonyms and sometimes antonyms of words.\n            </PopoverBody>\n          </PopoverContent>\n        </Popover> */}\n      </Box>\n      <Box display={{ sm: 'flex', md: 'flex' }} justifyContent={[null, 'center', null]}>\n        <Box>\n          <Box justifyContent=\"center\" display=\"flex\" w={['100%', 'xs', null]}>\n            <Box w={['18rem', 'xs', null]} position=\"relative\">\n              <Input boxShadow={textShadow} ref={inputField} _hover={hoverShadowNeonDark} _focus={hoverShadowNeonDark} focusBorderColor=\"transparent\" onKeyPress={HandleEnterKey} variant=\"filled\" w={['18rem', 'xs', null]} rounded=\"xl\" mr={[null, null, '2rem']} onChange={getInputValue} paddingY=\"5\" placeholder=\"Search for words\" paddingLeft=\"9\" />\n              <SearchIcon position=\"absolute\" left=\"3\" top=\"3.5\" />\n            </Box>\n          </Box>\n          {WordFind\n                && (\n                <Fade in={isOpen}>\n                  <Box mt=\"2\" display=\"flex\" justifyContent={['center', 'flex-start', null]} transition=\"ease\">\n                    <chakra.svg mt=\"1\" ml={[null, '4', null]} outline=\"none\" stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\" />\n                    </chakra.svg>\n                    <chakra.span ml=\"1\" mb={['-1', 0, 0]} color=\"red.400\">\n                      {(WordFindType === 'no response' ? 'Word not found! (Misspelled)' : ((WordFindType === 'no input') ? 'Input is empty, type a word!' : 'The word is not in the thesaurus!'))}\n                    </chakra.span>\n                  </Box>\n                </Fade>\n                )}\n        </Box>\n\n        {\n          !isMoreThan420px && (\n            <Box ml={[0, 6, null]} mt={[5, 1, 0]}>\n              <Button\n                _hover={hoverShadowNeonDark}\n                _focus={hoverShadowNeonDark}\n                color=\"gray.800\"\n                bgColor=\"gray.100\"\n                as={ReachLink}\n                onClick={HandleSearchButtonClick}\n                to=\"/thesaurus\"\n                borderRadius=\"xl\"\n                boxShadow={textShadow}\n              >\n                <Text>\n                  Search\n                </Text>\n              </Button>\n            </Box>\n          )\n        }\n\n      </Box>\n    </MainContainer>\n  );\n};\n\nexport default withRouter(SearchPage);\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\nimport React from 'react';\nimport { Presets } from 'react-component-transition';\nimport SearchPage from '../pages/SearchPage/SearchPage';\n\nfunction Routes({ Thesaurus, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <SearchPage {...props} />\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {Thesaurus()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  Button,\n  chakra,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst Help = () => {\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const KeyboardShortCutsColor = useColorModeValue('gray.600', 'gray.400');\n  const textShadow = useColorModeValue('0 1px 0 #CCCCCC, 0 2px 0 #c9c9c9, 0 3px 0 #bbb, 0 4px 0 #b9b9b9, 0 5px 0 #aaa, 0 6px 1px rgba(0,0,0,.1), 0 0 5px rgba(0,0,0,.1), 0 1px 3px rgba(0,0,0,.3), 0 3px 5px rgba(0,0,0,.2), 0 5px 10px rgba(0,0,0,.1), 0 10px 10px rgba(0,0,0,.2), 0 20px 20px rgba(0,0,0,.10);', '0 0 15px rgba(255,255,255,.5), 0 0 10px rgba(255,255,255,.5);');\n  const hoverShadowNeonDark = useColorModeValue({ background: 'gray.200' }, { boxShadow: '0 0 5px #FFF, 0 0 10px #FFF, 0 0 7px #FFF, 0 0 3px #49ff18, 0 0 5px #c75600, 0 0 10px #c75600, 0 0 10px #c75600, 0 0 20px #c75600' });\n\n  return (\n    <Popover placement=\"auto\">\n      <PopoverTrigger>\n        <Button\n          _focus={hoverShadowNeonDark}\n          focusBorderColor={focusBorderColorInput}\n          boxShadow={textShadow}\n          outline=\"none\"\n          _hover={hoverShadowNeonDark}\n          outlineColor=\"initial\"\n          style={{ outlineStyle: 'none' }}\n          m=\"4\"\n          mr={[null, '40', null]}\n          rounded=\"xl\"\n        >\n          <QuestionIcon />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent width=\"max-content\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Keyboard Shortcuts</PopoverHeader>\n        <PopoverBody className=\"whitespace-pre-wrap text-left\">\n          <strong>Global</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Switch theme:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + X</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Home Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Focus on input field:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + A</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Thesaurus Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Go to Home Page:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + Q</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Search bar:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + E</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Switch word type:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Shift + 1 or 2 or 3</chakra.span>\n          </chakra.span>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Help;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  chakra, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\n\nconst ThemeButton = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  // eslint-disable-next-line no-unused-vars\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const ThemeButtonRef = useRef(null);\n  const textShadow = useColorModeValue('0 1px 0 #CCCCCC, 0 2px 0 #c9c9c9, 0 3px 0 #bbb, 0 4px 0 #b9b9b9, 0 5px 0 #aaa, 0 6px 1px rgba(0,0,0,.1), 0 0 5px rgba(0,0,0,.1), 0 1px 3px rgba(0,0,0,.3), 0 3px 5px rgba(0,0,0,.2), 0 5px 10px rgba(0,0,0,.1), 0 10px 10px rgba(0,0,0,.2), 0 20px 20px rgba(0,0,0,.10);', '0 0 15px rgba(255,255,255,.5), 0 0 10px rgba(255,255,255,.5);');\n  const hoverShadowNeonDark = useColorModeValue({ background: 'gray.200' }, { boxShadow: '0 0 5px #FFF, 0 0 10px #FFF, 0 0 7px #FFF, 0 0 3px #49ff18, 0 0 5px #c75600, 0 0 10px #c75600, 0 0 10px #c75600, 0 0 20px #c75600' });\n\n  const HandleKeyDownThemeIcon = (event) => {\n    if (event.key === 'X' && event.ctrlKey) {\n      event.preventDefault();\n      ThemeButtonRef.current.click();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownThemeIcon);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownThemeIcon);\n    };\n  }, []);\n\n  return (\n    <Button ref={ThemeButtonRef} _focus={hoverShadowNeonDark} _hover={hoverShadowNeonDark} focusBorderColor=\"transparent\" boxShadow={textShadow} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={toggleColorMode}>\n      {colorMode === 'light'\n        ? <MoonIcon />\n        : (\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n          </chakra.svg>\n        )}\n    </Button>\n  );\n};\n\nexport default ThemeButton;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  Button, useColorModeValue,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst SearchButtonHeader = ({ onOpen2 }) => {\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const textShadow = useColorModeValue('0 1px 0 #CCCCCC, 0 2px 0 #c9c9c9, 0 3px 0 #bbb, 0 4px 0 #b9b9b9, 0 5px 0 #aaa, 0 6px 1px rgba(0,0,0,.1), 0 0 5px rgba(0,0,0,.1), 0 1px 3px rgba(0,0,0,.3), 0 3px 5px rgba(0,0,0,.2), 0 5px 10px rgba(0,0,0,.1), 0 10px 10px rgba(0,0,0,.2), 0 20px 20px rgba(0,0,0,.10);',\n    '0 0 15px rgba(255,255,255,.5), 0 0 10px rgba(255,255,255,.5);');\n  const hoverShadowNeonDark = useColorModeValue({ background: 'gray.200' }, { boxShadow: '0 0 5px #FFF, 0 0 10px #FFF, 0 0 7px #FFF, 0 0 3px #49ff18, 0 0 5px #c75600, 0 0 10px #c75600, 0 0 10px #c75600, 0 0 20px #c75600' });\n  return (\n    <Button _hover={hoverShadowNeonDark} _focus={hoverShadowNeonDark} focusBorderColor={focusBorderColorInput} boxShadow={textShadow} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={onOpen2}>\n      <SearchIcon />\n    </Button>\n  );\n};\n\nexport default SearchButtonHeader;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport Help from '../help-button/help-button.component';\nimport ThemeButton from '../theme-button/theme-button.component';\nimport SearchButtonHeader from '../search-button/search-button.component';\n\nconst NavBar = ({\n  onOpen2, PathName, InputFiledSearchBarPopUp,\n}) => (\n  <Box\n    zIndex=\"9991\"\n    position=\"sticky\"\n    top=\"0\"\n    h=\"70px\"\n    display=\"flex\"\n    justifyContent=\"flex-end\"\n  >\n    {(PathName === '/thesaurus')\n      ? (\n        <SearchButtonHeader\n          onOpen2={onOpen2}\n          InputFiledSearchBarPopUp={InputFiledSearchBarPopUp}\n        />\n      )\n      : <></>}\n    <ThemeButton />\n    <Help />\n  </Box>\n);\n\nexport default NavBar;\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Presets } from 'react-component-transition';\nimport {\n  chakra,\n  Box,\n  Input,\n  useDisclosure,\n  useColorModeValue,\n  Portal,\n  Fade,\n  ScaleFade,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst PopUpSearchBar = ({\n  history, HandleBackButtonClick,\n  getWords, isOpen2, onToggle2, onClose2, onOpen2,\n}) => {\n  const [Word, setWord] = useState('');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const InputField = useRef(null);\n\n  const HandleSearchButtonClickHeader = () => {\n    onToggle2();\n    if (InputField?.current) {\n      InputField.current.focus();\n    }\n  };\n\n  const HandleKeyDownOpenSearchBar = (event) => {\n    if (event.key === 'E' && event.ctrlKey && event.shiftKey) {\n      event.preventDefault();\n      onToggle2();\n      if (InputField?.current) {\n        InputField.current.focus();\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownOpenSearchBar);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownOpenSearchBar);\n    };\n  }, [isOpen2]);\n\n  useEffect(() => {\n    if (isOpen2) {\n      document.body.style.overflow = 'hidden';\n    }\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen2]);\n\n  const HandleEnterKeyPopUpSearchBar = (event) => {\n    if (event.key === 'Enter') {\n      HandleBackButtonClick(false);\n      getWords(Word);\n      history.push('/thesaurus');\n      onClose2();\n    }\n  };\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  return (\n    <>\n      {(isOpen2)\n        ? (\n          <>\n            <Box position=\"fixed\" zIndex=\"9999\" background=\"gray.800\" opacity=\"0.6\" style={{ height: '100vh', width: '100vw' }} />\n            <Box>\n              <Box position=\"fixed\" display=\"flex\" alignItems=\"flex-start\" justifyContent=\"center\" zIndex=\"9999\" style={{ height: '100vh', width: '100vw' }}>\n                <ScaleFade in={isOpen2}>\n                  <Box className=\"relative\">\n                    <InputGroup mt=\"32\">\n                      <InputLeftElement\n                        zIndex=\"9999999\"\n                        pointerEvents=\"none\"\n                        // eslint-disable-next-line react/no-children-prop\n                        children={<SearchIcon zIndex=\"9999999\" color={color} />}\n                      />\n                      <Input ref={InputField} style={{ zIndex: 999999 }} placeholder=\"Search a word\" focusBorderColor={focusBorderColorInput} onKeyDown={HandleEnterKeyPopUpSearchBar} background={bg} color={color} w={['16rem', 'xs', null]} rounded=\"xl\" onChange={getInputValue} />\n                    </InputGroup>\n                  </Box>\n                </ScaleFade>\n                <Box position=\"fixed\" style={{ height: '100vh', width: '100vw' }} background=\"transparent\" onClick={onClose2} />\n              </Box>\n            </Box>\n          </>\n        )\n        : <></>}\n    </>\n  );\n};\n\nexport default withRouter(PopUpSearchBar);\n","/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport ReactHtmlParser from 'react-html-parser';\nimport {\n  useState,\n  useEffect,\n  React,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\nimport ThesaurusPage from '../pages/ThesaurusPage/ThesaurusPage';\nimport Routes from '../routes/routes';\nimport NavBar from '../components/NavBar/NavBar';\nimport PopUpSearchBar from '../components/popup-search-bar/popup-search-bar.component';\n\n// TODO understand wth is your state doing\n\nconst App = () => {\n  const [Word, setWord] = useState('');\n  const [ReturnedWord, setReturnedWord] = useState('');\n  const [ShortDef, setShortDef] = useState('');\n  const [PartOfSpeech, setPartOfSpeech] = useState('');\n  const [WordExample, setWordExample] = useState('');\n  const [Error, setError] = useState(false);\n  const [PathName, setPathName] = useState('');\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const {\n    isOpen: isOpen2,\n    onOpen: onOpen2,\n    onClose: onClose2,\n    onToggle: onToggle2,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [Syns, setSyns] = useState([]);\n  const [Ants, setAnts] = useState([]);\n  const [WordArray, setWordArray] = useState([]);\n  const [AvailableWordType, setAvailableWordType] = useState({});\n\n  // Used as a condition to render the values or skeleton in ThesaurusPage\n  useEffect(() => {\n    if (PathName === '/thesaurus' && !ShortDef.length) {\n      setWordsLoaded(false);\n    } else if (PathName === '/thesaurus' && ShortDef.length) {\n      setWordsLoaded(true);\n    }\n  });\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  const WordsArrayFilter = (wordObjects, type) => {\n    const filteredArray = wordObjects.filter((word) => word.fl === type);\n    return filteredArray[0];\n  };\n\n  const WordArraySetState = (wordArray) => {\n    const {\n      fl,\n      hwi: {\n        hw,\n      },\n      shortdef,\n      def: [{\n        sseq: dt,\n      }],\n      meta: {\n        syns,\n      },\n      meta: {\n        ants,\n      },\n    } = wordArray;\n    const Example = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n    const ExampleModified = Example.replace('{it}', '<em>').replace('{/it}', '</em>');\n    setAnts(ants[0]);\n    setSyns(syns[0]);\n    setReturnedWord(hw);\n    setPartOfSpeech(fl);\n    setShortDef(shortdef[0]);\n    setWordExample(ExampleModified);\n  };\n\n  const PartOfSpeechChecker = (wordObjects) => {\n    try {\n      wordObjects.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType((prevState) => ({ ...prevState, noun: true }));\n            break;\n          case 'verb':\n            setAvailableWordType((prevState) => ({ ...prevState, verb: true }));\n            break;\n          case 'adjective':\n            setAvailableWordType((prevState) => ({ ...prevState, adjective: true }));\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const InitialWord = (wordObjects) => {\n    try {\n      MainLoop:\n      for (let index = 0; index < 4; index++) {\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'noun') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'noun'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'verb') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'verb'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'adjective') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'adjective'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl !== 'noun' && 'verb' && 'adjective') {\n            WordArraySetState(WordsArrayFilter(wordObjects, element.fl));\n            break MainLoop;\n          }\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const PassRequstedWords = (wordObjects) => {\n    try {\n      if (wordObjects[0].hwi) {\n        setWordArray(wordObjects);\n        InitialWord(wordObjects);\n        PartOfSpeechChecker(wordObjects);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = (word = Word) => {\n    if (Word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(word)\n        .then((data) => PassRequstedWords(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const HandleSearchButtonClick = () => {\n    getWords();\n  };\n\n  const HandleBackButtonClick = (isSetword) => {\n    setWordsLoaded(false);\n    if (isSetword) {\n      setWord('');\n    }\n    setReturnedWord('');\n    setPartOfSpeech('');\n    setShortDef('');\n    setWordExample('');\n    setSyns([]);\n    setAnts([]);\n    setAvailableWordType({});\n  };\n\n  // Sets AvailableWordType to an empty object\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType({});\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  const HandleTabClick = (type) => {\n    switch (type) {\n      case 'verb':\n        WordArraySetState(WordsArrayFilter(WordArray, 'verb'));\n        break;\n      case 'noun':\n        WordArraySetState(WordsArrayFilter(WordArray, 'noun'));\n        break;\n      case 'adjective':\n        WordArraySetState(WordsArrayFilter(WordArray, 'adjective'));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getPathName = (Path) => {\n    setPathName(Path);\n  };\n\n  const ThesaurusStore = () => (\n    <ThesaurusPage\n      setWordsLoaded={setWordsLoaded}\n      getInputValue={getInputValue}\n      getWords={getWords}\n      AvailableWordType={AvailableWordType}\n      HandleTabClick={HandleTabClick}\n      PathName={PathName}\n      Ants={Ants}\n      Syns={Syns}\n      WordsLoaded={WordsLoaded}\n      Word={Word}\n      Link={Link}\n      HandleBackButtonClick={HandleBackButtonClick}\n      ReturnedWord={ReturnedWord}\n      PartOfSpeech={PartOfSpeech}\n      ShortDef={ShortDef}\n      ReactHtmlParser={ReactHtmlParser}\n      WordExample={WordExample}\n      getPathName={getPathName}\n    />\n  );\n\n  const Thesaurus = () => {\n    let ThesaurusComponent;\n    if (Word.length) {\n      if (ReturnedWord.length) {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      } else if (Error) {\n        ThesaurusComponent = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusComponent = <Redirect to=\"/\" />;\n    }\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusComponent;\n  };\n\n  // Clear all stored states if the pathName isn't thesaurus\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && ShortDef.length) {\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <>\n      {(PathName === '/thesaurus')\n        ? (\n          <PopUpSearchBar\n            isOpen2={isOpen2}\n            onOpen2={onOpen2}\n            onClose2={onClose2}\n            onToggle2={onToggle2}\n            HandleBackButtonClick={HandleBackButtonClick}\n            getInputValue={getInputValue}\n            getWords={getWords}\n            setWordsLoaded={setWordsLoaded}\n          />\n        )\n        : <></>}\n      <NavBar\n        PathName={PathName}\n        onOpen2={onOpen2}\n        ReturnedWord={ReturnedWord}\n      />\n      <Routes\n        getWords={getWords}\n        Thesaurus={Thesaurus}\n        WordFindType={WordFindType}\n        WordFind={WordFind}\n        isOpen={isOpen}\n        getInputValue={getInputValue}\n        HandleSearchButtonClick={HandleSearchButtonClick}\n        Link={Link}\n        getPathName={getPathName}\n      />\n    </>\n  );\n};\n\nexport default App;\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './containers/App';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Router basename=\"/flary\">\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <App />\n      </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}