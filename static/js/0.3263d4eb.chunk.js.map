{"version":3,"sources":["../../../src/__utils.ts","../../../src/form-control.tsx","../../../src/input.tsx","../../../src/use-form-control.ts","../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js","../node_modules/framer-motion/dist/es/components/AnimatePresence/index.js","../node_modules/framer-motion/dist/es/utils/use-force-update.js","../../../src/scale-fade.tsx","../../../src/input-group.tsx","../../../src/input-element.tsx","components/popup-search-bar/popup-search-bar.component.jsx"],"names":["EASINGS","ease","easeIn","easeOut","easeInOut","createContext","strict","name","FormControl","forwardRef","styles","useMultiStyleConfig","props","id","isReadOnly","uuid","useId","idProp","labelId","feedbackId","helpTextId","useBoolean","isRequired","isInvalid","isDisabled","isFocused","onFocus","setFocus","onBlur","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","htmlProps","useFormControlProvider","omitThemingProps","_className","cx","value","context","role","ref","className","__css","width","position","FormHelperText","field","useFormControlContext","useStyles","useSafeLayoutEffect","helperText","Input","input","describedBy","ariaDescribedBy","omit","disabled","readOnly","required","ariaAttr","callAllHandlers","useFormControl","presenceId","getPresenceId","PresenceChild","_a","children","initial","isPresent","onExitComplete","custom","presenceAffectsLayout","presenceChildren","useConstant","newChildrenMap","useMemo","childId","set","allComplete","forEach","isComplete","register","delete","undefined","_","key","useEffect","size","createElement","PresenceContext","Provider","Map","getChildKey","child","AnimatePresence","_b","exitBeforeEnter","_c","forceRender","unloadingRef","useRef","__read","useState","forcedRenderCount","setForcedRenderCount","useUnmountEffect","current","useCallback","useForceUpdate","layoutContext","useContext","SharedLayoutContext","isSharedLayout","forceUpdate","isInitialRender","filteredChildren","filtered","Children","isValidElement","push","onlyElements","presentChildren","allChildren","exiting","Set","updateChildLookup","Fragment","map","childrenToRender","__spread","presentKeys","targetKeys","numPresent","length","i","indexOf","add","get","insertionIndex","splice","removeIndex","findIndex","presentChild","has","cloneElement","scaleFadeConfig","animate","exit","variants","opacity","scale","initialScale","transitionEnd","transition","duration","enter","ScaleFade","in","reverse","show","unmountOnExit","isOpen","motionProps","mergeWith","motion","InputGroup","groupStyles","validChildren","getValidChildren","clones","paddingRight","theming","variant","React","paddingLeft","pl","pr","borderLeftRadius","borderRightRadius","display","StyledElement","chakra","baseStyle","alignItems","justifyContent","top","zIndex","InputElement","placement","elementStyles","InputLeftElement","InputRightElement","withRouter","history","HandleBackButtonClick","getWords","isOpen2","onToggle2","onClose2","Word","setWord","focusBorderColorInput","useColorModeValue","bg","color","InputField","HandleKeyDownOpenSearchBar","event","ctrlKey","shiftKey","preventDefault","focus","document","addEventListener","removeEventListener","body","style","overflow","background","height","mt","pointerEvents","Search","placeholder","focusBorderColor","onKeyDown","w","rounded","onChange","target","onClick"],"mappings":"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","file":"static/js/0.3263d4eb.chunk.js","sourcesContent":["import { Variant } from \"framer-motion\"\n\nexport type MotionVariants<T extends string> = Record<T, Variant>\n\nexport const EASINGS = {\n  ease: [0.25, 0.1, 0.25, 1],\n  easeIn: [0.4, 0, 1, 1],\n  easeOut: [0, 0, 0.2, 1],\n  easeInOut: [0.4, 0, 0.2, 1],\n}\n","import { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype ControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<ControlContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useBoolean()\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useBoolean()\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  }\n\n  return context\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useFormControlProvider(ownProps)\n\n  const _className = cx(\"chakra-form-control\", props.className)\n\n  return (\n    <FormControlProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          role=\"group\"\n          ref={ref}\n          {...htmlProps}\n          className={_className}\n          __css={{\n            width: \"100%\",\n            position: \"relative\",\n          }}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n\n  /**\n   * Notify the field context when the help text is rendered on screen,\n   * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n   */\n  useSafeLayoutEffect(() => {\n    field?.setHasHelpText.on()\n    return () => field?.setHasHelpText.off()\n  }, [])\n\n  const _className = cx(\"chakra-form__helper-text\", props.className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      __css={styles.helperText}\n      {...props}\n      className={_className}\n      id={props.id ?? field?.helpTextId}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   *  please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nexport const Input = forwardRef<InputProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const ownProps = omitThemingProps(props)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nif (__DEV__) {\n  Input.displayName = \"Input\"\n}\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import { ariaAttr, callAllHandlers, omit } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n  const describedBy: string[] = []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field.feedbackId)\n  if (field?.hasHelpText) describedBy.push(field.helpTextId)\n  const ariaDescribedBy = describedBy.join(\" \")\n\n  const cleanProps = omit(props, [\n    \"isInvalid\",\n    \"isDisabled\",\n    \"isReadOnly\",\n    \"isRequired\",\n  ])\n\n  return {\n    ...cleanProps,\n    id: props.id ?? field?.id,\n    disabled: props.disabled || props.isDisabled || field?.isDisabled,\n    readOnly: props.readOnly || props.isReadOnly || field?.isReadOnly,\n    required: props.required || props.isRequired || field?.isRequired,\n    \"aria-invalid\": ariaAttr(props.isInvalid || field?.isInvalid),\n    \"aria-required\": ariaAttr(props.isRequired || field?.isRequired),\n    \"aria-readonly\": ariaAttr(props.isReadOnly || field?.isReadOnly),\n    \"aria-describedby\": ariaDescribedBy || undefined,\n    onFocus: callAllHandlers(field?.onFocus, props.onFocus),\n    onBlur: callAllHandlers(field?.onBlur, props.onBlur),\n  }\n}\n","import { useMemo, useEffect, createElement } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\nvar presenceId = 0;\nfunction getPresenceId() {\n    var id = presenceId;\n    presenceId++;\n    return id;\n}\nvar PresenceChild = function (_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useConstant(getPresenceId);\n    var context = useMemo(function () { return ({\n        id: id,\n        initial: initial,\n        isPresent: isPresent,\n        custom: custom,\n        onExitComplete: function (childId) {\n            presenceChildren.set(childId, true);\n            var allComplete = true;\n            presenceChildren.forEach(function (isComplete) {\n                if (!isComplete)\n                    allComplete = false;\n            });\n            allComplete && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n        },\n        register: function (childId) {\n            presenceChildren.set(childId, false);\n            return function () { return presenceChildren.delete(childId); };\n        },\n    }); }, \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(function () {\n        presenceChildren.forEach(function (_, key) { return presenceChildren.set(key, false); });\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    useEffect(function () {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [isPresent]);\n    return (createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useContext, useRef, createElement, Fragment, cloneElement, Children, isValidElement } from 'react';\nimport { __spread } from 'tslib';\nimport { SharedLayoutContext, isSharedLayout } from '../../context/SharedLayoutContext.js';\nimport { useForceUpdate } from '../../utils/use-force-update.js';\nimport { PresenceChild } from './PresenceChild.js';\n\nfunction getChildKey(child) {\n    return child.key || \"\";\n}\nfunction updateChildLookup(children, allChildren) {\n    var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n            if (seenChildren.has(key)) {\n                console.warn(\"Children of AnimatePresence require unique keys. \\\"\" + key + \"\\\" is a duplicate.\");\n            }\n            seenChildren.add(key);\n        }\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * @library\n *\n * Any `Frame` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * // As items are added and removed from `items`\n * export function Items({ items }) {\n *   return (\n *     <AnimatePresence>\n *       {items.map(item => (\n *         <Frame\n *           key={item.id}\n *           initial={{ opacity: 0 }}\n *           animate={{ opacity: 1 }}\n *           exit={{ opacity: 0 }}\n *         />\n *       ))}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * @motion\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var forceRender = useForceUpdate();\n    var layoutContext = useContext(SharedLayoutContext);\n    if (isSharedLayout(layoutContext)) {\n        forceRender = layoutContext.forceUpdate;\n    }\n    var isInitialRender = useRef(true);\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(filteredChildren);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map())\n        .current;\n    // A living record of all currently exiting components.\n    var exiting = useRef(new Set()).current;\n    updateChildLookup(filteredChildren, allChildren);\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    if (isInitialRender.current) {\n        isInitialRender.current = false;\n        return (createElement(Fragment, null, filteredChildren.map(function (child) { return (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    var childrenToRender = __spread(filteredChildren);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n        else {\n            // In case this key has re-entered, remove from the exiting list\n            exiting.delete(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    presentChildren.current = childrenToRender;\n    if (process.env.NODE_ENV !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (createElement(Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n","import { useCallback, useRef, useState } from 'react';\nimport { __read } from 'tslib';\nimport { useUnmountEffect } from './use-unmount-effect.js';\n\nfunction useForceUpdate() {\n    var unloadingRef = useRef(false);\n    var _a = __read(useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    useUnmountEffect(function () { return (unloadingRef.current = true); });\n    return useCallback(function () {\n        !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n}\n\nexport { useForceUpdate };\n","import { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype ScaleFadeVariants = MotionVariants<\"enter\" | \"exit\">\n\nconst variants: ScaleFadeVariants = {\n  exit: (props) => ({\n    opacity: 0,\n    ...(props.reverse\n      ? { scale: props.initialScale }\n      : { transitionEnd: { scale: props.initialScale } }),\n    transition: {\n      duration: 0.1,\n      ease: EASINGS.easeOut,\n    },\n  }),\n  enter: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.25,\n      ease: EASINGS.easeInOut,\n    },\n  },\n}\n\nexport const scaleFadeConfig: HTMLMotionProps<\"div\"> = {\n  initial: \"exit\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants,\n}\n\nexport interface ScaleFadeProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * The initial scale of the element\n   * @default 0.95\n   */\n  initialScale?: number\n  /**\n   * If `true`, the element will transition back to exit state\n   */\n  reverse?: boolean\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in?: boolean\n}\n\nexport const ScaleFade = React.forwardRef<HTMLDivElement, ScaleFadeProps>(\n  (props, ref) => {\n    const {\n      unmountOnExit,\n      in: isOpen,\n      reverse = true,\n      initialScale = 0.95,\n      className,\n      ...rest\n    } = props\n\n    const show = unmountOnExit ? isOpen && unmountOnExit : true\n    const custom = { initialScale, reverse }\n\n    const motionProps = mergeWith(scaleFadeConfig, {\n      custom,\n      animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    })\n\n    return (\n      <AnimatePresence custom={custom}>\n        {show && (\n          <motion.div\n            ref={ref}\n            className={cx(\"chakra-offset-slide\", className)}\n            {...motionProps}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  ScaleFade.displayName = \"ScaleFade\"\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-input__group\", className)\n  const groupStyles: InputGroupProps = {}\n\n  const validChildren = getValidChildren(children)\n\n  const input: any = styles.field\n\n  validChildren.forEach((child: any) => {\n    if (!styles) return\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingLeft = input.height ?? input.h\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingRight = input.height ?? input.h\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderRightRadius = 0\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderLeftRadius = 0\n    }\n  })\n\n  const clones = validChildren.map((child: any) => {\n    const { pl, paddingLeft, pr, paddingRight } = child.props\n\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    const theming = {\n      size: child.props?.size || props.size,\n      variant: child.props?.variant || props.variant,\n    }\n\n    return child.type.id !== \"Input\"\n      ? React.cloneElement(child, theming)\n      : React.cloneElement(child, {\n          ...theming,\n          paddingLeft: pl ?? paddingLeft ?? groupStyles?.paddingLeft,\n          paddingRight: pr ?? paddingRight ?? groupStyles?.paddingRight,\n          borderLeftRadius: groupStyles?.borderLeftRadius,\n          borderRightRadius: groupStyles?.borderRightRadius,\n        })\n  })\n\n  return (\n    <chakra.div\n      className={_className}\n      ref={ref}\n      __css={{\n        width: \"100%\",\n        display: \"flex\",\n        position: \"relative\",\n      }}\n      {...rest}\n    >\n      <StylesProvider value={styles}>{clones}</StylesProvider>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\"\n}\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">((props, ref) => {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useStyles()\n  const input: any = styles.field\n\n  const elementStyles: SystemStyleObject = {\n    [placement]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    paddingX: input?.paddingLeft ?? input?.pl,\n  }\n\n  return <StyledElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\"\n}\n\nexport const InputLeftElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\"\n}\n\nexport const InputRightElement = forwardRef<InputElementProps, \"div\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\"\n}\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  Box,\n  Input,\n  useColorModeValue,\n  ScaleFade,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst PopUpSearchBar = ({\n  history, HandleBackButtonClick,\n  getWords, isOpen2, onToggle2, onClose2,\n}) => {\n  const [Word, setWord] = useState('');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const InputField = useRef(null);\n\n  const HandleKeyDownOpenSearchBar = (event) => {\n    if (event.key === 'E' && event.ctrlKey && event.shiftKey) {\n      event.preventDefault();\n      onToggle2();\n      if (InputField?.current) {\n        InputField.current.focus();\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownOpenSearchBar);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownOpenSearchBar);\n    };\n  }, [isOpen2]);\n\n  useEffect(() => {\n    if (isOpen2) {\n      document.body.style.overflow = 'hidden';\n    }\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen2]);\n\n  const HandleEnterKeyPopUpSearchBar = (event) => {\n    if (event.key === 'Enter') {\n      HandleBackButtonClick(false);\n      getWords(Word);\n      history.push('/thesaurus');\n      onClose2();\n    }\n  };\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  return (\n    <>\n      {(isOpen2)\n        ? (\n          <>\n            <Box position=\"fixed\" zIndex=\"9999\" background=\"gray.800\" opacity=\"0.6\" style={{ height: '100vh', width: '100vw' }} />\n            <Box>\n              <Box position=\"fixed\" display=\"flex\" alignItems=\"flex-start\" justifyContent=\"center\" zIndex=\"9999\" style={{ height: '100vh', width: '100vw' }}>\n                <ScaleFade in={isOpen2}>\n                  <Box className=\"relative\">\n                    <InputGroup mt=\"32\">\n                      <InputLeftElement\n                        zIndex=\"9999999\"\n                        pointerEvents=\"none\"\n                        // eslint-disable-next-line react/no-children-prop\n                        children={<SearchIcon zIndex=\"9999999\" color={color} />}\n                      />\n                      <Input ref={InputField} style={{ zIndex: 999999 }} placeholder=\"Search a word\" focusBorderColor={focusBorderColorInput} onKeyDown={HandleEnterKeyPopUpSearchBar} background={bg} color={color} w={['16rem', 'xs', null]} rounded=\"xl\" onChange={getInputValue} />\n                    </InputGroup>\n                  </Box>\n                </ScaleFade>\n                <Box position=\"fixed\" style={{ height: '100vh', width: '100vw' }} background=\"transparent\" onClick={onClose2} />\n              </Box>\n            </Box>\n          </>\n        )\n        : <></>}\n    </>\n  );\n};\n\nexport default withRouter(PopUpSearchBar);\n"],"sourceRoot":""}