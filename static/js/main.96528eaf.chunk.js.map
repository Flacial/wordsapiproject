{"version":3,"sources":["services/getRequest.js","components/words-container/words.container.component.jsx","components/popup-search-bar/popup-search-bar.component.jsx","pages/ThesaurusPage/ThesaurusPage.jsx","components/search-input/search-input.component.jsx","pages/SearchPage/SearchPage.jsx","routes/routes.jsx","components/help-button/help-button.component.jsx","components/theme-button/theme-button.component.jsx","components/search-button/search-button.component.jsx","components/NavBar/NavBar.jsx","containers/App.jsx","theme.js","index.jsx"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","WordTypeContainer","styled","div","ChakraWordTypeContainer","chakra","WordsContainer","props","children","ml","mr","marginTop","boxShadow","gradientbg","isLargerthan440","bgGradient","withRouter","history","HandleBackButtonClick","getWords","isOpen2","onToggle2","onClose2","onOpen2","useState","Word","setWord","focusBorderColorInput","useColorModeValue","bg","color","InputField","useRef","HandleKeyDownOpenSearchBar","event","key","ctrlKey","shiftKey","preventDefault","current","focus","useEffect","document","addEventListener","removeEventListener","style","overflow","position","zIndex","background","opacity","height","width","display","alignItems","justifyContent","in","className","mt","pointerEvents","Search","ref","placeholder","focusBorderColor","onKeyDown","push","w","rounded","onChange","target","value","onClick","ThesaurusHeader","tw","h1","ChakraThesaurusHeader","WordAndType","TheWord","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","Link","ReturnedWord","PartOfSpeech","ShortDef","ReactHtmlParser","WordExample","WordsLoaded","Syns","Ants","HandleTabClick","AvailableWordType","LinkChak","fontColorMain","fontColorHeaders","fontColorDarkWhiteSmallWords","fontColorSynAnt","hover","hoverSynAntItems","textDecoration","SkeletonStartColor","SkeletonEndColor","focusBorderColorGeneral","Tabshover","fallbackBackground","NounTabButton","VerbTabButton","AdjectiveTabButton","onClickWords","textContent","turnWordInToList","MainObj","ReturnedObj","undefined","map","index","_hover","listStyleType","location","useLocation","changeTitle","ComponentState","initialTitle","title","length","toUpperCase","slice","HandleKeyDownBackButtonQctrl","HandleKeyDownTabsButton123","click","window","scrollTo","top","behavior","TheWholeThesaurus","TransitionFade","mb","fontSize","fontFamily","fontStyle","startColor","endColor","left","_focus","to","pathname","CSS","supports","h","borderRadius","align","variant","noun","Object","keys","_selected","outline","outlineColor","outlineStyle","verb","adjective","getInputValue","WordValueSP","setWordSP","inputField","HandleFocusOnInputEnterCtrlShift","onKeyPress","which","onBlur","paddingY","paddingLeft","MainContainer","WordFindType","WordFind","isOpen","HandleSearchButtonClick","getPathName","useMediaQuery","isMoreThan420px","alignContent","whiteSpace","placement","cursor","size","icon","Info","fontWeight","sm","md","transition","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","xmlns","d","bgColor","as","ReachLink","Routes","Thesaurus","exact","path","Help","KeyboardShortCutsColor","m","Question","ThemeButton","useColorMode","colorMode","toggleColorMode","ThemeButtonRef","HandleKeyDownThemeIcon","Moon","SearchButtonHeader","InputFiledSearchBarPopUp","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","Error","setError","PathName","useDisclosure","onOpen","onClose","onToggle","setWordFind","setWordFindType","setWordsLoaded","setSyns","setAnts","WordArray","setWordArray","setAvailableWordType","WordsArrayFilter","wordObjects","type","filter","fl","WordArraySetState","wordArray","hw","hwi","shortdef","dt","def","sseq","syns","meta","ants","ExampleModified","t","replace","PassRequstedWords","MainLoop","element","error","console","log","InitialWord","forEach","arr","prevState","PartOfSpeechChecker","then","data","isSetword","ThesaurusStore","ThesaurusComponent","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.96528eaf.chunk.js","sourcesContent":["/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://flary-server.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  useColorModeValue,\n  useMediaQuery,\n  chakra,\n} from '@chakra-ui/react';\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 15px;\npadding-bottom: 20px;\nword-spacing: 0;\n`;\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer);\n\nconst WordsContainer = (props) => {\n  const {\n    children, ml, mr, marginTop, boxShadow, gradientbg, isLargerthan440,\n  } = props;\n\n  return (\n    <ChakraWordTypeContainer\n      boxShadow={boxShadow}\n      bgGradient={gradientbg}\n      ml={ml}\n      mr={mr}\n      marginTop={marginTop}\n    >\n      {children}\n    </ChakraWordTypeContainer>\n  );\n};\n\nexport default WordsContainer;\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Presets } from 'react-component-transition';\nimport {\n  chakra,\n  Box,\n  Input,\n  useDisclosure,\n  useColorModeValue,\n  Portal,\n  Fade,\n  ScaleFade,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst PopUpSearchBar = ({\n  history, HandleBackButtonClick,\n  getWords, isOpen2, onToggle2, onClose2, onOpen2,\n}) => {\n  const [Word, setWord] = useState('');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const InputField = useRef(null);\n\n  const HandleSearchButtonClickHeader = () => {\n    onToggle2();\n    if (InputField?.current) {\n      InputField.current.focus();\n    }\n  };\n\n  const HandleKeyDownOpenSearchBar = (event) => {\n    if (event.key === 'E' && event.ctrlKey && event.shiftKey) {\n      event.preventDefault();\n      onToggle2();\n      if (InputField?.current) {\n        InputField.current.focus();\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownOpenSearchBar);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownOpenSearchBar);\n    };\n  }, [isOpen2]);\n\n  useEffect(() => {\n    if (isOpen2) {\n      document.body.style.overflow = 'hidden';\n    }\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen2]);\n\n  const HandleEnterKeyPopUpSearchBar = (event) => {\n    if (event.key === 'Enter') {\n      HandleBackButtonClick(false);\n      getWords(Word);\n      history.push('/thesaurus');\n      onClose2();\n    }\n  };\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  return (\n    <>\n      {(isOpen2)\n        ? (\n          <>\n            <Box position=\"fixed\" zIndex=\"9999\" background=\"gray.800\" opacity=\"0.6\" style={{ height: '100vh', width: '100vw' }} />\n            <Box>\n              <Box position=\"fixed\" display=\"flex\" alignItems=\"flex-start\" justifyContent=\"center\" zIndex=\"9999\" style={{ height: '100vh', width: '100vw' }}>\n                <ScaleFade in={isOpen2}>\n                  <Box className=\"relative\">\n                    <InputGroup mt=\"32\">\n                      <InputLeftElement\n                        zIndex=\"9999999\"\n                        pointerEvents=\"none\"\n                        // eslint-disable-next-line react/no-children-prop\n                        children={<SearchIcon zIndex=\"9999999\" color={color} />}\n                      />\n                      <Input ref={InputField} style={{ zIndex: 999999 }} placeholder=\"Search a word\" focusBorderColor={focusBorderColorInput} onKeyDown={HandleEnterKeyPopUpSearchBar} background={bg} color={color} w={['16rem', 'xs', null]} rounded=\"xl\" onChange={getInputValue} />\n                    </InputGroup>\n                  </Box>\n                </ScaleFade>\n                <Box position=\"fixed\" style={{ height: '100vh', width: '100vw' }} background=\"transparent\" onClick={onClose2} />\n              </Box>\n            </Box>\n          </>\n        )\n        : <></>}\n    </>\n  );\n};\n\nexport default withRouter(PopUpSearchBar);\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/prop-types */\nimport {\n  useEffect, React, useState, useRef,\n} from 'react';\nimport { useLocation, withRouter } from 'react-router-dom';\nimport tw from 'tailwind-styled-components';\nimport {\n  chakra,\n  Box,\n  useColorModeValue,\n  SkeletonText,\n  Heading,\n  ListItem,\n  UnorderedList,\n  useMediaQuery,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Skeleton,\n  Stack,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { Presets } from 'react-component-transition';\nimport WordsContainer from '../../components/words-container/words.container.component';\nimport PopUpSearchBar from '../../components/popup-search-bar/popup-search-bar.component';\n\nconst ThesaurusHeader = tw.h1`\n    italic\n    font-serif\n    text-3xl\n    font-bold\n    inline-block\n`;\nconst ChakraThesaurusHeader = chakra(ThesaurusHeader);\n\nconst WordAndType = tw.div`\n    mt-1\n`;\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`;\n\nconst ChakraTheWord = chakra(TheWord);\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`;\n\nconst ChakraTheType = chakra(TheType);\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`;\n\nconst ChakraSynAntHeader = chakra(SynAntHeader);\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`;\n\nconst Example = tw.span`\n    text-xl\n    block\n`;\n\nconst ChakraExample = chakra(Example);\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`;\n\nconst ChakraText = chakra(Text);\n\nconst LinkCSS = `\n  py-2\n  px-4\n  rounded-xl\n  shadow-xl\n  inline-block\n  focus:outline-none\n  focus:border\n  focus:ring-2 focus:ring-blue-500\n  transition duration-500 ease-in-out\n  m-4\n`;\n\nconst ThesaurusPage = (props) => {\n  const {\n    Link,\n    HandleBackButtonClick,\n    ReturnedWord,\n    PartOfSpeech,\n    ShortDef,\n    ReactHtmlParser,\n    WordExample,\n    WordsLoaded,\n    Syns,\n    Ants,\n    HandleTabClick,\n    AvailableWordType,\n    getWords,\n    history,\n  } = props;\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7');\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300');\n  const hover = useColorModeValue({ background: 'gray.200' }, { background: 'gray.700' });\n  const hoverSynAntItems = useColorModeValue({ textDecoration: 'underline' }, { textDecoration: 'underline' });\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200');\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const Tabshover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fallbackBackground = useColorModeValue('rgba(255, 255, 255, .9)', 'rgba(0, 0, 0, 0.26)');\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)');\n  const boxShadow = useColorModeValue('0px 0px 25px #a1a1a1, -10px -10px 0px #3B82F6', '0px 0px 11px #1c1c1c, -10px -10px 0px orange');\n  const NounTabButton = useRef(null);\n  const VerbTabButton = useRef(null);\n  const AdjectiveTabButton = useRef(null);\n\n  const onClickWords = (event) => {\n    HandleBackButtonClick();\n    getWords(event.target.textContent);\n    history.push('/thesaurus');\n  };\n\n  const turnWordInToList = (MainObj) => {\n    let ReturnedObj = [];\n    if (MainObj !== undefined) {\n      ReturnedObj = MainObj.map((word, index) => {\n        if (MainObj[index + 1] === undefined) {\n          return <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={index}>{word}</ListItem>;\n        }\n        return (\n          <>\n            <ListItem _hover={hoverSynAntItems} className=\"cursor-pointer\" onClick={onClickWords} listStyleType=\"none\" display=\"inline-block\" key={word}>{word}</ListItem>\n            <span key={index}>{',\\u00A0'}</span>\n          </>\n        );\n      });\n    }\n    return ReturnedObj;\n  };\n\n  // Change synonyms and antonyms words to list items\n  const OrderSynonyms = () => turnWordInToList(Syns);\n  const OrderAntonyms = () => turnWordInToList(Ants);\n\n  const location = useLocation();\n\n  const changeTitle = (ComponentState) => {\n    const initialTitle = 'Thesaurus By Flary';\n    if (ComponentState === 'mount') {\n      document.title = ReturnedWord.length ? `${ReturnedWord[0].toUpperCase() + ReturnedWord.slice(1)} Synonyms, ${ReturnedWord} Antonyms | Flary Thesaurus` : initialTitle;\n    } else {\n      document.title = initialTitle;\n    }\n  };\n\n  useEffect(() => {\n    changeTitle('mount');\n    return () => {\n      changeTitle();\n    };\n  }, [ReturnedWord]);\n\n  const HandleKeyDownBackButtonQctrl = (event) => {\n    if (event.key === 'Q' && event.ctrlKey) {\n      HandleBackButtonClick();\n      history.push('/');\n    }\n  };\n\n  const HandleKeyDownTabsButton123 = (event) => {\n    switch (event.key) {\n      case '!':\n        event.preventDefault();\n        NounTabButton.current.click();\n        break;\n      case '@':\n        event.preventDefault();\n        VerbTabButton.current.click();\n        break;\n      case '#':\n        event.preventDefault();\n        AdjectiveTabButton.current.click();\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownTabsButton123);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownTabsButton123);\n    };\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownBackButtonQctrl);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }, []);\n\n  const TheWholeThesaurus = () => (\n    <WordsContainer boxShadow={boxShadow} gradientbg={gradientbg} ml={['0', '9em', null]} mr={['0', '9em', null]} marginTop={['3', null, null]}>\n      <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n        Thesaurus\n      </ChakraThesaurusHeader>\n      {(WordsLoaded)\n        ? (\n          <Presets.TransitionFade>\n            <WordAndType>\n              <Presets.TransitionFade>\n                <ChakraTheWord color={fontColorMain}>\n                  {ReturnedWord}\n                </ChakraTheWord>\n              </Presets.TransitionFade>\n              <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n                {PartOfSpeech}\n              </ChakraTheType>\n            </WordAndType>\n            <ChakraSynAntHeader color={fontColorHeaders}>\n              Synonyms & Antonyms of\n              {' '}\n              <em>{ReturnedWord}</em>\n            </ChakraSynAntHeader>\n            <SynAntContainer>\n              <ChakraText color={fontColorMain}>\n                {ShortDef}\n              </ChakraText>\n              {(ShortDef.slice(0, 5) === WordExample.slice(0, 5))\n                ? <></>\n                : (\n                  <ChakraExample color={fontColorSynAnt}>\n                    {' '}\n                    <strong>//</strong>\n                    {' '}\n                    {ReactHtmlParser(WordExample)}\n                  </ChakraExample>\n                )}\n              <Heading mb=\"1\" mt=\"2\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                Synonyms for\n                {' '}\n                <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n              </Heading>\n              <Box w={['100%', '70%', null]}>\n                <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n              </Box>\n              {(Ants !== undefined)\n                ? (\n                  <div>\n                    <Heading mb=\"1\" mt=\"4\" fontSize=\"2xl\" fontFamily=\"sans-serif\" color={fontColorHeaders}>\n                      Antonyms for\n                      {' '}\n                      <chakra.span fontStyle=\"italic\">{ReturnedWord}</chakra.span>\n                    </Heading>\n                    <Box w={['100%', '70%', null]}>\n                      <UnorderedList fontFamily=\"sans\" fontSize=\"lg\" ml=\"0\" color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n                    </Box>\n                  </div>\n                )\n                : <></>}\n            </SynAntContainer>\n          </Presets.TransitionFade>\n        )\n        : (\n          <Presets.TransitionFade>\n            <Stack>\n              <Skeleton height=\"9px\" mt=\"4\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" mb=\"1\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n              <Skeleton height=\"9px\" w=\"80%\" mb=\"3\" startColor={SkeletonStartColor} endColor={SkeletonEndColor} />\n            </Stack>\n          </Presets.TransitionFade>\n        )}\n    </WordsContainer>\n  );\n\n  return (\n    <>\n      {ReturnedWord.length\n        ? (\n          <Box zIndex=\"9991\" className=\"fixed top-0\" left={[null, '32', null]}>\n            <LinkChak _focus={focusBorderColorGeneral} bg={bg} color={color} _hover={hover} onClick={HandleBackButtonClick} className={LinkCSS} to=\"/\">\n              Back to search\n            </LinkChak>\n          </Box>\n        )\n        : <></>}\n      {(location.pathname === '/thesaurus')\n        ? (\n          <Box\n            background={!(CSS.supports('backdrop-filter', 'blur(5px)'))\n                  && fallbackBackground}\n            className=\"backdrop-blur\"\n            zIndex=\"9990\"\n            position=\"fixed\"\n            top=\"0\"\n            h=\"70px\"\n            w=\"full\"\n            borderRadius=\"0 0 20px 20px\"\n          />\n        )\n        // TODO Break tabs into its own compoonent\n        : <></>}\n\n      <Tabs align=\"center\" variant=\"soft-rounded\">\n        {/* <Box className='backdrop-blur z-50' display='flex'\n         justifyContent='center' h='22' width='full'  position='fixed' bottom='0'> */}\n        <TabList marginTop={['4', '2', null]}>\n          {(AvailableWordType.noun) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n            : <Tab ref={NounTabButton} onClick={() => HandleTabClick('noun')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Noun</Tab>\n          )\n            : <></>}\n          {(AvailableWordType.verb) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n            : <Tab ref={VerbTabButton} onClick={() => HandleTabClick('verb')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Verb</Tab>\n          )\n            : <></>}\n          {(AvailableWordType.adjective) ? ((Object.keys(AvailableWordType).length === 1) ? <></>\n            : <Tab ref={AdjectiveTabButton} onClick={() => HandleTabClick('adjective')} _hover={Tabshover} _selected={{ color, bg }} _focus={focusBorderColorGeneral} outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }}>Adjective</Tab>\n          )\n            : <></>}\n        </TabList>\n        {/* </Box> */}\n        <TabPanels>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n          <TabPanel>\n            {TheWholeThesaurus()}\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </>\n  );\n};\n\nexport default withRouter(ThesaurusPage);\n","/* eslint-disable react/prop-types */\nimport { Input, useColorModeValue } from '@chakra-ui/react';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nconst SearchInput = ({ getInputValue, getWords, history }) => {\n  const focusBorderColorInput = useColorModeValue('#3B82F6',\n    '#ffa500');\n  const [WordValueSP, setWordSP] = useState('');\n  const inputField = useRef(null);\n\n  const HandleFocusOnInputEnterCtrlShift = (event) => {\n    if (event.key === 'A' && event.ctrlKey) {\n      event.preventDefault();\n      inputField.current.focus();\n    }\n  };\n\n  const onBlur = () => {\n    if (WordValueSP.length) {\n      getInputValue(WordValueSP);\n    }\n  };\n\n  const HandleEnterKey = (event) => {\n    if (event.which === 13) {\n      getInputValue(WordValueSP);\n      getWords(WordValueSP);\n      history.push('/thesaurus');\n    }\n  };\n\n  const onInputChange = (event) => {\n    setWordSP(event.target.value);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    return () => {\n      document.removeEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    };\n  });\n\n  return (\n    <Input ref={inputField} focusBorderColor={focusBorderColorInput} onKeyPress={HandleEnterKey} variant=\"filled\" w={['18rem', 'xs', null]} rounded=\"xl\" mr={[null, null, '2rem']} value={WordValueSP} onBlur={onBlur} onChange={onInputChange} paddingY=\"5\" placeholder=\"Search for words\" paddingLeft=\"9\" />\n  );\n};\n\nexport default withRouter(SearchInput);\n","/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport { useLocation, withRouter, Link as ReachLink } from 'react-router-dom';\nimport React, {\n  useEffect,\n} from 'react';\nimport {\n  Heading,\n  Box,\n  chakra,\n  Fade,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  useMediaQuery,\n  Button,\n} from '@chakra-ui/react';\nimport { InfoIcon, SearchIcon } from '@chakra-ui/icons';\nimport SearchInput from '../../components/search-input/search-input.component';\n\nconst MainContainer = tw.div`\n   text-center\n   mt-40\n   sm:mt-0\n   md2:mt-38\n   lg:mt-32\n`;\n\nconst SearchPage = ({\n  WordFindType, WordFind, isOpen,\n  getInputValue, HandleSearchButtonClick, getPathName, getWords,\n}) => {\n  const [isMoreThan420px] = useMediaQuery('(max-width: 420px)');\n  const location = useLocation();\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n    <MainContainer>\n      <Box display=\"flex\" alignContent=\"center\" justifyContent=\"center\" mt={['12', null, '15', '0', '32']} mb={['5', null, '12']}>\n        <Heading fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">\n          Words to be\n          {(isMoreThan420px) ? '\\u00A0' : ' thesaurused'}\n        </Heading>\n        <Popover placement=\"auto-end\" display=\"inline-block\">\n          <PopoverTrigger>\n            {(isMoreThan420px)\n              ? <Heading textDecoration={`underline wavy ${fontColorDarkWhiteSmallWords}`} _hover={[null, null, hover]} cursor=\"pointer\" fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">thesaurused</Heading>\n              : <IconButton variant=\"ghost\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} ml=\"2\" size=\"sm\" icon={<InfoIcon w=\"5\" h=\"5\" />} />}\n          </PopoverTrigger>\n          <PopoverContent outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Thesaurus</PopoverHeader>\n            <PopoverBody>\n              A thesaurus (plural thesauri or thesauruses) or synonym dictionary\n              is a reference work for finding synonyms and sometimes antonyms of words.\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      </Box>\n      <Box display={{ sm: 'flex', md: 'flex' }} justifyContent={[null, 'center', null]}>\n        <Box>\n          <Box justifyContent=\"center\" display=\"flex\" w={['100%', 'xs', null]}>\n            <Box w={['18rem', 'xs', null]} position=\"relative\">\n              <SearchInput getInputValue={getInputValue} getWords={getWords} />\n              <SearchIcon color=\"gray.300\" position=\"absolute\" left=\"3\" top=\"3.5\" />\n            </Box>\n          </Box>\n          {WordFind\n                && (\n                <Fade in={isOpen}>\n                  <Box mt=\"1\" display=\"flex\" justifyContent={['center', 'flex-start', null]} transition=\"ease\">\n                    <chakra.svg mt=\"1\" ml={[null, '4', null]} outline=\"none\" stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\" />\n                    </chakra.svg>\n                    <chakra.span ml=\"1\" mb={['-1', 0, 0]} color=\"red.400\">\n                      {(WordFindType === 'no response' ? 'Word not found! (Misspelled)' : ((WordFindType === 'no input') ? 'Input is empty, type a word!' : 'The word is not in the thesaurus!'))}\n                    </chakra.span>\n                  </Box>\n                </Fade>\n                )}\n        </Box>\n\n        {\n          !isMoreThan420px && (\n            <Box ml={[0, 6, null]} mt={[5, 1, 0]}>\n              <Button\n                _hover={{ background: 'gray.200' }}\n                _focus={focusBorderColorGeneral}\n                color=\"gray.800\"\n                bgColor=\"gray.100\"\n                as={ReachLink}\n                onClick={HandleSearchButtonClick}\n                to=\"/thesaurus\"\n                borderRadius=\"xl\"\n              >\n                Search\n              </Button>\n            </Box>\n          )\n        }\n      </Box>\n    </MainContainer>\n  );\n};\n\nexport default withRouter(SearchPage);\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\nimport React from 'react';\nimport { Presets } from 'react-component-transition';\nimport SearchPage from '../pages/SearchPage/SearchPage';\n\nfunction Routes({ Thesaurus, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <SearchPage {...props} />\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {Thesaurus()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  Button,\n  chakra,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst Help = () => {\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const KeyboardShortCutsColor = useColorModeValue('gray.600', 'gray.400');\n\n  return (\n    <Popover placement=\"auto\">\n      <PopoverTrigger>\n        <Button\n          _focus={focusBorderColorInput}\n          focusBorderColor={focusBorderColorInput}\n          boxShadow=\"lg\"\n          outline=\"none\"\n          outlineColor=\"initial\"\n          style={{ outlineStyle: 'none' }}\n          m=\"4\"\n          mr={[null, '40', null]}\n          rounded=\"xl\"\n        >\n          <QuestionIcon />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent width=\"max-content\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Keyboard Shortcuts</PopoverHeader>\n        <PopoverBody className=\"whitespace-pre-wrap text-left\">\n          <strong>Global</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Switch theme:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + X</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Home Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Focus on input field:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + A</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Thesaurus Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Go to Home Page:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + Q</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Search bar:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + E</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Switch word type:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Shift + 1 or 2 or 3</chakra.span>\n          </chakra.span>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Help;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  chakra, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\n\nconst ThemeButton = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const ThemeButtonRef = useRef(null);\n  const HandleKeyDownThemeIcon = (event) => {\n    if (event.key === 'X' && event.ctrlKey) {\n      event.preventDefault();\n      ThemeButtonRef.current.click();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownThemeIcon);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownThemeIcon);\n    };\n  }, []);\n\n  return (\n    <Button ref={ThemeButtonRef} _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={toggleColorMode}>\n      {colorMode === 'light'\n        ? <MoonIcon />\n        : (\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n          </chakra.svg>\n        )}\n    </Button>\n  );\n};\n\nexport default ThemeButton;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  Button, useColorModeValue,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\n\nconst SearchButtonHeader = ({ onOpen2 }) => {\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n    <Button _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={onOpen2}>\n      <SearchIcon />\n    </Button>\n  );\n};\n\nexport default SearchButtonHeader;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Help from '../help-button/help-button.component';\nimport ThemeButton from '../theme-button/theme-button.component';\nimport SearchButtonHeader from '../search-button/search-button.component';\n\nconst NavBar = ({\n  onOpen2, InputFiledSearchBarPopUp, location,\n}) => (\n  <Box\n    zIndex=\"9991\"\n    position=\"sticky\"\n    top=\"0\"\n    h=\"70px\"\n    display=\"flex\"\n    justifyContent=\"flex-end\"\n  >\n    {(location.pathname === '/thesaurus')\n      ? (\n        <SearchButtonHeader\n          onOpen2={onOpen2}\n          InputFiledSearchBarPopUp={InputFiledSearchBarPopUp}\n        />\n      )\n      : <></>}\n    <ThemeButton />\n    <Help />\n  </Box>\n);\n\nexport default withRouter(NavBar);\n","/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport ReactHtmlParser from 'react-html-parser';\nimport {\n  useState,\n  useEffect,\n  React,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\nimport ThesaurusPage from '../pages/ThesaurusPage/ThesaurusPage';\nimport Routes from '../routes/routes';\nimport NavBar from '../components/NavBar/NavBar';\nimport PopUpSearchBar from '../components/popup-search-bar/popup-search-bar.component';\n\n// TODO understand wth is your state doing\n\nconst App = ({ location }) => {\n  const [Word, setWord] = useState('');\n  const [ReturnedWord, setReturnedWord] = useState('');\n  const [ShortDef, setShortDef] = useState('');\n  const [PartOfSpeech, setPartOfSpeech] = useState('');\n  const [WordExample, setWordExample] = useState('');\n  const [Error, setError] = useState(false);\n  const PathName = location.pathname;\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const {\n    isOpen: isOpen2,\n    onOpen: onOpen2,\n    onClose: onClose2,\n    onToggle: onToggle2,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [Syns, setSyns] = useState([]);\n  const [Ants, setAnts] = useState([]);\n  const [WordArray, setWordArray] = useState([]);\n  const [AvailableWordType, setAvailableWordType] = useState({});\n\n  // Used as a condition to render the values or skeleton in ThesaurusPage\n  useEffect(() => {\n    if (PathName === '/thesaurus' && !ShortDef.length) {\n      setWordsLoaded(false);\n    } else if (PathName === '/thesaurus' && ShortDef.length) {\n      setWordsLoaded(true);\n    }\n  });\n\n  const getInputValue = (event) => {\n    setWord(event);\n  };\n\n  const WordsArrayFilter = (wordObjects, type) => {\n    const filteredArray = wordObjects.filter((word) => word.fl === type);\n    return filteredArray[0];\n  };\n\n  const WordArraySetState = (wordArray) => {\n    const {\n      fl,\n      hwi: {\n        hw,\n      },\n      shortdef,\n      def: [{\n        sseq: dt,\n      }],\n      meta: {\n        syns,\n      },\n      meta: {\n        ants,\n      },\n    } = wordArray;\n    const Example = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1];\n    const ExampleModified = Example.replace('{it}', '<em>').replace('{/it}', '</em>');\n    setAnts(ants[0]);\n    setSyns(syns[0]);\n    setReturnedWord(hw);\n    setPartOfSpeech(fl);\n    setShortDef(shortdef[0]);\n    setWordExample(ExampleModified);\n  };\n\n  const PartOfSpeechChecker = (wordObjects) => {\n    try {\n      wordObjects.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType((prevState) => ({ ...prevState, noun: true }));\n            break;\n          case 'verb':\n            setAvailableWordType((prevState) => ({ ...prevState, verb: true }));\n            break;\n          case 'adjective':\n            setAvailableWordType((prevState) => ({ ...prevState, adjective: true }));\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const InitialWord = (wordObjects) => {\n    try {\n      MainLoop:\n      for (let index = 0; index < 4; index++) {\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'noun') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'noun'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'verb') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'verb'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl === 'adjective') {\n            WordArraySetState(WordsArrayFilter(wordObjects, 'adjective'));\n            break MainLoop;\n          }\n        }\n        // eslint-disable-next-line no-shadow\n        for (let index = 0; index < wordObjects.length; index++) {\n          const element = wordObjects[index];\n          if (element.fl !== 'noun' && 'verb' && 'adjective') {\n            WordArraySetState(WordsArrayFilter(wordObjects, element.fl));\n            break MainLoop;\n          }\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const PassRequstedWords = (wordObjects) => {\n    try {\n      if (wordObjects[0].hwi) {\n        setWordArray(wordObjects);\n        InitialWord(wordObjects);\n        PartOfSpeechChecker(wordObjects);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = (word = Word) => {\n    if (word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(word)\n        .then((data) => PassRequstedWords(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const HandleSearchButtonClick = () => {\n    getWords();\n  };\n\n  const HandleBackButtonClick = (isSetword) => {\n    setWordsLoaded(false);\n    if (isSetword) {\n      setWord('');\n    }\n    setReturnedWord('');\n    setPartOfSpeech('');\n    setShortDef('');\n    setWordExample('');\n    setSyns([]);\n    setAnts([]);\n    setAvailableWordType({});\n  };\n\n  // Sets AvailableWordType to an empty object\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType({});\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  const HandleTabClick = (type) => {\n    switch (type) {\n      case 'verb':\n        WordArraySetState(WordsArrayFilter(WordArray, 'verb'));\n        break;\n      case 'noun':\n        WordArraySetState(WordsArrayFilter(WordArray, 'noun'));\n        break;\n      case 'adjective':\n        WordArraySetState(WordsArrayFilter(WordArray, 'adjective'));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const ThesaurusStore = () => (\n    <ThesaurusPage\n      setWordsLoaded={setWordsLoaded}\n      getInputValue={getInputValue}\n      getWords={getWords}\n      AvailableWordType={AvailableWordType}\n      HandleTabClick={HandleTabClick}\n      PathName={PathName}\n      Ants={Ants}\n      Syns={Syns}\n      WordsLoaded={WordsLoaded}\n      Word={Word}\n      Link={Link}\n      HandleBackButtonClick={HandleBackButtonClick}\n      ReturnedWord={ReturnedWord}\n      PartOfSpeech={PartOfSpeech}\n      ShortDef={ShortDef}\n      ReactHtmlParser={ReactHtmlParser}\n      WordExample={WordExample}\n    />\n  );\n\n  const Thesaurus = () => {\n    let ThesaurusComponent;\n    if (Word.length) {\n      if (ReturnedWord.length) {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      } else if (Error) {\n        ThesaurusComponent = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusComponent = <Redirect to=\"/\" />;\n    }\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusComponent;\n  };\n\n  // Clear all stored states if the pathName isn't thesaurus\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && ShortDef.length) {\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <>\n      {(PathName === '/thesaurus')\n        ? (\n          <PopUpSearchBar\n            isOpen2={isOpen2}\n            onOpen2={onOpen2}\n            onClose2={onClose2}\n            onToggle2={onToggle2}\n            HandleBackButtonClick={HandleBackButtonClick}\n            getInputValue={getInputValue}\n            getWords={getWords}\n            setWordsLoaded={setWordsLoaded}\n          />\n        )\n        : <></>}\n      <NavBar\n        PathName={PathName}\n        onOpen2={onOpen2}\n      />\n      <Routes\n        getWords={getWords}\n        Thesaurus={Thesaurus}\n        WordFindType={WordFindType}\n        WordFind={WordFind}\n        isOpen={isOpen}\n        getInputValue={getInputValue}\n        HandleSearchButtonClick={HandleSearchButtonClick}\n        Link={Link}\n      />\n    </>\n  );\n};\n\nexport default withRouter(App);\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './containers/App';\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Router basename=\"/flary\">\n        <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n        <App />\n      </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}