{"version":3,"sources":["components/popup-search-bar/popup-search-bar.component.jsx"],"names":["connect","words","WordArray","NounArray","VerbArray","AdjArray","PhraseArray","AdverbArray","AvailableWordType","isOpenSearchBar","dispatch","onToggleSearchBar","onCloseSearchBar","withRouter","history","HandleBackButtonClick","getWords","useState","Word","setWord","focusBorderColorInput","useColorModeValue","bg","color","InputField","useRef","HandleKeyDownOpenSearchBar","event","key","ctrlKey","shiftKey","preventDefault","current","focus","useEffect","document","addEventListener","removeEventListener","body","style","overflow","position","zIndex","background","opacity","height","width","display","alignItems","justifyContent","in","className","mt","pointerEvents","children","id","ref","placeholder","focusBorderColor","onKeyDown","push","w","rounded","onChange","target","value","onClick"],"mappings":"uNAqHeA,uBAhBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,MAAgB,CACtCC,UAAWD,EAAMC,UACjBC,UAAWF,EAAME,UACjBC,UAAWH,EAAMG,UACjBC,SAAUJ,EAAMI,SAChBC,YAAaL,EAAMK,YACnBC,YAAaN,EAAMM,YACnBC,kBAAmBP,EAAMO,kBACzBC,gBAAiBR,EAAMQ,oBAGE,SAACC,GAAD,MAAe,CACxCC,kBAAmB,kBAAMD,EAASC,gBAClCC,iBAAkB,kBAAMF,EAASE,mBAGpBZ,CAA6Ca,aApGrC,SAAC,GAGjB,IAFLC,EAEI,EAFJA,QAASC,EAEL,EAFKA,sBACTC,EACI,EADJA,SAAUP,EACN,EADMA,gBAAiBE,EACvB,EADuBA,kBAAmBC,EAC1C,EAD0CA,iBAC1C,EACoBK,mBAAS,IAD7B,mBACGC,EADH,KACSC,EADT,KAEEC,EAAwBC,YAAkB,UAAW,WACrDC,EAAKD,YAAkB,UAAW,6BAClCE,EAAQF,YAAkB,UAAW,WACrCG,EAAaC,iBAAO,MAEpBC,EAA6B,SAACC,GAChB,MAAdA,EAAMC,KAAeD,EAAME,SAAWF,EAAMG,WAC9CH,EAAMI,iBACNpB,KACA,OAAIa,QAAJ,IAAIA,OAAJ,EAAIA,EAAYQ,UACdR,EAAWQ,QAAQC,SAGL,WAAdN,EAAMC,MACRD,EAAMI,iBACNnB,MAIJsB,qBAAU,WAER,OADAC,SAASC,iBAAiB,UAAWV,GAC9B,WACLS,SAASE,oBAAoB,UAAWX,MAEzC,CAACjB,IAEJyB,qBAAU,WAIR,OAHIzB,IACF0B,SAASG,KAAKC,MAAMC,SAAW,UAE1B,WACLL,SAASG,KAAKC,MAAMC,SAAW,WAEhC,CAAC/B,IAeJ,OACE,mCACIA,EAEE,qCACE,cAAC,IAAD,CAAKgC,SAAS,QAAQC,OAAO,OAAOC,WAAW,WAAWC,QAAQ,MAAML,MAAO,CAAEM,OAAQ,QAASC,MAAO,WACzG,cAAC,IAAD,UACE,eAAC,IAAD,CAAKL,SAAS,QAAQM,QAAQ,OAAOC,WAAW,aAAaC,eAAe,SAASP,OAAO,OAAOH,MAAO,CAAEM,OAAQ,QAASC,MAAO,SAApI,UACE,cAAC,IAAD,CAAWI,GAAIzC,EAAf,SACE,cAAC,IAAD,CAAK0C,UAAU,WAAf,SACE,eAAC,IAAD,CAAYC,GAAG,KAAf,UACE,cAAC,IAAD,CACEV,OAAO,UACPW,cAAc,OAEdC,SAAU,cAAC,IAAD,CAAYZ,OAAO,UAAUnB,MAAOA,MAEhD,cAAC,IAAD,CAAOgC,GAAG,cAAcC,IAAKhC,EAAYe,MAAO,CAAEG,OAAQ,QAAUe,YAAY,gBAAgBC,iBAAkBtC,EAAuBuC,UA9BxH,SAAChC,GAClB,UAAdA,EAAMC,MACRb,GAAsB,GACtBC,EAASE,GACTJ,EAAQ8C,KAAK,cACbhD,MAyBkM+B,WAAYrB,EAAIC,MAAOA,EAAOsC,EAAG,CAAC,KAAM,KAAM,MAAOC,QAAQ,KAAKC,SArBlP,SAACpC,GACrBR,EAAQQ,EAAMqC,OAAOC,iBAwBT,cAAC,IAAD,CAAKxB,SAAS,QAAQF,MAAO,CAAEM,OAAQ,QAASC,MAAO,SAAWH,WAAW,cAAcuB,QAAStD,YAK1G","file":"static/js/8.a1e4d126.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n  Box,\n  Input,\n  useColorModeValue,\n  ScaleFade,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { connect } from 'react-redux';\nimport { onToggleSearchBar, onCloseSearchBar } from '../../redux/words/words.action';\n\nconst PopUpSearchBar = ({\n  history, HandleBackButtonClick,\n  getWords, isOpenSearchBar, onToggleSearchBar, onCloseSearchBar,\n}) => {\n  const [Word, setWord] = useState('');\n  const focusBorderColorInput = useColorModeValue('#3B82F6', '#ffa500');\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const InputField = useRef(null);\n\n  const HandleKeyDownOpenSearchBar = (event) => {\n    if (event.key === 'E' && event.ctrlKey && event.shiftKey) {\n      event.preventDefault();\n      onToggleSearchBar();\n      if (InputField?.current) {\n        InputField.current.focus();\n      }\n    }\n    if (event.key === 'Escape') {\n      event.preventDefault();\n      onCloseSearchBar();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownOpenSearchBar);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownOpenSearchBar);\n    };\n  }, [isOpenSearchBar]);\n\n  useEffect(() => {\n    if (isOpenSearchBar) {\n      document.body.style.overflow = 'hidden';\n    }\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpenSearchBar]);\n\n  const HandleEnterKeyPopUpSearchBar = (event) => {\n    if (event.key === 'Enter') {\n      HandleBackButtonClick(false);\n      getWords(Word);\n      history.push('/thesaurus');\n      onCloseSearchBar();\n    }\n  };\n\n  const getInputValue = (event) => {\n    setWord(event.target.value);\n  };\n\n  return (\n    <>\n      {(isOpenSearchBar)\n        ? (\n          <>\n            <Box position=\"fixed\" zIndex=\"9999\" background=\"gray.800\" opacity=\"0.6\" style={{ height: '100vh', width: '100vw' }} />\n            <Box>\n              <Box position=\"fixed\" display=\"flex\" alignItems=\"flex-start\" justifyContent=\"center\" zIndex=\"9999\" style={{ height: '100vh', width: '100vw' }}>\n                <ScaleFade in={isOpenSearchBar}>\n                  <Box className=\"relative\">\n                    <InputGroup mt=\"32\">\n                      <InputLeftElement\n                        zIndex=\"9999999\"\n                        pointerEvents=\"none\"\n                        // eslint-disable-next-line react/no-children-prop\n                        children={<SearchIcon zIndex=\"9999999\" color={color} />}\n                      />\n                      <Input id=\"InputField2\" ref={InputField} style={{ zIndex: 999999 }} placeholder=\"Search a word\" focusBorderColor={focusBorderColorInput} onKeyDown={HandleEnterKeyPopUpSearchBar} background={bg} color={color} w={['xs', 'xs', null]} rounded=\"xl\" onChange={getInputValue} />\n                    </InputGroup>\n                  </Box>\n                </ScaleFade>\n                <Box position=\"fixed\" style={{ height: '100vh', width: '100vw' }} background=\"transparent\" onClick={onCloseSearchBar} />\n              </Box>\n            </Box>\n          </>\n        )\n        : <></>}\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  WordArray: words.WordArray,\n  NounArray: words.NounArray,\n  VerbArray: words.VerbArray,\n  AdjArray: words.AdjArray,\n  PhraseArray: words.PhraseArray,\n  AdverbArray: words.AdverbArray,\n  AvailableWordType: words.AvailableWordType,\n  isOpenSearchBar: words.isOpenSearchBar,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onToggleSearchBar: () => dispatch(onToggleSearchBar()),\n  onCloseSearchBar: () => dispatch(onCloseSearchBar()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(PopUpSearchBar));\n"],"sourceRoot":""}