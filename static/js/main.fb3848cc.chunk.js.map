{"version":3,"sources":["services/getRequest.js","components/search-input/search-input.component.jsx","pages/SearchPage/SearchPage.jsx","routes/routes.jsx","components/help-button/help-button.component.jsx","components/theme-button/theme-button.component.jsx","components/header/header.component.jsx","components/spinner/spinner.component.jsx","containers/App.jsx","redux/words/words.reducer.js","redux/store.js","theme.js","index.jsx","redux/words/words.action.js","redux/words/words.types.js","components/error-boundary/error-boundary.component.jsx"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","connect","words","Word","AvailableWordType","dispatch","setWord","withRouter","getWords","history","focusBorderColorInput","useColorModeValue","useState","WordValueSP","setWordSP","inputField","useRef","HandleFocusOnInputEnterCtrlShift","event","key","ctrlKey","preventDefault","current","focus","useEffect","document","addEventListener","removeEventListener","ref","focusBorderColor","onKeyPress","which","push","variant","w","rounded","mr","value","onBlur","length","onChange","target","paddingY","placeholder","paddingLeft","MainContainer","tw","div","WordFindType","WordFind","isOpen","HandleSearchButtonClick","useMediaQuery","isMoreThan420px","fontColorDarkWhiteSmallWords","hover","color","fontColorMain","focusBorderColorGeneral","boxShadow","display","alignContent","justifyContent","mt","mb","fontFamily","fontSize","whiteSpace","placement","textDecoration","_hover","cursor","outline","outlineColor","style","outlineStyle","_focus","ml","size","icon","Info","h","background","fontWeight","sm","md","position","Search","left","top","in","transition","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","height","width","xmlns","d","span","bgColor","as","ReachLink","onClick","to","borderRadius","Routes","Thesaurus","props","location","useLocation","exact","path","TransitionFade","Help","KeyboardShortCutsColor","m","Question","className","ThemeButton","useColorMode","colorMode","toggleColorMode","ThemeButtonRef","HandleKeyDownThemeIcon","click","Moon","SearchButtonHeader","lazy","InputFiledSearchBarPopUp","WordsLoaded","zIndex","pathname","fallback","LoadingSpinner","marginTop","thickness","speed","emptyColor","PopUpSearchBar","ThesaurusPage","WordArray","NounArray","VerbArray","AdjArray","PhraseArray","AdverbArray","setWordArray","setNounArray","setVerbArray","setAdjArray","setPhraseArray","setAdverbArray","setAvailableWordType","resetAvailableWordType","Error","setError","PathName","useDisclosure","onOpen","setWordFind","setWordFindType","setWordsLoaded","IsInitialDone","setInitialDone","wordObjects","noun","filteredArray","filter","fl","verb","adjective","phrase","adverb","setFilterArray","Object","keys","PassRequstedWords","hwi","forEach","arr","type","error","console","log","PartOfSpeechChecker","then","data","HandleBackButtonClick","isSetword","ThesaurusComponent","Link","INITIAL_STATE","ReturnedWord","ShortDef","PartOfSpeech","WordExample","Syns","Ants","isOpenSearchBar","isCloseSearchBar","wordsReducer","state","action","wordsTypes","ON_OPEN_SEARCHBAR","ON_CLOSE_SEARCHBAR","ON_TOGGLE_SEARCHBAR","SET_NOUN_ARRAY","payload","SET_AVAILABLE_WORD_TYPES","values","RESET_AVAILABLE_WORD_TYPES","SET_ADVERB_ARRAY","SET_PHRASE_ARRAY","SET_VERB_ARRAY","SET_ADJ_ARRAY","SET_WORD","SET_RETURNED_WORD","SET_SHORTDEF","SET_PART_OF_SPEECH","SET_WORD_EXAMPLE","SET_SYNS","SET_ANTS","SET_WORD_ARRAY","configureStore","reducer","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","store","StrictMode","basename","getElementById","onOpenSearchBar","onToggleSearchBar","onCloseSearchBar","ErrorBoundary","hasError","info","this","children","href","React","Component"],"mappings":"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","file":"static/js/main.fb3848cc.chunk.js","sourcesContent":["/* eslint-disable no-console */\nconst getRequest = async (word) => {\n  try {\n    const request = await fetch('https://flary-server.herokuapp.com/thesaurus', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        word,\n      }),\n    });\n    return request.json();\n  } catch (error) {\n    // console.log(error);\n    return false;\n  }\n};\n\nexport default getRequest;\n","/* eslint-disable react/prop-types */\nimport { Input, useColorModeValue } from '@chakra-ui/react';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setWord } from '../../redux/words/words.action';\n\nconst SearchInput = ({\n  // eslint-disable-next-line no-shadow\n  setWord, getWords, history,\n}) => {\n  const focusBorderColorInput = useColorModeValue('#3B82F6',\n    '#ffa500');\n  const [WordValueSP, setWordSP] = useState('');\n  const inputField = useRef(null);\n\n  const HandleFocusOnInputEnterCtrlShift = (event) => {\n    if (event.key === 'A' && event.ctrlKey) {\n      event.preventDefault();\n      inputField.current.focus();\n    }\n  };\n\n  const onBlur = () => {\n    if (WordValueSP.length) {\n      setWord(WordValueSP);\n    }\n  };\n\n  const HandleEnterKey = (event) => {\n    if (event.which === 13) {\n      setWord(WordValueSP);\n      getWords(WordValueSP);\n      history.push('/thesaurus');\n    }\n  };\n\n  const onInputChange = (event) => {\n    setWordSP(event.target.value);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    return () => {\n      document.removeEventListener('keydown', HandleFocusOnInputEnterCtrlShift);\n    };\n  });\n\n  return (\n    <Input ref={inputField} focusBorderColor={focusBorderColorInput} onKeyPress={HandleEnterKey} variant=\"filled\" w={['18rem', 'xs', null]} rounded=\"xl\" mr={[null, null, '2rem']} value={WordValueSP} onBlur={onBlur} onChange={onInputChange} paddingY=\"5\" placeholder=\"Search for words\" paddingLeft=\"9\" />\n  );\n};\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  AvailableWordType: words.AvailableWordType,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setWord: (word) => dispatch(setWord(word)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SearchInput));\n","/* eslint-disable max-len */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-nested-ternary */\nimport tw from 'tailwind-styled-components';\nimport { withRouter, Link as ReachLink } from 'react-router-dom';\nimport React from 'react';\nimport {\n  Heading,\n  Box,\n  chakra,\n  Fade,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  useMediaQuery,\n  Button,\n} from '@chakra-ui/react';\nimport { InfoIcon, SearchIcon } from '@chakra-ui/icons';\nimport { connect } from 'react-redux';\nimport SearchInput from '../../components/search-input/search-input.component';\n\nconst MainContainer = tw.div`\n   text-center\n   mt-24\n   md2:mt-38\n   lg:mt-32\n`;\n\nconst SearchPage = ({\n  WordFindType, WordFind, isOpen, HandleSearchButtonClick, getWords,\n}) => {\n  const [isMoreThan420px] = useMediaQuery('(max-width: 420px)');\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange');\n  const hover = useColorModeValue({ color: '#3B82F6' }, { color: 'orange' });\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n\n  return (\n    <MainContainer>\n      <Box display=\"flex\" alignContent=\"center\" justifyContent=\"center\" mt={['12', null, '15', '0', '32']} mb={['5', null, '12']}>\n        <Heading fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">\n          Words to be\n          {(isMoreThan420px) ? '\\u00A0' : ' thesaurused'}\n        </Heading>\n        <Popover placement=\"auto-end\" display=\"inline-block\">\n          <PopoverTrigger>\n            {(isMoreThan420px)\n              ? <Heading textDecoration={`underline wavy ${fontColorDarkWhiteSmallWords}`} _hover={[null, null, hover]} cursor=\"pointer\" fontFamily=\"Playfair Display\" fontSize={['3xl', '5xl', '6xl']} whiteSpace=\"nowrap\">thesaurused</Heading>\n              : <IconButton variant=\"ghost\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} ml=\"2\" size=\"sm\" icon={<InfoIcon w=\"5\" h=\"5\" />} />}\n          </PopoverTrigger>\n          <PopoverContent outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Thesaurus</PopoverHeader>\n            <PopoverBody>\n              A thesaurus (plural thesauri or thesauruses) or synonym dictionary\n              is a reference work for finding synonyms and sometimes antonyms of words.\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      </Box>\n      <Box display={{ sm: 'flex', md: 'flex' }} justifyContent={[null, 'center', null]}>\n        <Box>\n          <Box justifyContent=\"center\" display=\"flex\" w={['100%', 'xs', null]}>\n            <Box w={['18rem', 'xs', null]} position=\"relative\">\n              <SearchInput getWords={getWords} />\n              <SearchIcon color=\"gray.300\" position=\"absolute\" left=\"3\" top=\"3.5\" />\n            </Box>\n          </Box>\n          {WordFind\n                && (\n                <Fade in={isOpen}>\n                  <Box mt=\"1\" display=\"flex\" justifyContent={['center', 'flex-start', null]} transition=\"ease\">\n                    <chakra.svg mt=\"1\" ml={[null, '4', null]} outline=\"none\" stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\" />\n                    </chakra.svg>\n                    <chakra.span ml=\"1\" mb={['-1', 0, 0]} color=\"red.400\">\n                      {(WordFindType === 'no response' ? 'Word not found! (Misspelled)' : ((WordFindType === 'no input') ? 'Input is empty, type a word!' : 'The word is not in the thesaurus!'))}\n                    </chakra.span>\n                  </Box>\n                </Fade>\n                )}\n        </Box>\n\n        {\n          !isMoreThan420px && (\n            <Box ml={[0, 6, null]} mt={[5, 1, 0]}>\n              <Button\n                _hover={{ background: 'gray.200' }}\n                _focus={focusBorderColorGeneral}\n                color=\"gray.800\"\n                bgColor=\"gray.100\"\n                as={ReachLink}\n                onClick={HandleSearchButtonClick}\n                to=\"/thesaurus\"\n                borderRadius=\"xl\"\n              >\n                Search\n              </Button>\n            </Box>\n          )\n        }\n      </Box>\n    </MainContainer>\n  );\n};\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n});\n\nexport default connect(mapStateToProps, null)(withRouter(SearchPage));\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\nimport React from 'react';\nimport { Presets } from 'react-component-transition';\nimport SearchPage from '../pages/SearchPage/SearchPage';\n\nfunction Routes({ Thesaurus, ...props }) {\n  const location = useLocation();\n  return (\n    <Switch key={location.key} location={location}>\n      <Route exact path=\"/\">\n        <SearchPage {...props} />\n      </Route>\n      <Route exact path=\"/thesaurus\">\n        <Presets.TransitionFade>\n          {Thesaurus()}\n        </Presets.TransitionFade>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  useColorModeValue,\n  IconButton,\n  Button,\n  chakra,\n} from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nconst Help = () => {\n  const fontColorMain = useColorModeValue('#edf2f7', 'gray.800');\n  const focusBorderColorGeneral = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const KeyboardShortCutsColor = useColorModeValue('gray.600', 'gray.400');\n\n  return (\n    <Popover placement=\"auto\">\n      <PopoverTrigger>\n        <Button\n          _focus={focusBorderColorInput}\n          focusBorderColor={focusBorderColorInput}\n          boxShadow=\"lg\"\n          outline=\"none\"\n          outlineColor=\"initial\"\n          style={{ outlineStyle: 'none' }}\n          m=\"4\"\n          mr={[null, '40', null]}\n          rounded=\"xl\"\n        >\n          <QuestionIcon />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent width=\"max-content\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} _focus={focusBorderColorGeneral} background={fontColorMain}>\n        <PopoverArrow />\n        <PopoverCloseButton />\n        <PopoverHeader fontFamily=\"Playfair Display\" fontSize={['xl']} fontWeight=\"bold\">Keyboard Shortcuts</PopoverHeader>\n        <PopoverBody className=\"whitespace-pre-wrap text-left\">\n          <strong>Global</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Switch theme:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + X</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Home Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Focus on input field:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + A</chakra.span>\n            {' '}\n            {'\\n'}\n          </chakra.span>\n          <hr />\n          <strong>Thesaurus Page</strong>\n          {' '}\n          {'\\n'}\n          <chakra.span>\n            Go to Home Page:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + Q</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          <chakra.span>\n            Search bar:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Ctrl + Shift + E</chakra.span>\n          </chakra.span>\n          {'\\n'}\n          {/* <chakra.span>\n            Switch word type:\n            {' '}\n            <chakra.span color={KeyboardShortCutsColor}>Shift + 1 or 2 or 3</chakra.span>\n          </chakra.span> */}\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default Help;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  chakra, Button, useColorMode, useColorModeValue,\n} from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons';\n\nconst ThemeButton = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const focusBorderColorInput = useColorModeValue({ boxShadow: '0 0 0 3px #3B82F6' }, { boxShadow: '0 0 0 3px orange' });\n  const ThemeButtonRef = useRef(null);\n  const HandleKeyDownThemeIcon = (event) => {\n    if (event.key === 'X' && event.ctrlKey) {\n      event.preventDefault();\n      ThemeButtonRef.current.click();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', HandleKeyDownThemeIcon);\n    return () => {\n      document.removeEventListener('keydown', HandleKeyDownThemeIcon);\n    };\n  }, []);\n\n  return (\n    <Button ref={ThemeButtonRef} _focus={focusBorderColorInput} focusBorderColor={focusBorderColorInput} boxShadow=\"lg\" outline=\"none\" outlineColor=\"initial\" style={{ outlineStyle: 'none' }} m=\"4\" mr=\"-1\" rounded=\"xl\" onClick={toggleColorMode}>\n      {colorMode === 'light'\n        ? <MoonIcon />\n        : (\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\" />\n          </chakra.svg>\n        )}\n    </Button>\n  );\n};\n\nexport default ThemeButton;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport { Box } from '@chakra-ui/react';\nimport React, { Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Presets } from 'react-component-transition';\nimport Help from '../help-button/help-button.component';\nimport ThemeButton from '../theme-button/theme-button.component';\n// const PopUpSearchBar = lazy(() => import('../popup-search-bar/popup-search-bar.component'));\n// import SearchButtonHeader from '../search-button/search-button.component';\n// import ErrorBoundary from '../error-boundary/error-boundary.component';\nconst SearchButtonHeader = lazy(() => import('../search-button/search-button.component'));\n\nconst Header = ({\n  InputFiledSearchBarPopUp,\n  location,\n  WordsLoaded,\n}) => (\n  <Box\n    zIndex=\"9991\"\n    position=\"sticky\"\n    top=\"0\"\n    h=\"70px\"\n    display=\"flex\"\n    justifyContent=\"flex-end\"\n  >\n    {(location.pathname === '/thesaurus' && WordsLoaded)\n      ? (\n        <>\n          <Presets.TransitionFade>\n            <Suspense fallback={null}>\n              <SearchButtonHeader\n                WordsLoaded={WordsLoaded}\n                InputFiledSearchBarPopUp={InputFiledSearchBarPopUp}\n              />\n            </Suspense>\n          </Presets.TransitionFade>\n        </>\n      )\n      : <></>}\n    <ThemeButton />\n    <Help />\n  </Box>\n);\n\nexport default withRouter(Header);\n","import { Box, Spinner, useColorModeValue } from '@chakra-ui/react';\nimport React from 'react';\n\nconst LoadingSpinner = () => {\n  const color = useColorModeValue('blue.500', 'orange');\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20\">\n      <Spinner\n        thickness=\"4px\"\n        speed=\"0.65s\"\n        emptyColor=\"gray.200\"\n        color={color}\n        size=\"xl\"\n      />\n    </Box>\n  );\n};\n\nexport default LoadingSpinner;\n","/* eslint-disable no-shadow */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-labels */\n/* eslint-disable no-restricted-syntax */\n\n// TODO add react-swipeable\n\nimport { connect } from 'react-redux';\nimport './App.css';\nimport {\n  Link,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport {\n  useState,\n  useEffect,\n  React,\n  lazy,\n  Suspense,\n} from 'react';\nimport {\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Presets,\n} from 'react-component-transition';\nimport getRequest from '../services/getRequest';\nimport Routes from '../routes/routes';\nimport Header from '../components/header/header.component';\nimport {\n  setWord,\n  setWordArray,\n  setNounArray,\n  setAdjArray,\n  setVerbArray,\n  setPhraseArray,\n  setAdverbArray,\n  setAvailableWordType,\n  resetAvailableWordType,\n} from '../redux/words/words.action';\nimport ErrorBoundary from '../components/error-boundary/error-boundary.component';\nimport LoadingSpinner from '../components/spinner/spinner.component';\n\nconst PopUpSearchBar = lazy(() => import('../components/popup-search-bar/popup-search-bar.component'));\nconst ThesaurusPage = lazy(() => import('../pages/ThesaurusPage/ThesaurusPage'));\n\nconst App = (props) => {\n  const {\n    location,\n    Word,\n    setWord,\n    setWordArray,\n    setNounArray,\n    WordArray,\n    setVerbArray,\n    setAdjArray,\n    setPhraseArray,\n    setAdverbArray,\n    AvailableWordType,\n    setAvailableWordType,\n    resetAvailableWordType,\n  } = props;\n  const [Error, setError] = useState(false);\n  const PathName = location.pathname;\n  const {\n    isOpen,\n    onOpen,\n  } = useDisclosure();\n  const [WordFind, setWordFind] = useState(false);\n  const [WordFindType, setWordFindType] = useState('');\n  const [WordsLoaded, setWordsLoaded] = useState(false);\n  const [IsInitialDone, setInitialDone] = useState(false);\n\n  // TODO Fix Repeated setState calls\n  const setFilterArray = (wordObjects) => {\n    if (AvailableWordType.noun) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'noun');\n      setNounArray(filteredArray[0]);\n    }\n    if (AvailableWordType.verb) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'verb');\n      setVerbArray(filteredArray[0]);\n    }\n    if (AvailableWordType.adjective) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'adjective');\n      setAdjArray(filteredArray[0]);\n    }\n    if (AvailableWordType.phrase) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'phrase');\n      setPhraseArray(filteredArray[0]);\n    }\n    if (AvailableWordType.adverb) {\n      const filteredArray = wordObjects.filter((word) => word.fl === 'adverb');\n      setAdverbArray(filteredArray[0]);\n    }\n  };\n\n  useEffect(() => {\n    if (IsInitialDone) {\n      setFilterArray(WordArray);\n    }\n  }, [Object.keys(AvailableWordType)]);\n\n  const PartOfSpeechChecker = (wordObjects) => {\n    try {\n      wordObjects.forEach((arr) => {\n        switch (arr.fl) {\n          case 'noun':\n            setAvailableWordType({ type: 'noun', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'verb':\n            setAvailableWordType({ type: 'verb', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'adjective':\n            setAvailableWordType({ type: 'adjective', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'phrase':\n            setAvailableWordType({ type: 'phrase', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          case 'adverb':\n            setAvailableWordType({ type: 'adverb', value: true });\n            setInitialDone(true);\n            setWordsLoaded(true);\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const PassRequstedWords = (wordObjects) => {\n    try {\n      if (wordObjects[0].hwi) {\n        setWordArray(wordObjects);\n        // InitialWord(wordObjects);\n        PartOfSpeechChecker(wordObjects);\n      } else {\n        setError(true);\n        setWordFind(true);\n        setWordFindType('no response');\n        onOpen();\n      }\n    } catch (error) {\n      console.log(error);\n      setError(true);\n      setWordFind(true);\n      onOpen();\n    }\n  };\n\n  const getWords = (word = Word) => {\n    if (word === '') {\n      setWordFind(true);\n      setWordFindType('no input');\n      onOpen();\n    } else {\n      getRequest(word)\n        .then((data) => PassRequstedWords(data));\n      setWordFind(false);\n      setWordFindType('');\n    }\n  };\n\n  const HandleSearchButtonClick = () => {\n    getWords();\n  };\n\n  const HandleBackButtonClick = (isSetword) => {\n    if (isSetword) {\n      setWord('');\n    }\n    setWordsLoaded(false);\n    resetAvailableWordType();\n    setNounArray([]);\n    setVerbArray([]);\n    setAdjArray([]);\n    setPhraseArray([]);\n    setAdverbArray([]);\n    setWordArray([]);\n  };\n\n  // Sets AvailableWordType to an empty object\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && Object.keys(AvailableWordType).length !== 0) {\n      setAvailableWordType([]);\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  const ThesaurusStore = () => (\n    <Suspense fallback={<LoadingSpinner />}>\n      <ThesaurusPage\n        getWords={getWords}\n        AvailableWordType={AvailableWordType}\n        WordsLoaded={WordsLoaded}\n        Link={Link}\n        HandleBackButtonClick={HandleBackButtonClick}\n      />\n    </Suspense>\n  );\n\n  const Thesaurus = () => {\n    let ThesaurusComponent;\n    if (Word.length) {\n      if (Error) {\n        ThesaurusComponent = <Redirect to=\"/\" />;\n      } else {\n        ThesaurusComponent = (\n          <Presets.TransitionFade>\n            {ThesaurusStore()}\n          </Presets.TransitionFade>\n        );\n      }\n    } else {\n      ThesaurusComponent = <Redirect to=\"/\" />;\n    }\n\n    useEffect(() => {\n      if (Error) {\n        setWord('');\n        setError(false);\n      }\n    }, [Error]);\n    return ThesaurusComponent;\n  };\n\n  // Clear all stored states if the pathName is not thesaurus\n  useEffect(() => {\n    if (PathName !== '/thesaurus' && WordArray?.[0]?.fl?.length) {\n      HandleBackButtonClick();\n    }\n  }, [PathName]);\n\n  return (\n    <>\n      {(PathName === '/thesaurus' && WordsLoaded)\n        ? (\n          <ErrorBoundary>\n            <Suspense fallback={null}>\n              <PopUpSearchBar\n                HandleBackButtonClick={HandleBackButtonClick}\n                getWords={getWords}\n                setWordsLoaded={setWordsLoaded}\n              />\n            </Suspense>\n          </ErrorBoundary>\n        )\n        : null}\n      <Header\n        PathName={PathName}\n        WordsLoaded={WordsLoaded}\n      />\n      <Routes\n        getWords={getWords}\n        Thesaurus={Thesaurus}\n        WordFindType={WordFindType}\n        WordFind={WordFind}\n        isOpen={isOpen}\n        HandleSearchButtonClick={HandleSearchButtonClick}\n        Link={Link}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = ({ words }) => ({\n  Word: words.Word,\n  WordArray: words.WordArray,\n  NounArray: words.NounArray,\n  VerbArray: words.VerbArray,\n  AdjArray: words.AdjArray,\n  PhraseArray: words.PhraseArray,\n  AdverbArray: words.AdverbArray,\n  AvailableWordType: words.AvailableWordType,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setWord: (word) => dispatch(setWord(word)),\n  setWordArray: (word) => dispatch(setWordArray(word)),\n  setNounArray: (word) => dispatch(setNounArray(word)),\n  setVerbArray: (word) => dispatch(setVerbArray(word)),\n  setAdjArray: (word) => dispatch(setAdjArray(word)),\n  setPhraseArray: (word) => dispatch(setPhraseArray(word)),\n  setAdverbArray: (word) => dispatch(setAdverbArray(word)),\n  setAvailableWordType: (word) => dispatch(setAvailableWordType(word)),\n  resetAvailableWordType: () => dispatch(resetAvailableWordType()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(App));\n","import { wordsTypes } from './words.types';\n\nconst INITIAL_STATE = {\n  Word: '',\n  ReturnedWord: '',\n  ShortDef: '',\n  PartOfSpeech: '',\n  WordExample: '',\n  Syns: [],\n  Ants: [],\n  WordArray: [],\n  NounArray: [],\n  VerbArray: [],\n  AdjArray: [],\n  PhraseArray: [],\n  AdverbArray: [],\n  AvailableWordType: [],\n  isOpenSearchBar: false,\n  isCloseSearchBar: true,\n};\n\nconst wordsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case wordsTypes.ON_OPEN_SEARCHBAR:\n      return {\n        ...state,\n        isOpenSearchBar: true,\n        isCloseSearchBar: false,\n      };\n\n    case wordsTypes.ON_CLOSE_SEARCHBAR:\n      return {\n        ...state,\n        isOpenSearchBar: false,\n        isCloseSearchBar: true,\n      };\n\n    case wordsTypes.ON_TOGGLE_SEARCHBAR:\n      return {\n        ...state,\n        isOpenSearchBar: !state.isOpenSearchBar,\n        isCloseSearchBar: !state.isCloseSearchBar,\n      };\n\n    case wordsTypes.SET_NOUN_ARRAY:\n      return {\n        ...state,\n        NounArray: action.payload,\n      };\n    case wordsTypes.SET_AVAILABLE_WORD_TYPES:\n      return {\n        ...state,\n        AvailableWordType: {\n          ...state.AvailableWordType,\n          [Object.keys(action.payload)[0]]: [Object.values(action.payload)[0]],\n        },\n      };\n    case wordsTypes.RESET_AVAILABLE_WORD_TYPES:\n      return {\n        ...state,\n        AvailableWordType: [],\n      };\n    case wordsTypes.SET_ADVERB_ARRAY:\n      return {\n        ...state,\n        AdverbArray: action.payload,\n      };\n    case wordsTypes.SET_PHRASE_ARRAY:\n      return {\n        ...state,\n        PhraseArray: action.payload,\n      };\n    case wordsTypes.SET_VERB_ARRAY:\n      return {\n        ...state,\n        VerbArray: action.payload,\n      };\n    case wordsTypes.SET_ADJ_ARRAY:\n      return {\n        ...state,\n        AdjArray: action.payload,\n      };\n    case wordsTypes.SET_WORD:\n      return {\n        ...state,\n        Word: action.payload,\n      };\n    case wordsTypes.SET_RETURNED_WORD:\n      return {\n        ...state,\n        ReturnedWord: action.payload,\n      };\n    case wordsTypes.SET_SHORTDEF:\n      return {\n        ...state,\n        ShortDef: action.payload,\n      };\n    case wordsTypes.SET_PART_OF_SPEECH:\n      return {\n        ...state,\n        PartOfSpeech: action.payload,\n      };\n    case wordsTypes.SET_WORD_EXAMPLE:\n      return {\n        ...state,\n        WordExample: action.payload,\n      };\n    case wordsTypes.SET_SYNS:\n      return {\n        ...state,\n        Syns: action.payload,\n      };\n    case wordsTypes.SET_ANTS:\n      return {\n        ...state,\n        Ants: action.payload,\n      };\n    case wordsTypes.SET_WORD_ARRAY:\n      return {\n        ...state,\n        WordArray: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default wordsReducer;\n","/* eslint-disable no-unused-vars */\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport wordsReducer from './words/words.reducer';\n\nexport default configureStore({\n  reducer: {\n    words: wordsReducer,\n  },\n  // devTools: false,\n  // middleware: [logger],\n});\n","import { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport store from './redux/store';\nimport theme from './theme';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ChakraProvider>\n        <Router basename=\"/flary\">\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <App />\n        </Router>\n      </ChakraProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n","/* eslint-disable import/prefer-default-export */\nimport { wordsTypes } from './words.types';\n\nexport const setAvailableWordType = (word) => ({\n  type: wordsTypes.SET_AVAILABLE_WORD_TYPES,\n  payload: {\n    [word.type]: word.value,\n  },\n});\n\nexport const resetAvailableWordType = () => ({\n  type: wordsTypes.RESET_AVAILABLE_WORD_TYPES,\n});\n\nexport const onOpenSearchBar = () => ({\n  type: wordsTypes.ON_OPEN_SEARCHBAR,\n});\n\nexport const onToggleSearchBar = () => ({\n  type: wordsTypes.ON_TOGGLE_SEARCHBAR,\n});\n\nexport const onCloseSearchBar = () => ({\n  type: wordsTypes.ON_CLOSE_SEARCHBAR,\n});\n\nexport const setPhraseArray = (word) => ({\n  type: wordsTypes.SET_PHRASE_ARRAY,\n  payload: word,\n});\n\nexport const setAdverbArray = (word) => ({\n  type: wordsTypes.SET_ADVERB_ARRAY,\n  payload: word,\n});\n\nexport const setNounArray = (word) => ({\n  type: wordsTypes.SET_NOUN_ARRAY,\n  payload: word,\n});\n\nexport const setVerbArray = (word) => ({\n  type: wordsTypes.SET_VERB_ARRAY,\n  payload: word,\n});\n\nexport const setAdjArray = (word) => ({\n  type: wordsTypes.SET_ADJ_ARRAY,\n  payload: word,\n});\n\nexport const setWord = (word) => ({\n  type: wordsTypes.SET_WORD,\n  payload: word,\n});\n\nexport const setReturnedWord = (word) => ({\n  type: wordsTypes.SET_RETURNED_WORD,\n  payload: word,\n});\n\nexport const setShortDef = (word) => ({\n  type: wordsTypes.SET_SHORTDEF,\n  payload: word,\n});\n\nexport const setPartOfSpeech = (word) => ({\n  type: wordsTypes.SET_PART_OF_SPEECH,\n  payload: word,\n});\n\nexport const setWordExample = (word) => ({\n  type: wordsTypes.SET_WORD_EXAMPLE,\n  payload: word,\n});\n\nexport const setAnts = (word) => ({\n  type: wordsTypes.SET_ANTS,\n  payload: word,\n});\n\nexport const setSyns = (word) => ({\n  type: wordsTypes.SET_SYNS,\n  payload: word,\n});\n\nexport const setWordArray = (word) => ({\n  type: wordsTypes.SET_WORD_ARRAY,\n  payload: word,\n});\n","/* eslint-disable import/prefer-default-export */\nexport const wordsTypes = {\n  SET_PHRASE_ARRAY: 'SET_PHRASE_ARRAY',\n  SET_ADVERB_ARRAY: 'SET_ADVERB_ARRAY',\n  SET_WORD: 'SET_WORD',\n  SET_RETURNED_WORD: 'SET_RETURNED_WORD',\n  SET_SHORTDEF: 'SET_SHORTDEF',\n  SET_PART_OF_SPEECH: 'SET_PART_OF_SPEECH',\n  SET_WORD_EXAMPLE: 'SET_WORD_EXAMPLE',\n  SET_SYNS: 'SET_SYNS',\n  SET_ANTS: 'SET_ANTS',\n  SET_WORD_ARRAY: 'SET_WORD_ARRAY',\n  SET_NOUN_ARRAY: 'SET_NOUN_ARRAY',\n  SET_VERB_ARRAY: 'SET_VERB_ARRAY',\n  SET_ADJ_ARRAY: 'SET_ADJ_ARRAY',\n  SET_AVAILABLE_WORD_TYPES: 'SET_AVAILABLE_WORD_TYPES',\n  RESET_AVAILABLE_WORD_TYPES: 'RESET_AVAILABLE_WORD_TYPES',\n  ON_OPEN_SEARCHBAR: 'ON_OPEN_SEARCHBAR',\n  ON_TOGGLE_SEARCHBAR: 'ON_TOGGLE_SEARCHBAR',\n  ON_CLOSE_SEARCHBAR: 'ON_CLOSE_SEARCHBAR',\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  componentDidCatch(error, info) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n    if (hasError) {\n      return (\n        <div style={{ color: 'red', fontWeight: 'bold' }}>\n          ERROR: Something went wrong. Please sumbit an issue here\n          {' '}\n          <a href=\"https://github.com/flacial/flary/issues/new/choose\">Link</a>\n          {' '}\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n"],"sourceRoot":""}