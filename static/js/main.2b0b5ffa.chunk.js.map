{"version":3,"sources":["services/getRequest.js","components/ResponsePage/ThesaurusPage/ThesaurusPage.js","components/RequestPage/SearchPage/SearchPage.js","Routes/Routes.js","containers/App.js","components/NavBar/NavBar.js","index.js"],"names":["getRequest","word","a","fetch","method","headers","body","JSON","stringify","request","json","console","log","ThesaurusHeader","tw","h1","ChakraThesaurusHeader","chakra","WordTypeContainer","styled","div","ChakraWordTypeContainer","WordAndType","TheWord","ChakraTheWord","TheType","span","ChakraTheType","SynAntHeader","h2","ChakraSynAntHeader","SynAntContainer","Example","ChakraExample","Text","ChakraText","ThesaurusPage","Link","BackButtonClick","ReturnedWord","PartOfSpeech","ShortDef","ReactHtmlParser","WordExample","getPathName","WordsLoaded","Syns","Ants","location","useLocation","useEffect","pathname","LinkChak","bg","useColorModeValue","color","fontColorMain","fontColorHeaders","fontColorDarkWhiteSmallWords","fontColorSynAnt","hover","background","gradientbg","boxShadow","SkeletonStartColor","SkeletonEndColor","length","className","_hover","onClick","to","bgGradient","m","marginTop","TransitionFade","mb","mt","fontSize","fontFamily","fontStyle","w","ml","Synonyms","undefined","map","index","listStyleType","display","OrderSynonyms","Antonyms","OrderAntonyms","noOfLines","spacing","startColor","endColor","MainContainer","SearchPage","WordFindType","onEnterKeyPress","WordFind","isOpen","getInputValue","getButtonClick","useMediaQuery","isLargerThan400","useDisclosure","onOpen","onClose","alignContent","justifyContent","whiteSpace","placement","textDecoration","cursor","outline","size","icon","Question","h","fontWeight","sm","md","onKeyPress","variant","rounded","mr","onChange","placeholder","in","transition","svg","stroke","fill","strokeWidth","viewBox","aria-hidden","focusable","height","width","xmlns","d","Routes","ThesaurusPageComponent","props","exact","path","key","App","useState","Word","setWord","setReturnedWord","setShortDef","setPartOfSpeech","setWordExample","Error","setError","PathName","setPathName","setWordFind","setWordFindType","setWordsLoaded","setSyns","setAnts","history","useHistory","getWords","then","data","sendRequstedWord","hwi","fl","hw","shortdef","dt","def","sseq","syns","meta","ants","WordExampleSlicedIt","t","replace","error","RequestedThesaurus","Path","ThesaurusPageCondition","event","which","push","target","value","NavBar","useColorMode","colorMode","toggleColorMode","outlineColor","style","outlineStyle","theme","extendTheme","fonts","heading","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.2b0b5ffa.chunk.js","sourcesContent":["// export const getRequest = async (word) => {\n//     try {\n//         const request = await fetch('https://wordsapiprojectserver.herokuapp.com/thesaurus', {\n//             method: 'post',\n//             headers: {'Content-Type': 'application/json'},\n//             body: JSON.stringify({\n//                 word: word\n//             })\n//     })\n//     return request.json()\n//     }\n//     catch (error) {\n//         console.log(error)\n//     }\n// }\n\nexport const getRequest = async (word) => {\n    try {\n        const request = await fetch('https://wordsapiprojectserver.herokuapp.com/thesaurus', {\n            method: 'post',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                word: word\n            })\n    })\n    return request.json()\n    }\n    catch (error) {\n        console.log(error)\n    }\n}","import { Fragment, useEffect } from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled from 'styled-components'\nimport tw from 'tailwind-styled-components';\nimport { \n  chakra,\n  Box,\n  useColorModeValue,\n  Skeleton,\n  SkeletonTex,\n  Stack,\n  SkeletonText,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Heading,\n  ListItem,\n  UnorderedList\n               } from '@chakra-ui/react'\nimport { Presets, ComponentTransition, AnimationTypes } from 'react-component-transition';\n\nconst ThesaurusHeader = tw.h1`\n    italic\n    font-serif\n    text-3xl\n    font-bold\n    inline-block\n`\nconst ChakraThesaurusHeader = chakra(ThesaurusHeader)\n\nconst WordTypeContainer = styled.div`\nborder-radius: 29px;\ntext-align: left;\nwidth: auto;\nheight: auto;\npadding-left: 20px;\npadding-right: 20px;\npadding-top: 5px;\npadding-bottom: 5px;\nword-spacing: 0;\n`\n\nconst ChakraWordTypeContainer = chakra(WordTypeContainer)\n\nconst WordAndType = tw.div`\n    mt-5\n`\n\nconst TheWord = tw.h1`\n    text-5xl\n    font-serif\n    font-bold\n    inline-block\n`\n\nconst ChakraTheWord = chakra(TheWord)\n\n\nconst TheType = tw.span`\n    text-xl\n    font-bold\n    font-serif\n`\n\nconst ChakraTheType = chakra(TheType)\n\nconst SynAntHeader = tw.h2`\n    font-bold\n    text-2xl\n    mt-3\n`\n\nconst ChakraSynAntHeader = chakra(SynAntHeader)\n\nconst SynAntContainer = tw.div`\n    mt-2\n    relative pl-6\n`\n\nconst Example = tw.span`\n    text-xl\n    block\n`\n\nconst ChakraExample = chakra(Example)\n\nconst Text = tw.span`\n    text-gray-700\n    text-xl\n`\n\nconst ChakraText = chakra(Text)\n\nconst LinkCSS = `\npy-2\npx-4\nrounded-xl\nshadow-xl\ninline-block\nfocus:outline-none\nfocus:border\nfocus:ring-2 focus:ring-blue-500\ntransition duration-500 ease-in-out\nm-4\n`\n\nexport const ThesaurusPage = (\n    {\n        Link,\n        BackButtonClick,\n        ReturnedWord,\n        PartOfSpeech,\n        ShortDef,\n        ReactHtmlParser,\n        WordExample,\n        getPathName,\n        WordsLoaded,\n        Syns,\n        Ants\n}) => {\n\n  const OrderSynonyms = () => {\n    let Synonyms = []\n    if (Syns !== undefined) {\n       Synonyms = Syns.map((word, index) => {\n        if (Syns[index + 1] === undefined) {\n          return <ListItem listStyleType='none' display='inline-block' key={word}>{`${word}`}</ListItem>\n        } else {\n          return <ListItem listStyleType='none' display='inline-block' key={word}>{`${word},\\u00A0`}</ListItem>\n        }\n      })\n    }\n    return Synonyms\n  }\n\n  const OrderAntonyms = () => {\n    let Antonyms = []\n    if (Ants !== undefined) {\n      Antonyms = Ants.map((word, index) => {\n        if (Ants[index + 1] === undefined) {\n          return <ListItem listStyleType='none' display='inline-block' key={word}>{`${word}`}</ListItem>\n        } else {\n          return <ListItem listStyleType='none' display='inline-block' key={word}>{`${word},\\u00A0`}</ListItem>\n        }\n      })\n    }\n    return Antonyms\n  }\n    \n  const location = useLocation()\n  useEffect(() => {\n    getPathName(location.pathname)\n  })\n\n  const LinkChak = chakra(Link);\n  const bg = useColorModeValue('#edf2f7', 'rgba(255, 255, 255, 0.08)');\n  const color = useColorModeValue('#252d3d', '#edf2f7');\n  const fontColorMain = useColorModeValue('gray.700', '#edf2f7')\n  const fontColorHeaders = useColorModeValue('#2563EB', '#db8b02')\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange')\n  const fontColorSynAnt = useColorModeValue('#3B82F6', 'orange.300')\n  const hover = useColorModeValue({background: \"gray.200\"}, {background: \"gray.700\"});\n  const gradientbg = useColorModeValue('linear(to-l, gray.200, white)')\n  const boxShadow = useColorModeValue('2px 2px 12px #37413f, -10px -10px 0px #3B82F6', '2px 2px 12px #37413f, -10px -10px 0px orange')\n  const SkeletonStartColor = useColorModeValue('#3B82F6', 'orange.200')\n  const SkeletonEndColor = useColorModeValue('gray.700', 'orange.500')\n    return (\n            <Fragment>\n              {ReturnedWord.length \n              ?\n                <Box className='absolute top-0'>\n                  <LinkChak bg={bg} color={color} _hover={hover} onClick={BackButtonClick} className={LinkCSS} to='/'>\n                    Back to search\n                  </LinkChak>\n                </Box>\n              :\n                <></>\n              }\n              <ChakraWordTypeContainer boxShadow={boxShadow} bgGradient={gradientbg} m={['1em','3em',null]} marginTop={['3', null, null]} >\n                      <ChakraThesaurusHeader color={fontColorDarkWhiteSmallWords}>\n                        Thesaurus\n                      </ChakraThesaurusHeader>\n                  {(WordsLoaded) ? \n                    <Presets.TransitionFade>\n                      <WordAndType>\n                          <ChakraTheWord color={fontColorMain}>\n                              {ReturnedWord}\n                          </ChakraTheWord>\n                          <ChakraTheType color={fontColorDarkWhiteSmallWords}>\n                            {PartOfSpeech}\n                          </ChakraTheType>\n                      </WordAndType>\n                      <ChakraSynAntHeader color={fontColorHeaders} >\n                        Synonyms & Antonyms of <em>{ReturnedWord}</em>\n                      </ChakraSynAntHeader>\n                      <SynAntContainer>\n                        <chakra.span color={fontColorMain} className='font-bold text-xl absolute left-0 top-0'>1</chakra.span>\n                        <ChakraText color={fontColorMain} >\n                          {ShortDef} \n                        </ChakraText>\n                        <ChakraExample color={fontColorSynAnt}> <strong>//</strong> {ReactHtmlParser(WordExample)} \n                        </ChakraExample>\n                        <Heading mb='1' mt='4' fontSize='2xl' fontFamily='sans-serif' color={fontColorHeaders}>Synonyms for <chakra.span fontStyle='italic'>{ReturnedWord}</chakra.span></Heading>\n                        <Box w={['100%','70%', null]}>\n                        <UnorderedList fontFamily='sans' fontSize='lg' ml='0' color={fontColorSynAnt}>{OrderSynonyms()}</UnorderedList>\n                        </Box>\n                        {(Ants !== undefined) \n                        ?\n                        <div>\n                          <Heading mb='1' mt='4' fontSize='2xl' fontFamily='sans-serif' color={fontColorHeaders}>Antonyms for <chakra.span fontStyle='italic'>{ReturnedWord}</chakra.span></Heading>\n                          <Box w={['100%','70%', null]}>\n                            <UnorderedList fontFamily='sans' fontSize='lg' ml='0' color={fontColorSynAnt}>{OrderAntonyms()}</UnorderedList>\n                          </Box>\n                        </div>\n                        :\n                        <></>\n                          }\n                      </SynAntContainer>\n                    </Presets.TransitionFade>\n                    :\n                    <Presets.TransitionFade>\n                    <SkeletonText mt=\"4\" mb='3' noOfLines={11} spacing=\"4\" startColor={SkeletonStartColor} endColor={SkeletonEndColor}  />\n                    </Presets.TransitionFade>\n                  }\n\n              </ChakraWordTypeContainer>\n            </Fragment>\n    )\n}","import tw from 'tailwind-styled-components';\nimport { useLocation } from 'react-router-dom';\nimport { useEffect, useRef } from 'react'\nimport {\n  Heading, \n  Input, \n  Box,\n  chakra,\n  Fade,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverFooter,\n  PopoverArrow,\n  PopoverCloseButton,\n  useDisclosure,\n  useColorModeValue,\n  IconButton,\n  useMediaQuery\n} from \"@chakra-ui/react\"\nimport { QuestionIcon } from \"@chakra-ui/icons\"\nimport { ThesaurusPage } from '../../ResponsePage/ThesaurusPage/ThesaurusPage';\n\nconst MainContainer = tw.div`\n   text-center\n   mt-40\n   sm:mt-0\n   md2:mt-38\n   lg:mt-32\n`\n\nconst LinkCSS = `\nbg-gray-100\ntext-gray-800\npy-1\npx-3\nrounded-xl\nshadow-2xl\ninline-block\nmd:py-1\nmd:h-8\nmd:mt-1\nmd:px-4\nfocus:outline-none\nfocus:ring-2 focus:ring-blue-400\nhover:bg-gray-200\ntransition duration-200 ease-in-out\n`\n\nconst SearchPage = ({ WordFindType, onEnterKeyPress, WordFind, isOpen,\n   getInputValue, getButtonClick, Link, getPathName }) => {\n  const [ isLargerThan400 ] = useMediaQuery(\"(max-width: 400px)\")\n  const location = useLocation()\n  const LinkChak = chakra(Link)\n  const { isOpen: isLaunch, onOpen: onLunch, onClose: onExit } = useDisclosure()\n  const fontColorDarkWhiteSmallWords = useColorModeValue('#3B82F6', 'orange')\n  const hover = useColorModeValue({color: '#3B82F6'}, {color: 'orange'});\n  useEffect(() => {\n    getPathName(location.pathname)\n  })\n\n    return (\n        <MainContainer>\n        <Box display='flex' alignContent='center' justifyContent='center' mt={['12', null, '15', '0', '32']} mb={['5', null, '12']}>\n            <Heading fontFamily='Playfair Display' fontSize={['3xl', '5xl', '6xl']} whiteSpace='nowrap' >Words to be \n            {(isLargerThan400) ? '\\u00A0' : ' thesaurus'}\n            </Heading>\n            <Popover placement=\"top-end\" display='inline-block'>\n              <PopoverTrigger >\n              {(isLargerThan400) \n              ?\n              <Heading textDecoration={`underline wavy ${fontColorDarkWhiteSmallWords}`} _hover={[null, null, hover]} cursor='pointer' fontFamily='Playfair Display' fontSize={['3xl', '5xl', '6xl']} whiteSpace='nowrap' >thesaurused</Heading>\n              :\n              <IconButton ml='2' outline='none' size='sm' icon={<QuestionIcon w='5' h='5' />} />\n              }\n              </PopoverTrigger>\n              <PopoverContent >\n                <PopoverArrow />\n                <PopoverCloseButton />\n                <PopoverHeader fontFamily='Playfair Display' fontSize={['xl']} fontWeight='bold'>Thesaurus</PopoverHeader>\n                <PopoverBody>A thesaurus (plural thesauri or thesauruses) or synonym dictionary is a reference work for finding synonyms and sometimes antonyms of words. </PopoverBody>\n              </PopoverContent>\n            </Popover>\n        </Box>\n            <Box display={{ sm:'flex', md: \"flex\"}} justifyContent={[null, 'center', null]} >\n              <Box>\n                <Input onKeyPress={onEnterKeyPress} variant='filled' w={['16rem', 'xs', null]} rounded='xl' mr={[null, null, '2rem']} onChange={getInputValue} placeholder=\"Type your word\"/>\n                {WordFind\n                &&\n                <Fade in={isOpen} >\n                <Box mt='1' display='flex' justifyContent={['center','flex-start', null]} transition='ease'>\n                    <chakra.svg mt='1' ml={[null,'4', null]} outline='none' stroke=\"currentColor\" fill=\"red.400\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M256,0C115.2,0,0,115.2,0,256s115.2,256,256,256s256-115.2,256-256S396.8,0,256,0z M256,51.2    c28.16,0,48.64,23.04,46.08,51.2L281.6,307.2h-51.2l-20.48-204.8C207.36,74.24,227.84,51.2,256,51.2z M256,460.8    c-28.16,0-51.2-23.04-51.2-51.2c0-28.16,23.04-51.2,51.2-51.2s51.2,23.04,51.2,51.2C307.2,437.76,284.16,460.8,256,460.8z\">\n                    </path>\n                    </chakra.svg>\n                    <chakra.span ml='1' mb={['-1',0, 0]} color='red.400' >\n                    {(WordFindType === 'no response' ? 'Word not found! (Misspelled)' : ((WordFindType === 'no input') ? 'Input is empty, type a word!' : 'The word is not in the thesaurus!' ))}\n                    </chakra.span>\n                  </Box>\n                </Fade>} \n              </Box>\n              <Box ml={[0, 5, 0]} mt={[5, 1, 0]} >\n                <LinkChak onClick={getButtonClick} className={LinkCSS}\n                    to='/thesaurus'>\n                  Search\n                </LinkChak>\n              </Box>\n            </Box>\n        </MainContainer>\n    )\n}\n\nexport default SearchPage;\n","import {\n    Switch,\n    Route,\n    useLocation\n} from 'react-router-dom'\nimport SearchPage from '../components/RequestPage/SearchPage/SearchPage';\nimport { Presets } from 'react-component-transition';\n\nfunction Routes({ ThesaurusPageComponent, ...props }) {\n  const location = useLocation();\n    return (\n        <Switch key={location.key} location={location} >\n          <Route exact path='/'>\n            <SearchPage {...props} />\n          </Route>\n          <Route exact path='/thesaurus'>\n            <Presets.TransitionFade>\n              {ThesaurusPageComponent()}\n            </Presets.TransitionFade>\n          </Route>\n        </Switch>\n    )\n}\n\nexport default Routes\n","import './App.css';\nimport {\n  Link, \n  Redirect,\n  useHistory\n} from 'react-router-dom'\nimport ReactHtmlParser from 'react-html-parser';\nimport { useState, useEffect } from 'react';\nimport { getRequest } from '../services/getRequest';\nimport { ThesaurusPage } from '../components/ResponsePage/ThesaurusPage/ThesaurusPage';\nimport { useDisclosure } from '@chakra-ui/react';\nimport { Presets } from \"react-component-transition\";\nimport Routes from '../Routes/Routes';\n\nconst  App = () => {\n  const [ Word, setWord ] = useState('')\n  const [ ReturnedWord, setReturnedWord] = useState('')\n  const [ ShortDef, setShortDef ] = useState('')\n  const [ PartOfSpeech, setPartOfSpeech ] = useState('')\n  const [ WordExample, setWordExample ] = useState('')\n  const [ Error, setError ] = useState(false)\n  const [ PathName, setPathName ] = useState('')\n  const { isOpen, onOpen } = useDisclosure()\n  const [ WordFind, setWordFind ] = useState(false)\n  const [ WordFindType ,setWordFindType ] = useState('')\n  const [ WordsLoaded, setWordsLoaded ] = useState(false)\n  const [ Syns, setSyns ] = useState([])\n  const [ Ants, setAnts ] = useState([])\n\n  useEffect(() => {\n    if (PathName === '/thesaurus' && ShortDef === '') {\n      setWordsLoaded(false)\n    } else if (PathName === '/thesaurus' && !(ShortDef === '')) {\n      setWordsLoaded(true)\n    }\n  })\n  const history = useHistory();\n  \n  const getInputValue = (event) => {\n    setWord(event.target.value)\n  }\n  \n  const getWords = () => {\n    if (Word === '') {\n      setWordFind(true)\n      setWordFindType('no input')\n          onOpen()\n        } else {\n    getRequest(Word)\n    .then(data => sendRequstedWord(data))\n    setWordFind(false)\n    setWordFindType('')\n        }\n  }\n\n  const getButtonClick = () => {\n    getWords()\n  }\n\n  const BackButtonClick = () => {\n    setWord('')\n    setReturnedWord('')\n    setPartOfSpeech('')\n    setShortDef('')\n    setWordExample('')\n  }\n\n  const RequestedThesaurus = (word, index) => {\n    try {\n    const { fl, hwi: {hw},  shortdef , def: [{sseq: dt}], meta: {syns}, meta: {ants} } = word[index]\n    const WordExample = dt[0][0][1].dt?.[1]?.[1]?.[0].t ?? dt[0][0][1].dt[0][1]\n    const WordExampleSlicedIt = WordExample.replace('{it}', '<em>').replace('{/it}', '</em>')\n    setAnts(ants[0])\n    setSyns(syns[0])\n    setReturnedWord(hw)\n    setPartOfSpeech(fl)\n    setShortDef(shortdef[0])\n    setWordExample(WordExampleSlicedIt)\n    }\n    catch (error) {\n      console.log(error)\n    }\n  }\n\n  const sendRequstedWord = (word) => {\n    try {\n          if (word[0].hwi) {\n            RequestedThesaurus(word, 0)\n          } else {\n            setError(true)\n            setWordFind(true)\n            setWordFindType('no response')\n            onOpen()\n          }\n    }\n    catch (error) {\n        setError(true)\n        setWordFind(true)\n        onOpen()\n        }\n  }\n  \n  const ThesaurusPageComponent = () => {\n    let ThesaurusPageCondition;\n    if (Word.length) {\n        if (ReturnedWord.length) {\n            ThesaurusPageCondition = <Presets.TransitionFade><ThesaurusPage Ants={Ants} Syns={Syns} WordsLoaded={WordsLoaded} Word={Word} Link={Link} BackButtonClick={BackButtonClick} ReturnedWord={ReturnedWord} PartOfSpeech={PartOfSpeech} ShortDef={ShortDef}\n            ReactHtmlParser={ReactHtmlParser} WordExample={WordExample} getPathName={getPathName}/></Presets.TransitionFade>\n        } else if (Error) {\n          ThesaurusPageCondition = <Redirect to='/' />\n        } else {\n          ThesaurusPageCondition = <Presets.TransitionFade><ThesaurusPage Ants={Ants} Syns={Syns} WordsLoaded={WordsLoaded} Word={Word} Link={Link} BackButtonClick={BackButtonClick} ReturnedWord={ReturnedWord} PartOfSpeech={PartOfSpeech} ShortDef={ShortDef}\n          ReactHtmlParser={ReactHtmlParser} WordExample={WordExample} getPathName={getPathName}/></Presets.TransitionFade>\n        }\n  } else {\n    ThesaurusPageCondition = <Redirect to='/' />\n  }\n  useEffect(() => {\n    if (Error) {\n    setWord('')\n    setError(false)\n    }\n  }, [Error])\n    return ThesaurusPageCondition\n  }\n\n  const getPathName = (Path) => {\n    setPathName(Path)\n  }\n\n  const onEnterKeyPress = (event) => {\n    if (event.which === 13) {\n      getWords()\n      history.push('/thesaurus')\n    }\n  }\n\n  useEffect(() => {\n    if (PathName === '/' && ShortDef.length) {\n      BackButtonClick()\n    }\n  }, [PathName])\n\n  \n  return (\n      <Routes ThesaurusPageComponent={ThesaurusPageComponent} WordFindType={WordFindType}\n       onEnterKeyPress={onEnterKeyPress} WordFind={WordFind} \n       isOpen={isOpen} getInputValue={getInputValue} getButtonClick={getButtonClick} Link={Link} getPathName={getPathName}/>\n  )\n}\n\nexport default App;","import { chakra, Box, Button, useColorMode } from '@chakra-ui/react';\n\n\nconst NavBar = () => {\n\n    const { colorMode, toggleColorMode } = useColorMode()\n    return (\n\n      <Box display='flex' justifyContent='flex-end'>\n        <Button boxShadow='lg' outline='none' outlineColor='initial' style={{outlineStyle: 'none' }} m='4' rounded='xl' onClick={toggleColorMode}>\n          {colorMode === \"light\" \n          ?\n          <chakra.svg outline='none' stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"m224.023438 448.03125c85.714843.902344 164.011718-48.488281 200.117187-126.230469-22.722656 9.914063-47.332031 14.769531-72.117187 14.230469-97.15625-.109375-175.890626-78.84375-176-176 .972656-65.71875 37.234374-125.832031 94.910156-157.351562-15.554688-1.980469-31.230469-2.867188-46.910156-2.648438-123.714844 0-224.0000005 100.289062-224.0000005 224 0 123.714844 100.2851565 224 224.0000005 224zm0 0\">\n          </path>\n          </chakra.svg> \n          :\n          <chakra.svg stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 512 512\" aria-hidden=\"true\" focusable=\"false\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M256,0C115.39,0,0,115.39,0,256s115.39,256,256,256s256-115.39,256-256S396.61,0,256,0z\">\n          </path>\n          </chakra.svg> \n          }\n        </Button>\n      </Box>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react'\nimport {ColorModeScript} from '@chakra-ui/react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport NavBar from './components/NavBar/NavBar';\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Playfair Display\",\n    body: \"Open Sans\",\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n    <Router basename='/wordsapiproject' >\n    <ColorModeScript theme={theme} />\n      <NavBar />\n      <App />\n    </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}